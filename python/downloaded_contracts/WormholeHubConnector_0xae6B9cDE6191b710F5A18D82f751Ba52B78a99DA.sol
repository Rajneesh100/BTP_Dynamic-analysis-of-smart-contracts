{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/messaging/connectors/Connector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {ProposedOwnable} from \"../../shared/ProposedOwnable.sol\";\nimport {IConnector} from \"../interfaces/IConnector.sol\";\n\n/**\n * @title Connector\n * @author Connext Labs, Inc.\n * @notice This contract has the messaging interface functions used by all connectors.\n *\n * @dev This contract stores information about mirror connectors, but can be used as a\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\n * mainnet). In this case, the `mirrorConnector` and `MIRROR_DOMAIN`\n * will be empty\n *\n * @dev If ownership is renounced, this contract will be unable to update its `mirrorConnector`\n * or `mirrorGas`\n */\nabstract contract Connector is ProposedOwnable, IConnector {\n  // ========== Custom Errors ===========\n\n  error Connector__processMessage_notUsed();\n\n  // ============ Events ============\n\n  event NewConnector(\n    uint32 indexed domain,\n    uint32 indexed mirrorDomain,\n    address amb,\n    address rootManager,\n    address mirrorConnector\n  );\n\n  event MirrorConnectorUpdated(address previous, address current);\n\n  /**\n   * @notice Emitted when funds are withdrawn by the admin\n   * @dev See comments in `withdrawFunds`\n   * @param to The recipient of the funds\n   * @param amount The amount withdrawn\n   */\n  event FundsWithdrawn(address indexed to, uint256 amount);\n\n  // ============ Public Storage ============\n\n  /**\n   * @notice The domain of this Messaging (i.e. Connector) contract.\n   */\n  uint32 public immutable DOMAIN;\n\n  /**\n   * @notice Address of the AMB on this domain.\n   */\n  address public immutable AMB;\n\n  /**\n   * @notice RootManager contract address.\n   */\n  address public immutable ROOT_MANAGER;\n\n  /**\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\n   */\n  uint32 public immutable MIRROR_DOMAIN;\n\n  /**\n   * @notice Connector on L2 for L1 connectors, and vice versa.\n   */\n  address public mirrorConnector;\n\n  // ============ Modifiers ============\n\n  /**\n   * @notice Errors if the msg.sender is not the registered AMB\n   */\n  modifier onlyAMB() {\n    require(msg.sender == AMB, \"!AMB\");\n    _;\n  }\n\n  /**\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\n   */\n  modifier onlyRootManager() {\n    // NOTE: RootManager will be zero address for spoke connectors.\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\n    require(msg.sender == ROOT_MANAGER, \"!rootManager\");\n    _;\n  }\n\n  // ============ Constructor ============\n\n  /**\n   * @notice Creates a new HubConnector instance\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\n   * for optimism, there is one connector on optimism and one connector on mainnet)\n   * @param _domain The domain this connector lives on\n   * @param _mirrorDomain The spoke domain\n   * @param _amb The address of the amb on the domain this connector lives on\n   * @param _rootManager The address of the RootManager on mainnet\n   * @param _mirrorConnector The address of the spoke connector\n   */\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector\n  ) ProposedOwnable() {\n    // set the owner\n    _setOwner(msg.sender);\n\n    // sanity checks on values\n    require(_domain != 0, \"empty domain\");\n    require(_rootManager != address(0), \"empty rootManager\");\n    // see note at top of contract on why the mirror values are not sanity checked\n\n    // set immutables\n    DOMAIN = _domain;\n    AMB = _amb;\n    ROOT_MANAGER = _rootManager;\n    MIRROR_DOMAIN = _mirrorDomain;\n    // set mutables if defined\n    if (_mirrorConnector != address(0)) {\n      _setMirrorConnector(_mirrorConnector);\n    }\n\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\n  }\n\n  // ============ Receivable ============\n  /**\n   * @notice Connectors may need to receive native asset to handle fees when sending a\n   * message\n   */\n  receive() external payable {}\n\n  // ============ Admin Functions ============\n\n  /**\n   * @notice Sets the address of the l2Connector for this domain\n   */\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\n    _setMirrorConnector(_mirrorConnector);\n  }\n\n  /**\n   * @notice This function should be callable by owner, and send funds trapped on\n   * a connector to the provided recipient.\n   * @dev Withdraws the entire balance of the contract.\n   *\n   * @param _to The recipient of the funds withdrawn\n   */\n  function withdrawFunds(address _to) public onlyOwner {\n    uint256 amount = address(this).balance;\n    Address.sendValue(payable(_to), amount);\n    emit FundsWithdrawn(_to, amount);\n  }\n\n  // ============ Public Functions ============\n\n  /**\n   * @notice Processes a message received by an AMB\n   * @dev This is called by AMBs to process messages originating from mirror connector\n   */\n  function processMessage(bytes memory _data) external virtual onlyAMB {\n    _processMessage(_data);\n    emit MessageProcessed(_data, msg.sender);\n  }\n\n  /**\n   * @notice Checks the cross domain sender for a given address\n   */\n  function verifySender(address _expected) external returns (bool) {\n    return _verifySender(_expected);\n  }\n\n  // ============ Virtual Functions ============\n\n  /**\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\n   * @param _data The contents of the message\n   * @param _encodedData Data used to send the message; specific to connector\n   */\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal virtual;\n\n  /**\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\n   * root generated on the l2 domain.\n   */\n  function _processMessage(\n    bytes memory /* _data */\n  ) internal virtual {\n    // By default, reverts. This is to ensure the call path is not used unless this function is\n    // overridden by the inheriting class\n    revert Connector__processMessage_notUsed();\n  }\n\n  /**\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\n   * is the expected address.\n   * @dev Should be overridden by the implementing Connector contract.\n   */\n  function _verifySender(address _expected) internal virtual returns (bool);\n\n  // ============ Private Functions ============\n\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\n    mirrorConnector = _mirrorConnector;\n  }\n}\n"
    },
    "contracts/messaging/connectors/GasCap.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProposedOwnable} from \"../../shared/ProposedOwnable.sol\";\n\n/**\n * @notice This contract is used to enforce upper bounds on the amount of fees\n * forwarded along. This caps the amount relayers could charge for the service\n */\nabstract contract GasCap is ProposedOwnable {\n  // ============ Storage ============\n  /**\n   * @notice The gnosis amb requires destination gas to be specified on the origin.\n   * The gas used will be passed in by the relayer to allow for real-time estimates,\n   * but will be capped at the admin-set cap.\n   */\n  uint256 public gasCap;\n\n  // ============ Events ============\n\n  /**\n   * @notice Emitted when admin updates the gas cap\n   * @param _previous The starting value\n   * @param _updated The final value\n   */\n  event GasCapUpdated(uint256 _previous, uint256 _updated);\n\n  // ============ Constructor ============\n  constructor(uint256 _gasCap) {\n    _setGasCap(_gasCap);\n  }\n\n  // ============ Admin Fns ============\n  function setGasCap(uint256 _gasCap) public onlyOwner {\n    _setGasCap(_gasCap);\n  }\n\n  // ============ Internal Fns ============\n\n  /**\n   * @notice Used (by admin) to update the gas cap\n   * @param _gasCap The new value\n   */\n  function _setGasCap(uint256 _gasCap) internal {\n    emit GasCapUpdated(gasCap, _gasCap);\n    gasCap = _gasCap;\n  }\n\n  /**\n   * @notice Used to get the gas to use. Will be the original value IFF it\n   * is less than the cap\n   * @param _gas The proposed gas value\n   */\n  function _getGas(uint256 _gas) internal view returns (uint256) {\n    if (_gas > gasCap) {\n      _gas = gasCap;\n    }\n    return _gas;\n  }\n}\n"
    },
    "contracts/messaging/connectors/HubConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {Connector} from \"./Connector.sol\";\n\n/**\n * @title HubConnector\n * @author Connext Labs, Inc.\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\n * it contains no logic to store or prove messages.\n *\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\n * which extend this should implement the virtual functions defined in the BaseConnector class\n */\nabstract contract HubConnector is Connector {\n  /**\n   * @notice Creates a new HubConnector instance\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\n   * for optimism, there is one connector on optimism and one connector on mainnet)\n   * @param _domain The domain this connector lives on\n   * @param _mirrorDomain The spoke domain\n   * @param _amb The address of the amb on the domain this connector lives on\n   * @param _rootManager The address of the RootManager on mainnet\n   * @param _mirrorConnector The address of the spoke connector\n   */\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {}\n\n  // ============ Public fns ============\n  /**\n   * @notice Sends a message over the amb\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\n   */\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable onlyRootManager {\n    _sendMessage(_data, _encodedData);\n    emit MessageSent(_data, _encodedData, msg.sender);\n  }\n}\n"
    },
    "contracts/messaging/connectors/wormhole/BaseWormhole.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {IWormholeRelayer} from \"../../interfaces/ambs/wormhole/IWormholeRelayer.sol\";\n\nimport {GasCap} from \"../GasCap.sol\";\n\nabstract contract BaseWormhole is GasCap {\n  // ============ Events ============\n\n  event RefundAddressUpdated(address indexed previous, address indexed updated);\n\n  // ============ Storage ============\n  /**\n   * @notice The wormhole id for the mirror network\n   */\n  uint16 public immutable MIRROR_WORMHOLE_ID;\n\n  /**\n   * @notice The address on this chain any refunds from wormhole fees will be\n   * sent to\n   */\n  address public refundAddress;\n\n  /**\n   * @notice Mapping of processed messages from wormhole.\n   * @dev Used for replay protection.\n   */\n  mapping(bytes32 => bool) public processedWhMessages;\n\n  // ============ Constructor ============\n  constructor(uint256 _gasCap, uint16 _mirrorWormholeChainId) GasCap(_gasCap) {\n    MIRROR_WORMHOLE_ID = _mirrorWormholeChainId;\n    _setRefundAddress(msg.sender);\n  }\n\n  // ============ Admin fns ============\n  /**\n   * @notice Allows the owner to set a new address to collect excess wormhole fees.\n   * @param _updated The updated refund address\n   */\n  function setRefundAddress(address _updated) public onlyOwner {\n    _setRefundAddress(_updated);\n  }\n\n  // ============ Public fns ============\n\n  /**\n   * @dev calculcate gas to call `receiveWormholeMessages` on target chain\n   * https://github.com/wormhole-foundation/wormhole/blob/main/ethereum/contracts/relayer/deliveryProvider/DeliveryProvider.sol\n   */\n  function quoteEVMDeliveryPrice(uint256 _gasLimit, address _amb) public view returns (uint256 _cost) {\n    // First Get the gas, if it is more than the cap use the cap\n    // And calculcate delievery price with gasCap\n    (_cost, ) = IWormholeRelayer(_amb).quoteEVMDeliveryPrice(MIRROR_WORMHOLE_ID, 0, _getGas(_gasLimit));\n  }\n\n  // ============ Private fns ============\n\n  function _setRefundAddress(address _updated) internal {\n    require(_updated != refundAddress, \"!changed\");\n    emit RefundAddressUpdated(refundAddress, _updated);\n    refundAddress = _updated;\n  }\n\n  /**\n   * @dev Asserts the sender of a cross domain message\n   */\n  function _verifySender(address _mirrorConnector, address _expected) internal pure returns (bool) {\n    return _mirrorConnector == _expected;\n  }\n\n  // DO NOT override _processMessage, should revert from `Connector` class. All messages must use the _processMessageFrom function\n  /**\n   * @notice This function is called to handle incoming messages. Should store the latest\n   * root generated on the l2 domain.\n   */\n  function _processMessageFrom(address _sender, bytes memory _data) internal virtual;\n\n  /**\n   * @notice Performs sanity checks specific to receiving wormhole messages.\n   * @dev Checks the sender is the AMB, the chain is the mirror, and replay.\n   */\n  function _wormholeSanityChecks(uint16 _sourceChain, address _amb, bytes32 _deliveryHash) internal {\n    require(_sourceChain == MIRROR_WORMHOLE_ID, \"!source chain\");\n    require(msg.sender == _amb, \"!relayer\");\n\n    // Check that the VAA hasn't already been processed (replay protection)\n    require(!processedWhMessages[_deliveryHash], \"already processed\");\n\n    // Add the VAA to processed messages so it can't be replayed\n    // you can alternatively rely on the replay protection\n    // of something like transferWithPayload from the Token Bridge module\n    processedWhMessages[_deliveryHash] = true;\n  }\n\n  /**\n   * @dev send message via wormhole.\n   * https://book.wormhole.com/technical/evm/relayer.html#sending-messages\n   */\n  function _sendMessage(\n    address _amb,\n    address _mirrorConnector,\n    bytes memory _data,\n    bytes memory _encodedData\n  ) internal {\n    // Should always be sending a merkle root\n    require(_data.length == 32, \"!data length\");\n\n    // Should include gas limit info in specialized calldata\n    require(_encodedData.length == 32, \"!encoded data length\");\n\n    //calculate cost to deliver message\n    uint256 gasLimit = abi.decode(_encodedData, (uint256));\n    uint256 deliveryCost = quoteEVMDeliveryPrice(gasLimit, _amb);\n    require(deliveryCost == msg.value, \"!msg.value\");\n\n    // publish delivery request\n    IWormholeRelayer(_amb).sendPayloadToEvm{value: deliveryCost}(\n      MIRROR_WORMHOLE_ID,\n      _mirrorConnector,\n      _data,\n      0,\n      gasLimit,\n      MIRROR_WORMHOLE_ID, // refundChain\n      refundAddress // refundAddress\n    );\n  }\n\n  /**\n   * @notice Converts from wormhole 32 byte identifier format to evm address\n   */\n  function _fromWormholeFormat(bytes32 _whFormatAddress) internal pure returns (address) {\n    require(uint256(_whFormatAddress) >> 160 == 0, \"!evm address\");\n    return address(uint160(uint256(_whFormatAddress)));\n  }\n}\n"
    },
    "contracts/messaging/connectors/wormhole/WormholeHubConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {IRootManager} from \"../../interfaces/IRootManager.sol\";\nimport {IWormholeReceiver} from \"../../interfaces/ambs/wormhole/IWormholeReceiver.sol\";\n\nimport {HubConnector, Connector} from \"../HubConnector.sol\";\n\nimport {BaseWormhole} from \"./BaseWormhole.sol\";\n\ncontract WormholeHubConnector is HubConnector, BaseWormhole, IWormholeReceiver {\n  // ============ Constructor ============\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector,\n    uint256 _gasCap,\n    uint16 _mirrorWormholeChainId\n  )\n    HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector)\n    BaseWormhole(_gasCap, _mirrorWormholeChainId)\n  {}\n\n  // ============ Override Fns ============\n  function _verifySender(address _expected) internal view override returns (bool) {\n    return _verifySender(mirrorConnector, _expected);\n  }\n\n  // ============ Public fns ============\n  /**\n   * @notice This function is called to receive messages through the wormhole relayer module\n   * https://book.wormhole.com/technical/evm/relayer.html\n   * @dev This is defined here instead of the `BaseWormhole` to avoid storing AMB values twice.\n   */\n  function receiveWormholeMessages(\n    bytes memory _payload,\n    bytes[] memory, // additionalVaas,\n    bytes32 _sourceAddress,\n    uint16 _sourceChain,\n    bytes32 _deliveryHash\n  ) public payable override {\n    _wormholeSanityChecks(_sourceChain, AMB, _deliveryHash);\n\n    _processMessageFrom(_fromWormholeFormat(_sourceAddress), _payload);\n  }\n\n  // ============ Private fns ============\n  /**\n   * @dev Handles an incoming `outboundRoot`\n   */\n  function _processMessageFrom(address _sender, bytes memory _data) internal override(BaseWormhole) {\n    // enforce this came from connector on l2\n    require(_verifySender(_sender), \"!l2Connector\");\n\n    // get the data (should be the outbound root)\n    require(_data.length == 32, \"!length\");\n\n    // set the outbound root for BSC domain\n    IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, bytes32(_data));\n\n    emit MessageProcessed(_data, msg.sender);\n  }\n\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal override {\n    _sendMessage(AMB, mirrorConnector, _data, _encodedData);\n  }\n}\n"
    },
    "contracts/messaging/interfaces/IConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {IProposedOwnable} from \"../../shared/interfaces/IProposedOwnable.sol\";\n\n/**\n * @notice This interface is what the Connext contract will send and receive messages through.\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\n * could be Nomad or a generic AMB under the hood).\n *\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\n *\n * Flow from transfer from polygon to optimism:\n * 1. User calls `xcall` with destination specified\n * 2. This will swap in to the bridge assets\n * 3. The swapped assets will get burned\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\n *    to the root\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\n *    mainnet. This is done on all \"spoke\" domains.\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\n *    root from all of the AMBs\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\n *      tree root\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\n *    process on the `Connext` contract\n * 9. Takes minted bridge tokens and credits the LP\n *\n * AMB requirements:\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\n * - Ability to read *our root* from the AMB\n *\n * AMBs:\n * - PoS bridge from polygon\n * - arbitrum bridge\n * - optimism bridge\n * - gnosis chain\n * - bsc (use multichain for messaging)\n */\ninterface IConnector is IProposedOwnable {\n  // ============ Events ============\n  /**\n   * @notice Emitted whenever a message is successfully sent over an AMB\n   * @param data The contents of the message\n   * @param encodedData Data used to send the message; specific to connector\n   * @param caller Who called the function (sent the message)\n   */\n  event MessageSent(bytes data, bytes encodedData, address caller);\n\n  /**\n   * @notice Emitted whenever a message is successfully received over an AMB\n   * @param data The contents of the message\n   * @param caller Who called the function\n   */\n  event MessageProcessed(bytes data, address caller);\n\n  // ============ Public fns ============\n\n  function processMessage(bytes memory _data) external;\n\n  function verifySender(address _expected) external returns (bool);\n}\n"
    },
    "contracts/messaging/interfaces/IRootManager.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\ninterface IRootManager {\n  /**\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\n   * spoke domains.\n   * @dev This must read information for the root from the registered AMBs.\n   */\n  function propagate(\n    address[] calldata _connectors,\n    uint256[] calldata _fees,\n    bytes[] memory _encodedData\n  ) external payable;\n\n  /**\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\n   * inbound root.\n   * @dev This must read information for the root from the registered AMBs\n   */\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\n}\n"
    },
    "contracts/messaging/interfaces/ambs/wormhole/IWormholeReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\n/**\n * @notice Interface for a contract which can receive Wormhole messages.\n */\ninterface IWormholeReceiver {\n  /**\n   * @notice When a `send` is performed with this contract as the target, this function will be\n   *     invoked by the WormholeRelayer contract\n   *\n   * NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it.\n   *\n   * We also recommend that this function:\n   *   - Stores all received `deliveryHash`s in a mapping `(bytes32 => bool)`, and\n   *       on every call, checks that deliveryHash has not already been stored in the\n   *       map (This is to prevent other users maliciously trying to relay the same message)\n   *   - Checks that `sourceChain` and `sourceAddress` are indeed who\n   *       you expect to have requested the calling of `send` or `forward` on the source chain\n   *\n   * The invocation of this function corresponding to the `send` request will have msg.value equal\n   *   to the receiverValue specified in the send request.\n   *\n   * If the invocation of this function reverts or exceeds the gas limit\n   *   specified by the send requester, this delivery will result in a `ReceiverFailure`.\n   *\n   * @param payload - an arbitrary message which was included in the delivery by the\n   *     requester.\n   * @param additionalVaas - Additional VAAs which were requested to be included in this delivery.\n   *   They are guaranteed to all be included and in the same order as was specified in the\n   *     delivery request.\n   * @param sourceAddress - the (wormhole format) address on the sending chain which requested\n   *     this delivery.\n   * @param sourceChain - the wormhole chain ID where this delivery was requested.\n   * @param deliveryHash - the VAA hash of the deliveryVAA.\n   *\n   * NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided\n   *     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract\n   *     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious.\n   */\n  function receiveWormholeMessages(\n    bytes memory payload,\n    bytes[] memory additionalVaas,\n    bytes32 sourceAddress,\n    uint16 sourceChain,\n    bytes32 deliveryHash\n  ) external payable;\n}\n"
    },
    "contracts/messaging/interfaces/ambs/wormhole/IWormholeRelayer.sol": {
      "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\n/**\n * @title WormholeRelayer\n * @author\n * @notice This project allows developers to build cross-chain applications powered by Wormhole without needing to\n * write and run their own relaying infrastructure\n *\n * We implement the IWormholeRelayer interface that allows users to request a delivery provider to relay a payload (and/or additional VAAs)\n * to a chain and address of their choice.\n */\n\n/**\n * @notice VaaKey identifies a wormhole message\n *\n * @custom:member chainId Wormhole chain ID of the chain where this VAA was emitted from\n * @custom:member emitterAddress Address of the emitter of the VAA, in Wormhole bytes32 format\n * @custom:member sequence Sequence number of the VAA\n */\nstruct VaaKey {\n  uint16 chainId;\n  bytes32 emitterAddress;\n  uint64 sequence;\n}\n\ninterface IWormholeRelayerBase {\n  event SendEvent(uint64 indexed sequence, uint256 deliveryQuote, uint256 paymentForExtraReceiverValue);\n\n  function getRegisteredWormholeRelayerContract(uint16 chainId) external view returns (bytes32);\n}\n\n/**\n * @title IWormholeRelayerSend\n * @notice The interface to request deliveries\n */\ninterface IWormholeRelayerSend is IWormholeRelayerBase {\n  /**\n   * @notice Publishes an instruction for the default delivery provider\n   * to relay a payload to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n   *\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n   *\n   * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function\n   * with `refundChain` and `refundAddress` as parameters\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function sendPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Publishes an instruction for the default delivery provider\n   * to relay a payload to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n   *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function sendPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    uint16 refundChain,\n    address refundAddress\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Publishes an instruction for the default delivery provider\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n   *\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n   *\n   * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function\n   * with `refundChain` and `refundAddress` as parameters\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function sendVaasToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    VaaKey[] memory vaaKeys\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Publishes an instruction for the default delivery provider\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n   *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function sendVaasToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    VaaKey[] memory vaaKeys,\n    uint16 refundChain,\n    address refundAddress\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and `msg.value` equal to\n   * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to\n   * quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n   *        (in addition to the `receiverValue` specified)\n   * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n   *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n   *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function sendToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 paymentForExtraReceiverValue,\n    uint256 gasLimit,\n    uint16 refundChain,\n    address refundAddress,\n    address deliveryProviderAddress,\n    VaaKey[] memory vaaKeys,\n    uint8 consistencyLevel\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with `msg.value` equal to\n   * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * This function must be called with `msg.value` equal to\n   * quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n   *        (in addition to the `receiverValue` specified)\n   * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n   *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n   *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n   * @return sequence sequence number of published VAA containing delivery instructions\n   */\n  function send(\n    uint16 targetChain,\n    bytes32 targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 paymentForExtraReceiverValue,\n    bytes memory encodedExecutionParameters,\n    uint16 refundChain,\n    bytes32 refundAddress,\n    address deliveryProviderAddress,\n    VaaKey[] memory vaaKeys,\n    uint8 consistencyLevel\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Performs the same function as a `send`, except:\n   * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\n   * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\n   * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\n   *\n   * The refund from the delivery currently in progress will not be sent to the user; it will instead\n   * be paid to the delivery provider to perform the instruction specified here\n   *\n   * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\n   * to relay a payload to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\n   *\n   * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\n   * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\n   * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\n   *\n   * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\n   *\n   * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   */\n  function forwardPayloadToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit\n  ) external payable;\n\n  /**\n   * @notice Performs the same function as a `send`, except:\n   * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\n   * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\n   * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\n   *\n   * The refund from the delivery currently in progress will not be sent to the user; it will instead\n   * be paid to the delivery provider to perform the instruction specified here\n   *\n   * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\n   *\n   * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\n   * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\n   * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\n   *\n   * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\n   *\n   * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   */\n  function forwardVaasToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    VaaKey[] memory vaaKeys\n  ) external payable;\n\n  /**\n   * @notice Performs the same function as a `send`, except:\n   * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\n   * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\n   * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\n   *\n   * The refund from the delivery currently in progress will not be sent to the user; it will instead\n   * be paid to the delivery provider to perform the instruction specified here\n   *\n   * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with gas limit `gasLimit` and with `msg.value` equal to\n   * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\n   * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\n   * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\n   *\n   * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n   *        (in addition to the `receiverValue` specified)\n   * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n   *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n   *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n   */\n  function forwardToEvm(\n    uint16 targetChain,\n    address targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 paymentForExtraReceiverValue,\n    uint256 gasLimit,\n    uint16 refundChain,\n    address refundAddress,\n    address deliveryProviderAddress,\n    VaaKey[] memory vaaKeys,\n    uint8 consistencyLevel\n  ) external payable;\n\n  /**\n   * @notice Performs the same function as a `send`, except:\n   * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\n   * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\n   * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\n   *\n   * The refund from the delivery currently in progress will not be sent to the user; it will instead\n   * be paid to the delivery provider to perform the instruction specified here\n   *\n   * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n   * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n   * with `msg.value` equal to\n   * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n   *\n   * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n   * `targetAddress` must implement the IWormholeReceiver interface\n   *\n   * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\n   * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\n   * >= sum_f [quoteDeliveryPrice(targetChain_f, receiverValue_f, encodedExecutionParameters_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\n   *\n   * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n   * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n   *        (in addition to the `receiverValue` specified)\n   * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n   *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n   * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n   * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n   * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n   *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n   */\n  function forward(\n    uint16 targetChain,\n    bytes32 targetAddress,\n    bytes memory payload,\n    uint256 receiverValue,\n    uint256 paymentForExtraReceiverValue,\n    bytes memory encodedExecutionParameters,\n    uint16 refundChain,\n    bytes32 refundAddress,\n    address deliveryProviderAddress,\n    VaaKey[] memory vaaKeys,\n    uint8 consistencyLevel\n  ) external payable;\n\n  /**\n   * @notice Requests a previously published delivery instruction to be redelivered\n   * (e.g. with a different delivery provider)\n   *\n   * This function must be called with `msg.value` equal to\n   * quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)\n   *\n   * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\n   *        previously published delivery instructions\n   * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\n   * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param newGasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n   *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\n   * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @return sequence sequence number of published VAA containing redelivery instructions\n   */\n  function resendToEvm(\n    VaaKey memory deliveryVaaKey,\n    uint16 targetChain,\n    uint256 newReceiverValue,\n    uint256 newGasLimit,\n    address newDeliveryProviderAddress\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Requests a previously published delivery instruction to be redelivered\n   *\n   *\n   * This function must be called with `msg.value` equal to\n   * quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)\n   *\n   * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\n   *        previously published delivery instructions\n   * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\n   * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param newEncodedExecutionParameters new encoded information on how to execute delivery that may impact pricing\n   *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n   * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @return sequence sequence number of published VAA containing redelivery instructions\n   */\n  function resend(\n    VaaKey memory deliveryVaaKey,\n    uint16 targetChain,\n    uint256 newReceiverValue,\n    bytes memory newEncodedExecutionParameters,\n    address newDeliveryProviderAddress\n  ) external payable returns (uint64 sequence);\n\n  /**\n   * @notice Returns the price to request a relay to chain `targetChain`, using the default delivery provider\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n   * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\n   *         if a refundAddress is specified\n   */\n  function quoteEVMDeliveryPrice(\n    uint16 targetChain,\n    uint256 receiverValue,\n    uint256 gasLimit\n  ) external view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\n\n  /**\n   * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param gasLimit gas limit with which to call `targetAddress`.\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n   * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\n   *         if a refundAddress is specified\n   */\n  function quoteEVMDeliveryPrice(\n    uint16 targetChain,\n    uint256 receiverValue,\n    uint256 gasLimit,\n    address deliveryProviderAddress\n  ) external view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\n\n  /**\n   * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n   * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n   *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n   * @return encodedExecutionInfo encoded information on how the delivery will be executed\n   *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`\n   *             (which is the amount of target chain currency that will be refunded per unit of gas unused,\n   *              if a refundAddress is specified)\n   */\n  function quoteDeliveryPrice(\n    uint16 targetChain,\n    uint256 receiverValue,\n    bytes memory encodedExecutionParameters,\n    address deliveryProviderAddress\n  ) external view returns (uint256 nativePriceQuote, bytes memory encodedExecutionInfo);\n\n  /**\n   * @notice Returns the (extra) amount of target chain currency that `targetAddress`\n   * will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\n   *\n   * @param targetChain in Wormhole Chain ID format\n   * @param currentChainAmount The value that `paymentForExtraReceiverValue` will be set to\n   * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n   * @return targetChainAmount The amount such that if `targetAddress` will be called with `msg.value` equal to\n   *         receiverValue + targetChainAmount\n   */\n  function quoteNativeForChain(\n    uint16 targetChain,\n    uint256 currentChainAmount,\n    address deliveryProviderAddress\n  ) external view returns (uint256 targetChainAmount);\n\n  /**\n   * @notice Returns the address of the current default delivery provider\n   * @return deliveryProvider The address of (the default delivery provider)'s contract on this source\n   *   chain. This must be a contract that implements IDeliveryProvider.\n   */\n  function getDefaultDeliveryProvider() external view returns (address deliveryProvider);\n}\n\n/**\n * @title IWormholeRelayerDelivery\n * @notice The interface to execute deliveries. Only relevant for Delivery Providers\n */\ninterface IWormholeRelayerDelivery is IWormholeRelayerBase {\n  enum DeliveryStatus {\n    SUCCESS,\n    RECEIVER_FAILURE,\n    FORWARD_REQUEST_FAILURE,\n    FORWARD_REQUEST_SUCCESS\n  }\n\n  enum RefundStatus {\n    REFUND_SENT,\n    REFUND_FAIL,\n    CROSS_CHAIN_REFUND_SENT,\n    CROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED,\n    CROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH\n  }\n\n  /**\n   * @custom:member recipientContract - The target contract address\n   * @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\n   *     ChainID format)\n   * @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\n   *     corresponding to this delivery request\n   * @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\n   *     request\n   * @custom:member gasUsed - The amount of gas that was used to call your target contract\n   * @custom:member status:\n   *   - RECEIVER_FAILURE, if the target contract reverts\n   *   - SUCCESS, if the target contract doesn't revert and no forwards were requested\n   *   - FORWARD_REQUEST_FAILURE, if the target contract doesn't revert, forwards were requested,\n   *       but provided/leftover funds were not sufficient to cover them all\n   *   - FORWARD_REQUEST_SUCCESS, if the target contract doesn't revert and all forwards are covered\n   * @custom:member additionalStatusInfo:\n   *   - If status is SUCCESS or FORWARD_REQUEST_SUCCESS, then this is empty.\n   *   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\n   *       return data (i.e. potentially truncated revert reason information).\n   *   - If status is FORWARD_REQUEST_FAILURE, this is also the revert data - the reason the forward failed.\n   *     This will be either an encoded Cancelled, DeliveryProviderReverted, or DeliveryProviderPaymentFailed error\n   * @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\n   *     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\n   *     where a cross chain refund is necessary\n   * @custom:member overridesInfo:\n   *   - If not an override: empty bytes array\n   *   - Otherwise: An encoded `DeliveryOverride`\n   */\n  event Delivery(\n    address indexed recipientContract,\n    uint16 indexed sourceChain,\n    uint64 indexed sequence,\n    bytes32 deliveryVaaHash,\n    DeliveryStatus status,\n    uint256 gasUsed,\n    RefundStatus refundStatus,\n    bytes additionalStatusInfo,\n    bytes overridesInfo\n  );\n\n  /**\n   * @notice The delivery provider calls `deliver` to relay messages as described by one delivery instruction\n   *\n   * The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\n   * as well as the signed wormhole message with the delivery instructions (the delivery VAA)\n   *\n   * The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\n   * - the delivery VAA has a valid signature\n   * - the delivery VAA's emitter is one of these WormholeRelayer contracts\n   * - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\n   * - the instruction's target chain is this chain\n   * - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\n   *\n   * @param encodedVMs - An array of signed wormhole messages (all from the same source chain\n   *     transaction)\n   * @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\n   *     contract with payload being the encoded delivery instruction container\n   * @param relayerRefundAddress - The address to which any refunds to the delivery provider\n   *     should be sent\n   * @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\n   *     an encoded DeliveryOverride struct\n   */\n  function deliver(\n    bytes[] memory encodedVMs,\n    bytes memory encodedDeliveryVAA,\n    address payable relayerRefundAddress,\n    bytes memory deliveryOverrides\n  ) external payable;\n}\n\ninterface IWormholeRelayer is IWormholeRelayerDelivery, IWormholeRelayerSend {}\n\n/*\n *  Errors thrown by IWormholeRelayer contract\n */\n\n// Bound chosen by the following formula: `memoryWord * 4 + selectorSize`.\n// This means that an error identifier plus four fixed size arguments should be available to developers.\n// In the case of a `require` revert with error message, this should provide 2 memory word's worth of data.\nuint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;\n\n//When msg.value was not equal to `delivery provider's quoted delivery price` + `paymentForExtraReceiverValue`\nerror InvalidMsgValue(uint256 msgValue, uint256 totalFee);\n\nerror RequestedGasLimitTooLow();\n\nerror DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId);\nerror DeliveryProviderCannotReceivePayment();\n\n//When calling `forward()` on the WormholeRelayer if no delivery is in progress\nerror NoDeliveryInProgress();\n//When calling `delivery()` a second time even though a delivery is already in progress\nerror ReentrantDelivery(address msgSender, address lockedBy);\n//When any other contract but the delivery target calls `forward()` on the WormholeRelayer while a\n//  delivery is in progress\nerror ForwardRequestFromWrongAddress(address msgSender, address deliveryTarget);\n\nerror InvalidPayloadId(uint8 parsed, uint8 expected);\nerror InvalidPayloadLength(uint256 received, uint256 expected);\nerror InvalidVaaKeyType(uint8 parsed);\n\nerror InvalidDeliveryVaa(string reason);\n//When the delivery VAA (signed wormhole message with delivery instructions) was not emitted by the\n//  registered WormholeRelayer contract\nerror InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);\nerror VaaKeysLengthDoesNotMatchVaasLength(uint256 keys, uint256 vaas);\nerror VaaKeysDoNotMatchVaas(uint8 index);\n//When someone tries to call an external function of the WormholeRelayer that is only intended to be\n//  called by the WormholeRelayer itself (to allow retroactive reverts for atomicity)\nerror RequesterNotWormholeRelayer();\n\n//When trying to relay a `DeliveryInstruction` to any other chain but the one it was specified for\nerror TargetChainIsNotThisChain(uint16 targetChain);\nerror ForwardNotSufficientlyFunded(uint256 amountOfFunds, uint256 amountOfFundsNeeded);\n//When a `DeliveryOverride` contains a gas limit that's less than the original\nerror InvalidOverrideGasLimit();\n//When a `DeliveryOverride` contains a receiver value that's less than the original\nerror InvalidOverrideReceiverValue();\n//When a `DeliveryOverride` contains a 'refund per unit of gas unused' that's less than the original\nerror InvalidOverrideRefundPerGasUnused();\n\n//When the delivery provider doesn't pass in sufficient funds (i.e. msg.value does not cover the\n// maximum possible refund to the user)\nerror InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);\n\n//When a bytes32 field can't be converted into a 20 byte EVM address, because the 12 padding bytes\n//  are non-zero (duplicated from Utils.sol)\nerror NotAnEvmAddress(bytes32);\n"
    },
    "contracts/shared/ProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport {IProposedOwnable} from \"./interfaces/IProposedOwnable.sol\";\n\n/**\n * @title ProposedOwnable\n * @notice Contract module which provides a basic access control mechanism,\n * where there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed via a two step process:\n * 1. Call `proposeOwner`\n * 2. Wait out the delay period\n * 3. Call `acceptOwner`\n *\n * @dev This module is used through inheritance. It will make available the\n * modifier `onlyOwner`, which can be applied to your functions to restrict\n * their use to the owner.\n *\n * @dev The majority of this code was taken from the openzeppelin Ownable\n * contract\n *\n */\nabstract contract ProposedOwnable is IProposedOwnable {\n  // ========== Custom Errors ===========\n\n  error ProposedOwnable__onlyOwner_notOwner();\n  error ProposedOwnable__onlyProposed_notProposedOwner();\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\n  error ProposedOwnable__renounceOwnership_noProposal();\n  error ProposedOwnable__renounceOwnership_invalidProposal();\n\n  // ============ Properties ============\n\n  address private _owner;\n\n  address private _proposed;\n  uint256 private _proposedOwnershipTimestamp;\n\n  uint256 private constant _delay = 7 days;\n\n  // ======== Getters =========\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposed() public view virtual returns (address) {\n    return _proposed;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposedTimestamp() public view virtual returns (uint256) {\n    return _proposedOwnershipTimestamp;\n  }\n\n  /**\n   * @notice Returns the delay period before a new owner can be accepted.\n   */\n  function delay() public view virtual returns (uint256) {\n    return _delay;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the proposed owner.\n   */\n  modifier onlyProposed() {\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if the ownership delay has not elapsed\n   */\n  modifier ownershipDelayElapsed() {\n    // Ensure delay has elapsed\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n    _;\n  }\n\n  /**\n   * @notice Indicates if the ownership has been renounced() by\n   * checking if current owner is address(0)\n   */\n  function renounced() public view returns (bool) {\n    return _owner == address(0);\n  }\n\n  // ======== External =========\n\n  /**\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\n   * newly proposed owner as step 1 in a 2-step process\n   */\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\n    // Contract as source of truth\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\n\n    // Sanity check: reasonable proposal\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\n\n    _setProposed(newlyProposed);\n  }\n\n  /**\n   * @notice Renounces ownership of the contract after a delay\n   */\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\n    // Ensure there has been a proposal cycle started\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\n\n    // Require proposed is set to 0\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(address(0));\n  }\n\n  /**\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\n    // is 0-d out and this check is implicitly enforced by modifier\n\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\n    // the only time this would happen is if the _proposed was never\n    // set (will fail from modifier) or if the owner == _proposed (checked\n    // above)\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(_proposed);\n  }\n\n  // ======== Internal =========\n\n  function _setOwner(address newOwner) internal {\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n    delete _proposedOwnershipTimestamp;\n    delete _proposed;\n  }\n\n  function _setProposed(address newlyProposed) private {\n    _proposedOwnershipTimestamp = block.timestamp;\n    _proposed = newlyProposed;\n    emit OwnershipProposed(newlyProposed);\n  }\n}\n"
    },
    "contracts/shared/interfaces/IProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @title IProposedOwnable\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\n * process\n */\ninterface IProposedOwnable {\n  /**\n   * @dev This emits when change in ownership of a contract is proposed.\n   */\n  event OwnershipProposed(address indexed proposedOwner);\n\n  /**\n   * @dev This emits when ownership of a contract changes.\n   */\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @notice Get the address of the owner\n   * @return owner_ The address of the owner.\n   */\n  function owner() external view returns (address owner_);\n\n  /**\n   * @notice Get the address of the proposed owner\n   * @return proposed_ The address of the proposed.\n   */\n  function proposed() external view returns (address proposed_);\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   * @param newlyProposed The proposed new owner of the contract\n   */\n  function proposeNewOwner(address newlyProposed) external;\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   */\n  function acceptProposedOwner() external;\n}\n"
    }
  }
}}