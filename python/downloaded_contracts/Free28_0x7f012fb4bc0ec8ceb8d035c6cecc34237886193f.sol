{"Free28.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$   /$$$$$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$ /$$__  $$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$| $$  \\ $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$           /$$$$$$/|  $$$$$$/\n| $$__/   | $$__  $$| $$__/   | $$__/          /$$____/  \u003e$$__  $$\n| $$      | $$  \\ $$| $$      | $$            | $$      | $$  \\ $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      | $$$$$$$$|  $$$$$$/\n|__/      |__/  |__/|________/|________/      |________/ \\______/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\n\n\ninterface MoneyMakingOpportunity {\n  function ownerOf(uint256) external view returns (address);\n  function votes(uint256, uint256) external view returns (bool);\n  function calculateVotes(uint256) external view returns (uint256);\n  function isEliminated(uint256) external view returns (bool);\n  function tokenIdToWeek(uint256) external view returns (uint256);\n  function settlementAddressProposals(uint256) external view returns (address);\n}\n\ninterface Prop15 {\n  function ownerOf(uint256) external view returns (address);\n}\n\n\ncontract Free28 is FreeChecker {\n\n  MoneyMakingOpportunity public mmo = MoneyMakingOpportunity(0x41d3d86a84c8507A7Bc14F2491ec4d188FA944E7);\n  Prop15 public prop15 = Prop15(0x1c218412046fdFCD561806bE1DCb2c94307Be625);\n\n  mapping(uint256 =\u003e bool) public mmoProposerTokenIdUsed;\n  mapping(uint256 =\u003e bool) public mmoProp15VoterTokenIdUsed;\n  mapping(uint256 =\u003e bool) public mmoActiveTokenIdUsed;\n  mapping(uint256 =\u003e bool) public prop15WhitePaperTokenIdUsed;\n\n\n\n\n  function claim(\n    uint256 free0TokenId,\n    uint256 prop15WhitePaperTokenId,\n    uint256 mmoProp15VoterTokenId,\n    uint256 mmoActiveTokenId,\n    uint256 mmoProposerTokenId,\n    uint256[10] calldata orderedYayVotes\n  ) external {\n    preCheck(free0TokenId, \u002728\u0027);\n\n\n    require(prop15.ownerOf(prop15WhitePaperTokenId) == msg.sender, \u0027Must own Prop15 token\u0027);\n    require(mmo.ownerOf(mmoProp15VoterTokenId) == msg.sender, \u0027Must own MMO token\u0027);\n    require(mmo.ownerOf(mmoActiveTokenId) == msg.sender, \u0027Must own MMO token\u0027);\n    require(mmo.ownerOf(mmoProposerTokenId) == msg.sender, \u0027Must own MMO token\u0027);\n\n\n    require(!prop15WhitePaperTokenIdUsed[prop15WhitePaperTokenId], \u0027Prop15 token used\u0027);\n    require(!mmoProp15VoterTokenIdUsed[mmoProp15VoterTokenId], \u0027MMO token used\u0027);\n    require(!mmoActiveTokenIdUsed[mmoActiveTokenId], \u0027MMO token used\u0027);\n    require(!mmoProposerTokenIdUsed[mmoProposerTokenId], \u0027MMO token used\u0027);\n\n    require(\n      mmo.votes(mmoProp15VoterTokenId, 15) == true,\n      \u0027Did not vote for Prop15\u0027\n    );\n\n    require(\n      mmo.isEliminated(mmoActiveTokenId) == false,\n      \u0027MMO has already been thrown overboard\u0027\n    );\n\n    uint256 proposalWeek = mmo.tokenIdToWeek(mmoProposerTokenId);\n    require(\n      mmo.settlementAddressProposals(proposalWeek) != address(0),\n      \u0027No settlement address proposed\u0027\n    );\n    for (uint256 i; i \u003c 10; ++i) {\n      if (i \u003e 0) require(orderedYayVotes[i] \u003e orderedYayVotes[i-1], \u0027Yays unordered\u0027);\n      require(mmo.votes(orderedYayVotes[i], proposalWeek) == true, \u0027Not yay vote\u0027);\n    }\n\n\n\n    mmoProposerTokenIdUsed[mmoProposerTokenId] = true;\n    mmoProp15VoterTokenIdUsed[mmoProp15VoterTokenId] = true;\n    mmoActiveTokenIdUsed[mmoActiveTokenId] = true;\n    prop15WhitePaperTokenIdUsed[prop15WhitePaperTokenId] = true;\n\n\n\n\n\n\n    postCheck(free0TokenId, 28, \u002728\u0027);\n  }\n\n}"},"FreeChecker.sol":{"content":"\n// SPDX-License-Identifier: CC0\n\n\n/*\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\ninterface IFree {\n  function totalSupply() external  view returns (uint256);\n  function balanceOf(address) external  view returns (uint256);\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n  function collectionSupply(uint256 collectionId) external view returns (uint256);\n  function collectionIdToMinter(uint256 collectionId) external view returns (address);\n  function mint(uint256 collectionId, address to) external;\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\nabstract contract FreeChecker {\n  mapping(uint256 =\u003e bool) public free0TokenIdUsed;\n  IFree public immutable free = IFree(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function preCheck(uint256 free0TokenId, string memory freeStr) internal view {\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[free0TokenId],\n      string(abi.encodePacked(\u0027This Free0 has already been used to mint a Free\u0027, freeStr))\n    );\n    require(free.ownerOf(free0TokenId) == msg.sender, \u0027You must be the owner of this Free0\u0027);\n\n  }\n\n  function postCheck(uint256 free0TokenId, uint256 freeNumber, string memory freeStr) internal {\n    free0TokenIdUsed[free0TokenId] = true;\n    free.appendAttributeToToken(free0TokenId,\n      string(abi.encodePacked(\u0027Used For Free\u0027, freeStr, \u0027 Mint\u0027)),\n      \u0027true\u0027\n    );\n    free.mint(freeNumber, msg.sender);\n  }\n\n  function checkFreeToken(uint256 freeTokenId, uint256 collectionId) internal view {\n    require(free.ownerOf(freeTokenId) == msg.sender, \u0027Not owner of token\u0027);\n    require(free.tokenIdToCollectionId(freeTokenId) == collectionId, \u0027Token collection mismatch\u0027);\n  }\n}"}}