{"Free23.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$   /$$$$$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$ /$$__  $$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$|__/  \\ $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$           /$$$$$$/   /$$$$$/\n| $$__/   | $$__  $$| $$__/   | $$__/          /$$____/   |___  $$\n| $$      | $$  \\ $$| $$      | $$            | $$       /$$  \\ $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      | $$$$$$$$|  $$$$$$/\n|__/      |__/  |__/|________/|________/      |________/ \\______/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\n\n\ninterface DancingMan {\n  function balanceOf(address, uint256) external returns (uint256);\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) external;\n}\n\ncontract Free23 is FreeChecker {\n  DancingMan public dancingMan = DancingMan(0xC8D1a7814194aa6355727098448C7EE48f2a1e1C);\n\n  uint256 public totalDancingMen;\n  mapping(address =\u003e uint256) public ownerToStakedDancingMen;\n  mapping(uint256 =\u003e bool) public free22Used;\n\n  function onERC1155Received(\n    address,\n    address from,\n    uint256 id,\n    uint256 amount,\n    bytes calldata\n  ) external returns (bytes4) {\n    require(\n      msg.sender == address(dancingMan) \u0026\u0026 id == 1,\n      \u0027Token must be Dancing Man\u0027\n    );\n\n    ownerToStakedDancingMen[from] += amount;\n\n    return this.onERC1155Received.selector;\n  }\n\n  function withdrawDancingMan(uint256 amount) external {\n    require(amount \u003c= ownerToStakedDancingMen[msg.sender], \u0027Dancing Man withdrawl too large\u0027);\n    ownerToStakedDancingMen[msg.sender] -= amount;\n    dancingMan.safeTransferFrom(address(this), msg.sender, 1, amount, \u0027\u0027);\n  }\n\n\n  function claim(uint256 free0TokenId, uint256 free22TokenId) external {\n    preCheck(free0TokenId, \u002723\u0027);\n\n    require(dancingMan.balanceOf(address(this), 1) \u003e= 5, \u0027Dancin Man balance not \u003e= 5\u0027);\n    checkFreeToken(free22TokenId, 22);\n    require(!free22Used[free22TokenId], \u0027Free22 already used\u0027);\n    free22Used[free22TokenId] = true;\n\n\n    postCheck(free0TokenId, 23, \u002723\u0027);\n  }\n\n}"},"FreeChecker.sol":{"content":"\n// SPDX-License-Identifier: CC0\n\n\n/*\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\ninterface IFree {\n  function totalSupply() external  view returns (uint256);\n  function balanceOf(address) external  view returns (uint256);\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n  function collectionSupply(uint256 collectionId) external view returns (uint256);\n  function collectionIdToMinter(uint256 collectionId) external view returns (address);\n  function mint(uint256 collectionId, address to) external;\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\nabstract contract FreeChecker {\n  mapping(uint256 =\u003e bool) public free0TokenIdUsed;\n  IFree public immutable free = IFree(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function preCheck(uint256 free0TokenId, string memory freeStr) internal view {\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[free0TokenId],\n      string(abi.encodePacked(\u0027This Free0 has already been used to mint a Free\u0027, freeStr))\n    );\n    require(free.ownerOf(free0TokenId) == msg.sender, \u0027You must be the owner of this Free0\u0027);\n\n  }\n\n  function postCheck(uint256 free0TokenId, uint256 freeNumber, string memory freeStr) internal {\n    free0TokenIdUsed[free0TokenId] = true;\n    free.appendAttributeToToken(free0TokenId,\n      string(abi.encodePacked(\u0027Used For Free\u0027, freeStr, \u0027 Mint\u0027)),\n      \u0027true\u0027\n    );\n    free.mint(freeNumber, msg.sender);\n  }\n\n  function checkFreeToken(uint256 freeTokenId, uint256 collectionId) internal view {\n    require(free.ownerOf(freeTokenId) == msg.sender, \u0027Not owner of token\u0027);\n    require(free.tokenIdToCollectionId(freeTokenId) == collectionId, \u0027Token collection mismatch\u0027);\n  }\n}"}}