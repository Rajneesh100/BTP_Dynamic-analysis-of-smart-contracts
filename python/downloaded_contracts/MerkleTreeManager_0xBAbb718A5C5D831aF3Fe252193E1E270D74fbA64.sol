{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/messaging/MerkleTreeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {ProposedOwnableUpgradeable} from \"../shared/ProposedOwnableUpgradeable.sol\";\nimport {MerkleLib} from \"./libraries/MerkleLib.sol\";\n\n/**\n * @title MerkleTreeManager\n * @notice Contains a Merkle tree instance and exposes read/write functions for the tree.\n * @dev On the hub domain there are two MerkleTreeManager contracts, one for the hub and one for the MainnetSpokeConnector.\n */\ncontract MerkleTreeManager is ProposedOwnableUpgradeable {\n  // ========== Custom Errors ===========\n\n  error MerkleTreeManager__renounceOwnership_prohibited();\n  error MerkleTreeManager__setArborist_zeroAddress();\n  error MerkleTreeManager__setArborist_alreadyArborist();\n\n  // ============ Events ============\n\n  event ArboristUpdated(address previous, address updated);\n\n  event LeafInserted(bytes32 root, uint256 count, bytes32 leaf);\n\n  event LeavesInserted(bytes32 root, uint256 count, bytes32[] leaves);\n\n  // ============ Structs ============\n\n  // Status of Message:\n  //   0 - None - message has not been proven or processed\n  //   1 - Proven - message inclusion proof has been validated\n  //   2 - Processed - message has been dispatched to recipient\n  enum LeafStatus {\n    None,\n    Proven,\n    Processed\n  }\n\n  // ============ Libraries ============\n\n  using MerkleLib for MerkleLib.Tree;\n\n  // ============ Public Storage ============\n\n  /**\n   * @notice Core data structure with which this contract is tasked with keeping custody.\n   * Writable only by the designated arborist.\n   */\n  MerkleLib.Tree public tree;\n\n  /**\n   * @notice The arborist contract that has permission to write to this tree.\n   * @dev This could be the root manager contract or a spoke connector contract, for example.\n   */\n  address public arborist;\n\n  /**\n   * @notice The leaves that are proven already\n   */\n  mapping(bytes32 => LeafStatus) public leaves;\n\n  /**\n   * @notice domain => next available nonce for the domain.\n   */\n  mapping(uint32 => uint32) public nonces;\n\n  // ============ Modifiers ============\n\n  modifier onlyArborist() {\n    require(arborist == msg.sender, \"!arborist\");\n    _;\n  }\n\n  // ============ Getters ============\n\n  /**\n   * @notice Returns the current branch.\n   */\n  function branch() public view returns (bytes32[32] memory) {\n    return tree.branch;\n  }\n\n  /**\n   * @notice Calculates and returns the current root.\n   */\n  function root() public view returns (bytes32) {\n    return tree.root();\n  }\n\n  /**\n   * @notice Returns the number of inserted leaves in the tree (current index).\n   */\n  function count() public view returns (uint256) {\n    return tree.count;\n  }\n\n  /**\n   * @notice Convenience getter: returns the root and count.\n   */\n  function rootAndCount() public view returns (bytes32, uint256) {\n    return (tree.root(), tree.count);\n  }\n\n  // ======== Initializer =========\n\n  function initialize(address _arborist) public initializer {\n    __MerkleTreeManager_init(_arborist);\n    __ProposedOwnable_init();\n  }\n\n  /**\n   * @dev Initializes MerkleTreeManager instance. Sets the msg.sender as the initial permissioned\n   */\n  function __MerkleTreeManager_init(address _arborist) internal onlyInitializing {\n    __MerkleTreeManager_init_unchained(_arborist);\n  }\n\n  function __MerkleTreeManager_init_unchained(address _arborist) internal onlyInitializing {\n    arborist = _arborist;\n  }\n\n  // ============ Admin Functions ==============\n\n  /**\n   * @notice Method for the current arborist to assign write permissions to a new arborist.\n   * @param newArborist The new address to set as the current arborist.\n   */\n  function setArborist(address newArborist) external onlyOwner {\n    if (newArborist == address(0)) revert MerkleTreeManager__setArborist_zeroAddress();\n    address current = arborist;\n    if (current == newArborist) revert MerkleTreeManager__setArborist_alreadyArborist();\n\n    // Emit updated event\n    emit ArboristUpdated(current, newArborist);\n\n    arborist = newArborist;\n  }\n\n  /**\n   * @notice Remove ability to renounce ownership\n   * @dev Renounce ownership should be impossible as long as there is a possibility the\n   * arborist may change.\n   */\n  function renounceOwnership() public virtual override onlyOwner {\n    revert MerkleTreeManager__renounceOwnership_prohibited();\n  }\n\n  // ========= Public Functions =========\n\n  /**\n   * @notice Used to increment nonce\n   * @param _domain The domain the nonce will be used for\n   * @return _nonce The incremented nonce\n   */\n  function incrementNonce(uint32 _domain) public onlyArborist returns (uint32 _nonce) {\n    _nonce = nonces[_domain]++;\n  }\n\n  /**\n   * @notice Used to track proven leaves\n   * @param _leaf The leaf to mark as proven\n   */\n  function markAsProven(bytes32 _leaf) public onlyArborist {\n    require(leaves[_leaf] == LeafStatus.None, \"!empty\");\n    leaves[_leaf] = LeafStatus.Proven;\n  }\n\n  /**\n   * @notice Used to track processed leaves\n   * @param _leaf The leaf to mark as proven\n   */\n  function markAsProcessed(bytes32 _leaf) public onlyArborist {\n    require(leaves[_leaf] == LeafStatus.Proven, \"!proven\");\n    leaves[_leaf] = LeafStatus.Processed;\n  }\n\n  /**\n   * @notice Inserts the given leaves into the tree.\n   * @param _leaves The leaves to be inserted into the tree.\n   * @return _root Current root for convenience.\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\n   * provided for convenience.\n   */\n  function insert(bytes32[] memory _leaves) public onlyArborist returns (bytes32 _root, uint256 _count) {\n    // For > 1 leaf, considerably more efficient to put this tree into memory, conduct operations,\n    // then re-assign it to storage - *especially* if we have multiple leaves to insert.\n    MerkleLib.Tree memory _tree = tree;\n\n    uint256 leafCount = _leaves.length;\n    for (uint256 i; i < leafCount; ) {\n      // Insert the new node (using in-memory method).\n      _tree = _tree.insert(_leaves[i]);\n      unchecked {\n        ++i;\n      }\n    }\n    // Write the newly updated tree to storage.\n    tree = _tree;\n\n    // Get return details for convenience.\n    _count = _tree.count;\n    // NOTE: Root calculation method currently reads from storage only.\n    _root = tree.root();\n\n    emit LeavesInserted(_root, _count, _leaves);\n  }\n\n  /**\n   * @notice Inserts the given leaf into the tree.\n   * @param leaf The leaf to be inserted into the tree.\n   * @return _root Current root for convenience.\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\n   * provided for convenience.\n   */\n  function insert(bytes32 leaf) public onlyArborist returns (bytes32 _root, uint256 _count) {\n    // Insert the new node.\n    tree = tree.insert(leaf);\n    _count = tree.count;\n    _root = tree.root();\n\n    emit LeafInserted(_root, _count, leaf);\n  }\n\n  // ============ Upgrade Gap ============\n  uint256[46] private __GAP; // gap for upgrade safety\n}\n"
    },
    "contracts/messaging/libraries/MerkleLib.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\n/**\n * @title MerkleLib\n * @author Illusory Systems Inc.\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\n **/\nlibrary MerkleLib {\n  // ========== Custom Errors ===========\n\n  error MerkleLib__insert_treeIsFull();\n\n  // ============ Constants =============\n\n  uint256 internal constant TREE_DEPTH = 32;\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n  /**\n   * @dev Z_i represent the hash values at different heights for a binary tree with leaf values equal to `0`.\n   * (e.g. Z_1 is the keccak256 hash of (0x0, 0x0), Z_2 is the keccak256 hash of (Z_1, Z_1), etc...)\n   * Z_0 is the bottom of the 33-layer tree, Z_32 is the top (i.e. root).\n   * Used to shortcut calculation in root calculation methods below.\n   */\n  bytes32 internal constant Z_0 = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n  bytes32 internal constant Z_1 = hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n  bytes32 internal constant Z_2 = hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n  bytes32 internal constant Z_3 = hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n  bytes32 internal constant Z_4 = hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n  bytes32 internal constant Z_5 = hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n  bytes32 internal constant Z_6 = hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n  bytes32 internal constant Z_7 = hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n  bytes32 internal constant Z_8 = hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n  bytes32 internal constant Z_9 = hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n  bytes32 internal constant Z_10 = hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n  bytes32 internal constant Z_11 = hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n  bytes32 internal constant Z_12 = hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n  bytes32 internal constant Z_13 = hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n  bytes32 internal constant Z_14 = hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n  bytes32 internal constant Z_15 = hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n  bytes32 internal constant Z_16 = hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n  bytes32 internal constant Z_17 = hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n  bytes32 internal constant Z_18 = hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n  bytes32 internal constant Z_19 = hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n  bytes32 internal constant Z_20 = hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n  bytes32 internal constant Z_21 = hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n  bytes32 internal constant Z_22 = hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n  bytes32 internal constant Z_23 = hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n  bytes32 internal constant Z_24 = hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n  bytes32 internal constant Z_25 = hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n  bytes32 internal constant Z_26 = hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n  bytes32 internal constant Z_27 = hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n  bytes32 internal constant Z_28 = hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n  bytes32 internal constant Z_29 = hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n  bytes32 internal constant Z_30 = hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n  bytes32 internal constant Z_31 = hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n  bytes32 internal constant Z_32 = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n  // ============= Structs ==============\n\n  /**\n   * @notice Struct representing incremental merkle tree. Contains current\n   * branch and the number of inserted leaves in the tree.\n   **/\n  struct Tree {\n    bytes32[TREE_DEPTH] branch;\n    uint256 count;\n  }\n\n  // ========= Write Methods =========\n\n  /**\n   * @notice Inserts a given node (leaf) into merkle tree. Operates on an in-memory tree and\n   * returns an updated version of that tree.\n   * @dev Reverts if the tree is already full.\n   * @param node Element to insert into tree.\n   * @return Tree Updated tree.\n   **/\n  function insert(Tree memory tree, bytes32 node) internal pure returns (Tree memory) {\n    // Update tree.count to increase the current count by 1 since we'll be including a new node.\n    uint256 size = ++tree.count;\n    if (size > MAX_LEAVES) revert MerkleLib__insert_treeIsFull();\n\n    // Loop starting at 0, ending when we've finished inserting the node (i.e. hashing it) into\n    // the active branch. Each loop we cut size in half, hashing the inserted node up the active\n    // branch along the way.\n    for (uint256 i; i < TREE_DEPTH; ) {\n      // Check if the current size is odd; if so, we set this index in the branch to be the node.\n      if ((size & 1) == 1) {\n        // If i > 0, then this node will be a hash of the original node with every layer up\n        // until layer `i`.\n        tree.branch[i] = node;\n        return tree;\n      }\n      // If the size is not yet odd, we hash the current index in the tree branch with the node.\n      node = keccak256(abi.encodePacked(tree.branch[i], node));\n      size >>= 1; // Cut size in half (statement equivalent to: `size /= 2`).\n\n      unchecked {\n        ++i;\n      }\n    }\n    // As the loop should always end prematurely with the `return` statement, this code should\n    // be unreachable. We revert here just to be safe.\n    revert MerkleLib__insert_treeIsFull();\n  }\n\n  // ========= Read Methods =========\n\n  /**\n   * @notice Calculates and returns tree's current root.\n   * @return _current bytes32 root.\n   **/\n  function root(Tree storage tree) internal view returns (bytes32 _current) {\n    uint256 _index = tree.count;\n\n    if (_index == 0) {\n      return Z_32;\n    }\n\n    uint256 i;\n    assembly {\n      let TREE_SLOT := tree.slot\n\n      for {\n\n      } true {\n\n      } {\n        for {\n\n        } true {\n\n        } {\n          if and(_index, 1) {\n            mstore(0, sload(TREE_SLOT))\n            mstore(0x20, Z_0)\n            _current := keccak256(0, 0x40)\n            break\n          }\n\n          if and(_index, shl(1, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 1)))\n            mstore(0x20, Z_1)\n            _current := keccak256(0, 0x40)\n            i := 1\n            break\n          }\n\n          if and(_index, shl(2, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 2)))\n            mstore(0x20, Z_2)\n            _current := keccak256(0, 0x40)\n            i := 2\n            break\n          }\n\n          if and(_index, shl(3, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 3)))\n            mstore(0x20, Z_3)\n            _current := keccak256(0, 0x40)\n            i := 3\n            break\n          }\n\n          if and(_index, shl(4, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 4)))\n            mstore(0x20, Z_4)\n            _current := keccak256(0, 0x40)\n            i := 4\n            break\n          }\n\n          if and(_index, shl(5, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 5)))\n            mstore(0x20, Z_5)\n            _current := keccak256(0, 0x40)\n            i := 5\n            break\n          }\n\n          if and(_index, shl(6, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 6)))\n            mstore(0x20, Z_6)\n            _current := keccak256(0, 0x40)\n            i := 6\n            break\n          }\n\n          if and(_index, shl(7, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 7)))\n            mstore(0x20, Z_7)\n            _current := keccak256(0, 0x40)\n            i := 7\n            break\n          }\n\n          if and(_index, shl(8, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 8)))\n            mstore(0x20, Z_8)\n            _current := keccak256(0, 0x40)\n            i := 8\n            break\n          }\n\n          if and(_index, shl(9, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 9)))\n            mstore(0x20, Z_9)\n            _current := keccak256(0, 0x40)\n            i := 9\n            break\n          }\n\n          if and(_index, shl(10, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 10)))\n            mstore(0x20, Z_10)\n            _current := keccak256(0, 0x40)\n            i := 10\n            break\n          }\n\n          if and(_index, shl(11, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 11)))\n            mstore(0x20, Z_11)\n            _current := keccak256(0, 0x40)\n            i := 11\n            break\n          }\n\n          if and(_index, shl(12, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 12)))\n            mstore(0x20, Z_12)\n            _current := keccak256(0, 0x40)\n            i := 12\n            break\n          }\n\n          if and(_index, shl(13, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 13)))\n            mstore(0x20, Z_13)\n            _current := keccak256(0, 0x40)\n            i := 13\n            break\n          }\n\n          if and(_index, shl(14, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 14)))\n            mstore(0x20, Z_14)\n            _current := keccak256(0, 0x40)\n            i := 14\n            break\n          }\n\n          if and(_index, shl(15, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 15)))\n            mstore(0x20, Z_15)\n            _current := keccak256(0, 0x40)\n            i := 15\n            break\n          }\n\n          if and(_index, shl(16, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 16)))\n            mstore(0x20, Z_16)\n            _current := keccak256(0, 0x40)\n            i := 16\n            break\n          }\n\n          if and(_index, shl(17, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 17)))\n            mstore(0x20, Z_17)\n            _current := keccak256(0, 0x40)\n            i := 17\n            break\n          }\n\n          if and(_index, shl(18, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 18)))\n            mstore(0x20, Z_18)\n            _current := keccak256(0, 0x40)\n            i := 18\n            break\n          }\n\n          if and(_index, shl(19, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 19)))\n            mstore(0x20, Z_19)\n            _current := keccak256(0, 0x40)\n            i := 19\n            break\n          }\n\n          if and(_index, shl(20, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 20)))\n            mstore(0x20, Z_20)\n            _current := keccak256(0, 0x40)\n            i := 20\n            break\n          }\n\n          if and(_index, shl(21, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 21)))\n            mstore(0x20, Z_21)\n            _current := keccak256(0, 0x40)\n            i := 21\n            break\n          }\n\n          if and(_index, shl(22, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 22)))\n            mstore(0x20, Z_22)\n            _current := keccak256(0, 0x40)\n            i := 22\n            break\n          }\n\n          if and(_index, shl(23, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 23)))\n            mstore(0x20, Z_23)\n            _current := keccak256(0, 0x40)\n            i := 23\n            break\n          }\n\n          if and(_index, shl(24, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 24)))\n            mstore(0x20, Z_24)\n            _current := keccak256(0, 0x40)\n            i := 24\n            break\n          }\n\n          if and(_index, shl(25, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 25)))\n            mstore(0x20, Z_25)\n            _current := keccak256(0, 0x40)\n            i := 25\n            break\n          }\n\n          if and(_index, shl(26, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 26)))\n            mstore(0x20, Z_26)\n            _current := keccak256(0, 0x40)\n            i := 26\n            break\n          }\n\n          if and(_index, shl(27, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 27)))\n            mstore(0x20, Z_27)\n            _current := keccak256(0, 0x40)\n            i := 27\n            break\n          }\n\n          if and(_index, shl(28, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 28)))\n            mstore(0x20, Z_28)\n            _current := keccak256(0, 0x40)\n            i := 28\n            break\n          }\n\n          if and(_index, shl(29, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 29)))\n            mstore(0x20, Z_29)\n            _current := keccak256(0, 0x40)\n            i := 29\n            break\n          }\n\n          if and(_index, shl(30, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 30)))\n            mstore(0x20, Z_30)\n            _current := keccak256(0, 0x40)\n            i := 30\n            break\n          }\n\n          if and(_index, shl(31, 1)) {\n            mstore(0, sload(add(TREE_SLOT, 31)))\n            mstore(0x20, Z_31)\n            _current := keccak256(0, 0x40)\n            i := 31\n            break\n          }\n\n          _current := Z_32\n          i := 32\n          break\n        }\n\n        if gt(i, 30) {\n          break\n        }\n\n        {\n          if lt(i, 1) {\n            switch and(_index, shl(1, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_1)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 1)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 2) {\n            switch and(_index, shl(2, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_2)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 2)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 3) {\n            switch and(_index, shl(3, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_3)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 3)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 4) {\n            switch and(_index, shl(4, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_4)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 4)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 5) {\n            switch and(_index, shl(5, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_5)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 5)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 6) {\n            switch and(_index, shl(6, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_6)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 6)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 7) {\n            switch and(_index, shl(7, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_7)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 7)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 8) {\n            switch and(_index, shl(8, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_8)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 8)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 9) {\n            switch and(_index, shl(9, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_9)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 9)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 10) {\n            switch and(_index, shl(10, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_10)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 10)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 11) {\n            switch and(_index, shl(11, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_11)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 11)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 12) {\n            switch and(_index, shl(12, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_12)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 12)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 13) {\n            switch and(_index, shl(13, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_13)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 13)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 14) {\n            switch and(_index, shl(14, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_14)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 14)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 15) {\n            switch and(_index, shl(15, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_15)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 15)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 16) {\n            switch and(_index, shl(16, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_16)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 16)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 17) {\n            switch and(_index, shl(17, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_17)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 17)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 18) {\n            switch and(_index, shl(18, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_18)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 18)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 19) {\n            switch and(_index, shl(19, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_19)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 19)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 20) {\n            switch and(_index, shl(20, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_20)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 20)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 21) {\n            switch and(_index, shl(21, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_21)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 21)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 22) {\n            switch and(_index, shl(22, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_22)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 22)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 23) {\n            switch and(_index, shl(23, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_23)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 23)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 24) {\n            switch and(_index, shl(24, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_24)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 24)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 25) {\n            switch and(_index, shl(25, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_25)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 25)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 26) {\n            switch and(_index, shl(26, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_26)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 26)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 27) {\n            switch and(_index, shl(27, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_27)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 27)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 28) {\n            switch and(_index, shl(28, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_28)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 28)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 29) {\n            switch and(_index, shl(29, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_29)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 29)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 30) {\n            switch and(_index, shl(30, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_30)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 30)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n\n          if lt(i, 31) {\n            switch and(_index, shl(31, 1))\n            case 0 {\n              mstore(0, _current)\n              mstore(0x20, Z_31)\n            }\n            default {\n              mstore(0, sload(add(TREE_SLOT, 31)))\n              mstore(0x20, _current)\n            }\n\n            _current := keccak256(0, 0x40)\n          }\n        }\n\n        break\n      }\n    }\n  }\n\n  /**\n   * @notice Calculates and returns the merkle root for the given leaf `_item`,\n   * a merkle branch, and the index of `_item` in the tree.\n   * @param _item Merkle leaf\n   * @param _branch Merkle proof\n   * @param _index Index of `_item` in tree\n   * @return _current Calculated merkle root\n   **/\n  function branchRoot(\n    bytes32 _item,\n    bytes32[TREE_DEPTH] memory _branch,\n    uint256 _index\n  ) internal pure returns (bytes32 _current) {\n    assembly {\n      _current := _item\n      let BRANCH_DATA_OFFSET := _branch\n      let f\n\n      f := shl(5, and(_index, 1))\n      mstore(f, _current)\n      mstore(sub(0x20, f), mload(BRANCH_DATA_OFFSET))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(1, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 1))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(2, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 2))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(3, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 3))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(4, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 4))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(5, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 5))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(6, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 6))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(7, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 7))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(8, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 8))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(9, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 9))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(10, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 10))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(11, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 11))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(12, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 12))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(13, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 13))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(14, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 14))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(15, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 15))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(16, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 16))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(17, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 17))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(18, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 18))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(19, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 19))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(20, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 20))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(21, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 21))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(22, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 22))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(23, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 23))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(24, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 24))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(25, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 25))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(26, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 26))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(27, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 27))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(28, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 28))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(29, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 29))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(30, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 30))))\n      _current := keccak256(0, 0x40)\n\n      f := shl(5, iszero(and(_index, shl(31, 1))))\n      mstore(sub(0x20, f), _current)\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 31))))\n      _current := keccak256(0, 0x40)\n    }\n  }\n}\n"
    },
    "contracts/shared/ProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport {IProposedOwnable} from \"./interfaces/IProposedOwnable.sol\";\n\n/**\n * @title ProposedOwnable\n * @notice Contract module which provides a basic access control mechanism,\n * where there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed via a two step process:\n * 1. Call `proposeOwner`\n * 2. Wait out the delay period\n * 3. Call `acceptOwner`\n *\n * @dev This module is used through inheritance. It will make available the\n * modifier `onlyOwner`, which can be applied to your functions to restrict\n * their use to the owner.\n *\n * @dev The majority of this code was taken from the openzeppelin Ownable\n * contract\n *\n */\nabstract contract ProposedOwnable is IProposedOwnable {\n  // ========== Custom Errors ===========\n\n  error ProposedOwnable__onlyOwner_notOwner();\n  error ProposedOwnable__onlyProposed_notProposedOwner();\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\n  error ProposedOwnable__renounceOwnership_noProposal();\n  error ProposedOwnable__renounceOwnership_invalidProposal();\n\n  // ============ Properties ============\n\n  address private _owner;\n\n  address private _proposed;\n  uint256 private _proposedOwnershipTimestamp;\n\n  uint256 private constant _delay = 7 days;\n\n  // ======== Getters =========\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposed() public view virtual returns (address) {\n    return _proposed;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposedTimestamp() public view virtual returns (uint256) {\n    return _proposedOwnershipTimestamp;\n  }\n\n  /**\n   * @notice Returns the delay period before a new owner can be accepted.\n   */\n  function delay() public view virtual returns (uint256) {\n    return _delay;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the proposed owner.\n   */\n  modifier onlyProposed() {\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if the ownership delay has not elapsed\n   */\n  modifier ownershipDelayElapsed() {\n    // Ensure delay has elapsed\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n    _;\n  }\n\n  /**\n   * @notice Indicates if the ownership has been renounced() by\n   * checking if current owner is address(0)\n   */\n  function renounced() public view returns (bool) {\n    return _owner == address(0);\n  }\n\n  // ======== External =========\n\n  /**\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\n   * newly proposed owner as step 1 in a 2-step process\n   */\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\n    // Contract as source of truth\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\n\n    // Sanity check: reasonable proposal\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\n\n    _setProposed(newlyProposed);\n  }\n\n  /**\n   * @notice Renounces ownership of the contract after a delay\n   */\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\n    // Ensure there has been a proposal cycle started\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\n\n    // Require proposed is set to 0\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(address(0));\n  }\n\n  /**\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\n    // is 0-d out and this check is implicitly enforced by modifier\n\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\n    // the only time this would happen is if the _proposed was never\n    // set (will fail from modifier) or if the owner == _proposed (checked\n    // above)\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(_proposed);\n  }\n\n  // ======== Internal =========\n\n  function _setOwner(address newOwner) internal {\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n    delete _proposedOwnershipTimestamp;\n    delete _proposed;\n  }\n\n  function _setProposed(address newlyProposed) private {\n    _proposedOwnershipTimestamp = block.timestamp;\n    _proposed = newlyProposed;\n    emit OwnershipProposed(newlyProposed);\n  }\n}\n"
    },
    "contracts/shared/ProposedOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {ProposedOwnable} from \"./ProposedOwnable.sol\";\n\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\n  /**\n   * @dev Initializes the contract setting the deployer as the initial\n   */\n  function __ProposedOwnable_init() internal onlyInitializing {\n    __ProposedOwnable_init_unchained();\n  }\n\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\n    _setOwner(msg.sender);\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[47] private __GAP;\n}\n"
    },
    "contracts/shared/interfaces/IProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @title IProposedOwnable\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\n * process\n */\ninterface IProposedOwnable {\n  /**\n   * @dev This emits when change in ownership of a contract is proposed.\n   */\n  event OwnershipProposed(address indexed proposedOwner);\n\n  /**\n   * @dev This emits when ownership of a contract changes.\n   */\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @notice Get the address of the owner\n   * @return owner_ The address of the owner.\n   */\n  function owner() external view returns (address owner_);\n\n  /**\n   * @notice Get the address of the proposed owner\n   * @return proposed_ The address of the proposed.\n   */\n  function proposed() external view returns (address proposed_);\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   * @param newlyProposed The proposed new owner of the contract\n   */\n  function proposeNewOwner(address newlyProposed) external;\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   */\n  function acceptProposedOwner() external;\n}\n"
    }
  }
}}