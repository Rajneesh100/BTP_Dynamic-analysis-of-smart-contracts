{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@solvprotocol/contracts-v3-address-resolver/contracts/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAddressResolver {\n\tfunction getAddress(bytes32 name) external view returns (address);\n\tfunction getRequiredAddress(bytes32 name, string calldata reason) external view returns (address);\n}"
    },
    "@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./IAddressResolver.sol\";\n\nabstract contract ResolverCache is Initializable {\n\tIAddressResolver public resolver;\n\tmapping(bytes32 => address) private _addressCache;\n\n\tfunction __ResolverCache_init(address resolver_) internal onlyInitializing {\n\t\tresolver = IAddressResolver(resolver_);\n\t}\n\n\tfunction getAddress(bytes32 name_) public view returns (address) {\n\t\treturn _addressCache[name_];\n\t}\n\n\tfunction getRequiredAddress(bytes32 name_, string memory reason_) public view returns (address) {\n\t\taddress addr = getAddress(name_);\n\t\trequire(addr != address(0), reason_);\n\t\treturn addr;\n\t}\n\n\tfunction rebuildCache() public virtual {\n\t\tbytes32[] memory requiredAddresses = _resolverAddressesRequired();\n\t\tfor (uint256 i = 0; i < requiredAddresses.length; i++) {\n\t\t\tbytes32 name = requiredAddresses[i];\n\t\t\taddress addr = resolver.getRequiredAddress(name, \"AddressCache: address not found\");\n\t\t\t_addressCache[name] = addr;\n\t\t}\n\t}\n\n\tfunction isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = _resolverAddressesRequired();\n        for (uint256 i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != _addressCache[name] || _addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function _combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    function _resolverAddressesRequired() internal view virtual returns (bytes32[] memory addresses) {}\n\n    uint256[48] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-open-fund-market/contracts/IOpenFundMarketStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IOpenFundMarketStorage {\n    struct SFTInfo {\n        address manager;\n        bool isValid;\n    }\n    struct SubscribeLimitInfo {\n        uint256 hardCap;\n        uint256 subscribeMin;\n        uint256 subscribeMax;\n        uint64 fundraisingStartTime;\n        uint64 fundraisingEndTime;\n    }\n    struct PoolSFTInfo {\n        address openFundShare;\n        address openFundRedemption;\n        uint256 openFundShareSlot;\n        uint256 latestRedeemSlot;\n    }\n    struct PoolFeeInfo {\n        uint16 carryRate;\n        address carryCollector;\n        uint64 latestProtocolFeeSettleTime;\n    }\n    struct ManagerInfo {\n        address poolManager;\n        address subscribeNavManager;\n        address redeemNavManager;\n    }\n    struct PoolInfo {\n        PoolSFTInfo poolSFTInfo;\n        PoolFeeInfo poolFeeInfo;\n        ManagerInfo managerInfo;\n        SubscribeLimitInfo subscribeLimitInfo;\n        address vault;\n        address currency;\n        address navOracle;\n        uint64 valueDate;\n        bool permissionless;\n        uint256 fundraisingAmount;\n    }\n}\t"
    },
    "@solvprotocol/contracts-v3-open-fund-market/contracts/OpenFundMarketStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/GovernorControl.sol\";\nimport \"./IOpenFundMarketStorage.sol\";\n\ncontract OpenFundMarketStorage is IOpenFundMarketStorage, GovernorControl {\n\t// keccak256(openFundSFT, openFundSlot)\n\tmapping(bytes32 => PoolInfo) public poolInfos;\n\n\t// keccak256(openFundSFT, openFundSlot) => buyer => purchased amount\n\tmapping(bytes32 => mapping(address => uint256)) public purchasedRecords;\n\n\t// redeemSlot => close time\n\tmapping(uint256 => uint256) public poolRedeemSlotCloseTime;\n\n\t// redeemSlot => openFundTokenId\n\tmapping(uint256 => uint256) internal _poolRedeemTokenId;\n\n\tmapping(address => bool) public currencies;\n\n\tmapping(address => SFTInfo) public sftInfos;\n\n\tuint256 public protocolFeeRate;\n\taddress public protocolFeeCollector;\n\n\tmapping(bytes32 => uint256) public previousRedeemSlot;\n\n\tuint256[42] private __gap;\n}\t"
    },
    "@solvprotocol/contracts-v3-open-fund-market/contracts/oracle/INavOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INavOracle {\n\tevent SetSubscribeNav(bytes32 indexed poolId, uint256 indexed time, uint256 nav);\n\tevent UpdateAllTimeHighRedeemNav(bytes32 indexed poolId, uint256 oldNav, uint256 newNav);\n\n\tfunction setSubscribeNavOnlyMarket(bytes32 poolId_, uint256 time_, uint256 nav_) external;\n\tfunction updateAllTimeHighRedeemNavOnlyMarket(bytes32 poolId_, uint256 nav_)  external;\n\tfunction getSubscribeNav(bytes32 poolId_, uint256 time_) external view returns (uint256 nav_, uint256 navTime_);\n\tfunction getAllTimeHighRedeemNav(bytes32 poolId_) external view returns (uint256);\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/FCFSMultiRepayableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"@solvprotocol/erc-3525/ERC3525Upgradeable.sol\";\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTConcreteUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IFCFSMultiRepayableConcrete.sol\";\n\nabstract contract FCFSMultiRepayableConcrete is IFCFSMultiRepayableConcrete, BaseSFTConcreteUpgradeable {\n\n    mapping(uint256 => SlotRepayInfo) internal _slotRepayInfo;\n\n    mapping(address => uint256) public allocatedCurrencyBalance;\n\n    uint32 internal constant REPAY_RATE_SCALAR = 1e8;\n\n    mapping(uint256 => SlotValueInfo) internal _slotValueInfo;\n\n    function repayOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override onlyDelegate {\n        _beforeRepay(txSender_, slot_, currency_, repayCurrencyAmount_);\n        _slotRepayInfo[slot_].repaidCurrencyAmount += repayCurrencyAmount_;\n        _slotRepayInfo[slot_].currencyBalance += repayCurrencyAmount_;\n        allocatedCurrencyBalance[currency_] += repayCurrencyAmount_;\n    }\n\n    function repayWithBalanceOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override onlyDelegate {\n        _beforeRepayWithBalance(txSender_, slot_, currency_, repayCurrencyAmount_);\n        uint256 balance = ERC20(currency_).balanceOf(delegate());\n        require(repayCurrencyAmount_ <= balance - allocatedCurrencyBalance[currency_], \"MultiRepayableConcrete: insufficient unallocated balance\");\n        _slotRepayInfo[slot_].repaidCurrencyAmount += repayCurrencyAmount_;\n        _slotRepayInfo[slot_].currencyBalance += repayCurrencyAmount_;\n        allocatedCurrencyBalance[currency_] += repayCurrencyAmount_;\n    }\n\n    function mintOnlyDelegate(uint256 /** tokenId_ */, uint256 slot_, uint256 mintValue_) external virtual override onlyDelegate {\n        _slotValueInfo[slot_].slotInitialValue += mintValue_;\n        _slotValueInfo[slot_].slotTotalValue += mintValue_;\n    }\n\n    function claimOnlyDelegate(uint256 tokenId_, uint256 slot_, address currency_, uint256 claimValue_) external virtual override onlyDelegate returns (uint256 claimCurrencyAmount_) {\n        _beforeClaim(tokenId_, slot_, currency_, claimValue_);\n        require(claimValue_ <= claimableValue(tokenId_), \"MR: insufficient claimable value\");\n        _slotValueInfo[slot_].slotTotalValue -= claimValue_;\n\n        uint8 valueDecimals = ERC3525Upgradeable(delegate()).valueDecimals();\n        claimCurrencyAmount_ = claimValue_ * _repayRate(slot_) / (10 ** valueDecimals);\n        require(claimCurrencyAmount_ <= _slotRepayInfo[slot_].currencyBalance, \"MR: insufficient repaid currency amount\");\n        allocatedCurrencyBalance[currency_] -= claimCurrencyAmount_;\n        _slotRepayInfo[slot_].currencyBalance -= claimCurrencyAmount_;\n    }\n\n    function transferOnlyDelegate(uint256 fromTokenId_, uint256 toTokenId_, uint256 fromTokenBalance_, uint256 transferValue_) external virtual override onlyDelegate {\n        _beforeTransfer(fromTokenId_, toTokenId_, fromTokenBalance_, transferValue_);\n    }\n\n    function claimableValue(uint256 tokenId_) public view virtual override returns (uint256) {\n        uint256 slot = ERC3525Upgradeable(delegate()).slotOf(tokenId_);\n        uint256 balance = ERC3525Upgradeable(delegate()).balanceOf(tokenId_);\n        uint8 valueDecimals = ERC3525Upgradeable(delegate()).valueDecimals();\n        uint256 dueAmount = balance *  _repayRate(slot) / (10 ** valueDecimals);\n        return dueAmount < _slotRepayInfo[slot].currencyBalance ? balance : \n                _slotRepayInfo[slot].currencyBalance * (10 ** valueDecimals) / _repayRate(slot);\n    }\n\n    function slotRepaidCurrencyAmount(uint256 slot_) public view virtual override returns (uint256) {\n        return _slotRepayInfo[slot_].repaidCurrencyAmount;\n    }\n\n    function slotCurrencyBalance(uint256 slot_) public view virtual override returns (uint256) {\n        return _slotRepayInfo[slot_].currencyBalance;\n    }\n\n    function slotInitialValue(uint256 slot_) public view virtual override returns (uint256) {\n        return _slotValueInfo[slot_].slotInitialValue;\n    }\n\n    function slotTotalValue(uint256 slot_) public view virtual override returns (uint256) {\n        return _slotValueInfo[slot_].slotTotalValue;\n    }\n\n    function _currency(uint256 slot_) internal view virtual returns (address);\n    function _repayRate(uint256 slot_) internal view virtual returns (uint256);\n\n    function _beforeRepay(address /** txSender_ */, uint256 slot_, address currency_, uint256 /** repayCurrencyAmount_ */) internal virtual {\n        require(currency_ == _currency(slot_), \"FMR: invalid currency\");\n    }\n\n    function _beforeRepayWithBalance(address /** txSender_ */, uint256 slot_, address currency_, uint256 /** repayCurrencyAmount_ */) internal virtual {\n        require(currency_ == _currency(slot_), \"FMR: invalid currency\");\n    }\n\n    function _beforeClaim(uint256 /** tokenId_ */, uint256 slot_, address currency_, uint256 /** claimValue_ */) internal virtual {\n        require(currency_ == _currency(slot_), \"FMR: invalid currency\");\n    }\n\n    function _beforeTransfer(uint256 fromTokenId_, uint256 toTokenId_, uint256 fromTokenBalance_, uint256 transferValue_) internal virtual {}\n\n    uint256[46] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/FCFSMultiRepayableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/helpers/ERC20TransferHelper.sol\";\nimport \"./IFCFSMultiRepayableDelegate.sol\";\nimport \"./IFCFSMultiRepayableConcrete.sol\";\n\nabstract contract FCFSMultiRepayableDelegate is IFCFSMultiRepayableDelegate, BaseSFTDelegateUpgradeable {\n\n    function repay(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override nonReentrant {\n        IFCFSMultiRepayableConcrete(concrete()).repayOnlyDelegate(_msgSender(), slot_, currency_, repayCurrencyAmount_);\n        ERC20TransferHelper.doTransferIn(currency_, _msgSender(), repayCurrencyAmount_);\n        emit Repay(slot_, _msgSender(), currency_, repayCurrencyAmount_);\n    }\n\n    function repayWithBalance(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override nonReentrant {\n        require(allowRepayWithBalance(), \"MultiRepayableDelegate: cannot repay with balance\");\n        IFCFSMultiRepayableConcrete(concrete()).repayWithBalanceOnlyDelegate(_msgSender(), slot_, currency_, repayCurrencyAmount_);\n        emit Repay(slot_, _msgSender(), currency_, repayCurrencyAmount_);\n    }\n\n    function claimTo(address to_, uint256 tokenId_, address currency_, uint256 claimValue_) external virtual override nonReentrant {\n        require(claimValue_ > 0, \"MultiRepayableDelegate: claim value is zero\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"MultiRepayableDelegate: caller is not owner nor approved\");\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        uint256 claimableValue = IFCFSMultiRepayableConcrete(concrete()).claimableValue(tokenId_);\n        require(claimValue_ <= claimableValue, \"MultiRepayableDelegate: over claim\");\n        \n        uint256 claimCurrencyAmount = IFCFSMultiRepayableConcrete(concrete()).claimOnlyDelegate(tokenId_, slot, currency_, claimValue_);\n        \n        if (claimValue_ == ERC3525Upgradeable.balanceOf(tokenId_)) {\n            ERC3525Upgradeable._burn(tokenId_);\n        } else {\n            ERC3525Upgradeable._burnValue(tokenId_, claimValue_);\n        }\n        \n        ERC20TransferHelper.doTransferOut(currency_, payable(to_), claimCurrencyAmount);\n        emit Claim(to_, tokenId_, claimValue_, currency_, claimCurrencyAmount);\n    }\n\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override(ERC3525SlotEnumerableUpgradeable) {\n        super._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n\n        if (from_ == address(0) && fromTokenId_ == 0) {\n            IFCFSMultiRepayableConcrete(concrete()).mintOnlyDelegate(toTokenId_, slot_, value_);\n        } \n        \n\t\tif (from_ != address(0) && fromTokenId_ != 0 && to_ != address(0) && toTokenId_ != 0) { \n            IFCFSMultiRepayableConcrete(concrete()).transferOnlyDelegate(fromTokenId_, toTokenId_, \n                ERC3525Upgradeable.balanceOf(fromTokenId_), value_);\n\t\t}\n    }\n\n    function allowRepayWithBalance() public view virtual returns (bool) {\n        return true;\n    }\n\n    uint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/IFCFSMultiRepayableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFCFSMultiRepayableConcrete {\n\n    struct SlotRepayInfo {\n        uint256 repaidCurrencyAmount;\n        uint256 currencyBalance;\n    }\n\n\tstruct SlotValueInfo {\n\t\tuint256 slotInitialValue;\n\t\tuint256 slotTotalValue;\n\t}\n\n    function repayOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function repayWithBalanceOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function mintOnlyDelegate(uint256 tokenId_, uint256 slot_, uint256 mintValue_) external;\n    function claimOnlyDelegate(uint256 tokenId_, uint256 slot_, address currency_, uint256 claimValue_) external returns (uint256);\n\n    function transferOnlyDelegate(uint256 fromTokenId_, uint256 toTokenId_, uint256 fromTokenBalance_, uint256 transferValue_) external;\n    \n    function slotRepaidCurrencyAmount(uint256 slot_) external view returns (uint256);\n    function slotCurrencyBalance(uint256 slot_) external view returns (uint256);\n    function slotInitialValue(uint256 slot_) external view returns (uint256);\n    function slotTotalValue(uint256 slot_) external view returns (uint256);\n\n    function claimableValue(uint256 tokenId_) external view returns (uint256);\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/IFCFSMultiRepayableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFCFSMultiRepayableDelegate {\n    event Repay(uint256 indexed slot, address indexed payer, address currency, uint256 repayCurrencyAmount);\n    event Claim(address indexed to, uint256 indexed tokenId, uint256 claimValue, address currency, uint256 claimCurrencyAmount);\n\n    function repay(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function repayWithBalance(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function claimTo(address to_, uint256 tokenId_, address currency_, uint256 claimValue_) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/ISFTIssuableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISFTIssuableConcrete {\n    function createSlotOnlyDelegate(address txSender_, bytes calldata inputSlotInfo_) external returns (uint256 slot_);\n    function mintOnlyDelegate(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 tokenId_, uint256 amount_) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/ISFTIssuableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISFTIssuableDelegate {\n    function createSlotOnlyIssueMarket(address txSender, bytes calldata inputSlotInfo) external returns(uint256 slot);\n\tfunction mintOnlyIssueMarket(address txSender, address currency, address mintTo, uint256 slot, uint256 value) external payable returns(uint256 tokenId);\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/SFTIssuableConcrete.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTConcreteUpgradeable.sol\";\nimport \"./ISFTIssuableDelegate.sol\";\nimport \"./ISFTIssuableConcrete.sol\";\n\nabstract contract SFTIssuableConcrete is ISFTIssuableConcrete, BaseSFTConcreteUpgradeable {\n\n\tfunction __SFTIssuableConcrete_init() internal onlyInitializing {\n\t\t__BaseSFTConcrete_init();\n\t}\n\n\tfunction __SFTIssuableConcrete_init_unchained() internal onlyInitializing {\n\t}\n\n    function createSlotOnlyDelegate(address txSender_, bytes calldata inputSlotInfo_) external virtual override onlyDelegate returns (uint256 slot_)  {\n\t\tslot_  = _createSlot(txSender_, inputSlotInfo_);\n\t\trequire(slot_ != 0, \"SFTIssuableConcrete: invalid slot\");\n\t}\n\n    function mintOnlyDelegate(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 tokenId_, uint256 amount_) \n\t\texternal virtual override onlyDelegate {\n\t\t_mint(txSender_, currency_, mintTo_, slot_, tokenId_, amount_);\n\t}\n\n\tfunction _createSlot(address txSender_, bytes memory inputSlotInfo_) internal virtual returns (uint256 slot_);\n\tfunction _mint(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 tokenId_, uint256 amount_) internal virtual;\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/SFTIssuableDelegate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"./ISFTIssuableDelegate.sol\";\nimport \"./ISFTIssuableConcrete.sol\";\n\nabstract contract SFTIssuableDelegate is ISFTIssuableDelegate, BaseSFTDelegateUpgradeable, ResolverCache {\n\tfunction __SFTIssuableDelegate_init(address resolver_, string memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_) internal onlyInitializing {\n\t\t\t__BaseSFTDelegate_init(name_, symbol_, decimals_, concrete_, metadata_, owner_);\n\t\t\t__ResolverCache_init(resolver_);\n\t}\n\n\tfunction __SFTIssuableDelegate_init_unchained() internal onlyInitializing {\n\t}\n\n\tfunction createSlotOnlyIssueMarket(address txSender_, bytes calldata inputSlotInfo_) external virtual override nonReentrant returns(uint256 slot_) {\n\t\trequire(_msgSender() == _issueMarket(), \"SFTIssuableDelegate: only issue market\");\n\t\tslot_ = ISFTIssuableConcrete(concrete()).createSlotOnlyDelegate(txSender_, inputSlotInfo_);\n\t\trequire(!_slotExists(slot_), \"SFTIssuableDelegate: slot already exists\");\n\t\tERC3525SlotEnumerableUpgradeable._createSlot(slot_);\n\t\temit CreateSlot(slot_, txSender_, inputSlotInfo_);\n\t}\n\n\tfunction mintOnlyIssueMarket(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 value_) external payable virtual override nonReentrant returns(uint256 tokenId_) {\n\t\trequire(_msgSender() == _issueMarket(), \"SFTIssuableDelegate: only issue market\");\n\t\ttokenId_ = ERC3525Upgradeable._mint(mintTo_, slot_, value_);\n\t\tISFTIssuableConcrete(concrete()).mintOnlyDelegate(txSender_, currency_, mintTo_, slot_, tokenId_, value_);\n\t\temit MintValue(tokenId_, slot_, value_);\n\t}\t\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory) {\n\t\tbytes32[] memory existAddresses = super._resolverAddressesRequired();\n\t\tbytes32[] memory newAddresses = new bytes32[](1);\n\t\tnewAddresses[0] = Constants.CONTRACT_ISSUE_MARKET;\n\t\treturn _combineArrays(existAddresses, newAddresses);\n\t}\n\n\tfunction _issueMarket() internal view virtual returns (address) {\n\t\treturn getRequiredAddress(Constants.CONTRACT_ISSUE_MARKET, \"SFTIssuableDelegate: issueMarket not set\");\n\t}\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/ISFTValueIssuableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../issuable/ISFTIssuableConcrete.sol\";\n\ninterface ISFTValueIssuableConcrete is ISFTIssuableConcrete {\n    function burnOnlyDelegate(uint256 tokenId, uint256 burnValue) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/ISFTValueIssuableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../issuable/ISFTIssuableDelegate.sol\";\n\ninterface ISFTValueIssuableDelegate is ISFTIssuableDelegate {\n    function mintValueOnlyIssueMarket(address txSender, address currency, uint256 tokenId, uint256 mintValue) external payable;\n    function burnOnlyIssueMarket(uint256 tokenId, uint256 burnValue) external;\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableConcrete.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTConcreteUpgradeable.sol\";\nimport \"./ISFTValueIssuableDelegate.sol\";\nimport \"./ISFTValueIssuableConcrete.sol\";\nimport \"../issuable/SFTIssuableConcrete.sol\";\n\nabstract contract SFTValueIssuableConcrete is ISFTValueIssuableConcrete, SFTIssuableConcrete {\n\n\tfunction __SFTValueIssuableConcrete_init() internal onlyInitializing {\n\t\t__SFTIssuableConcrete_init();\n\t}\n\n\tfunction __SFTValueIssuableConcrete_init_unchained() internal onlyInitializing {\n\t}\n\n\tfunction burnOnlyDelegate(uint256 tokenId_, uint256 burnValue_) external virtual override onlyDelegate {\n\t\t_burn(tokenId_, burnValue_);\n\t}\n\n\tfunction _burn(uint256 tokenId_, uint256 burnValue_) internal virtual;\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableDelegate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"./ISFTValueIssuableDelegate.sol\";\nimport \"./ISFTValueIssuableConcrete.sol\";\nimport \"../issuable/SFTIssuableDelegate.sol\";\n\nerror OnlyMarket();\n\nabstract contract SFTValueIssuableDelegate is ISFTValueIssuableDelegate, SFTIssuableDelegate {\n\n\tevent BurnValue(uint256 indexed tokenId, uint256 burnValue);\n\n\tfunction __SFTValueIssuableDelegate_init(\n\t\taddress resolver_, string memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_\n\t) internal onlyInitializing {\n\t\t__SFTIssuableDelegate_init(resolver_, name_, symbol_, decimals_, concrete_, metadata_, owner_);\n\t}\n\n\tfunction __SFTValueIssuableDelegate_init_unchained() internal onlyInitializing {\n\t}\n\n\tfunction mintValueOnlyIssueMarket(\n\t\taddress txSender_, address currency_, uint256 tokenId_, uint256 mintValue_\n\t) external payable virtual override nonReentrant {\n\t\tif (_msgSender() != _issueMarket()) {\n\t\t\trevert OnlyMarket();\n\t\t}\n\n\t\taddress owner = ERC3525Upgradeable.ownerOf(tokenId_);\n\t\tuint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n\n\t\tERC3525Upgradeable._mintValue(tokenId_, mintValue_);\n\t\tISFTIssuableConcrete(concrete()).mintOnlyDelegate(txSender_, currency_, owner, slot, tokenId_, mintValue_);\n\t\temit MintValue(tokenId_, slot, mintValue_);\n\t}\n\n\tfunction burnOnlyIssueMarket(uint256 tokenId_, uint256 burnValue_) external virtual override nonReentrant {\n\t\tif (_msgSender() != _issueMarket()) {\n\t\t\trevert OnlyMarket();\n\t\t}\n\n\t\tuint256 actualBurnValue = burnValue_ == 0 ? ERC3525Upgradeable.balanceOf(tokenId_) : burnValue_;\n\t\tISFTValueIssuableConcrete(concrete()).burnOnlyDelegate(tokenId_, actualBurnValue);\n\n\t\tif (burnValue_ == 0) {\n\t\t\tERC3525Upgradeable._burn(tokenId_);\n\t\t} else {\n\t\t\tERC3525Upgradeable._burnValue(tokenId_, burnValue_);\n\t\t}\n\t\temit BurnValue(tokenId_, actualBurnValue);\n\t}\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTConcreteUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTConcreteControl.sol\";\nimport \"./interface/IBaseSFTConcrete.sol\";\n\nabstract contract BaseSFTConcreteUpgradeable is IBaseSFTConcrete, SFTConcreteControl {\n\n\tmodifier onlyDelegateOwner {\n\t\trequire(_msgSender() == OwnControl(delegate()).owner(), \"only delegate owner\");\n\t\t_;\n\t}\n\n\tfunction __BaseSFTConcrete_init() internal onlyInitializing {\n\t\t__SFTConcreteControl_init();\n\t}\n\n\tfunction isSlotValid(uint256 slot_) external view virtual override returns (bool) {\n\t\treturn _isSlotValid(slot_);\n\t}\n\n\tfunction _isSlotValid(uint256 slot_) internal view virtual returns (bool);\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@solvprotocol/erc-3525/ERC3525SlotEnumerableUpgradeable.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTConcreteControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTDelegateControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"./interface/IBaseSFTDelegate.sol\";\nimport \"./interface/IBaseSFTConcrete.sol\";\n\nabstract contract BaseSFTDelegateUpgradeable is IBaseSFTDelegate, ERC3525SlotEnumerableUpgradeable, \n\tOwnControl, SFTDelegateControl, ReentrancyGuardUpgradeable {\n\n\tevent CreateSlot(uint256 indexed _slot, address indexed _creator, bytes _slotInfo);\n\tevent MintValue(uint256 indexed _tokenId, uint256 indexed _slot, uint256 _value);\n\n\tfunction __BaseSFTDelegate_init(\n\t\tstring memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_\n\t) internal onlyInitializing {\n\t\tERC3525Upgradeable.__ERC3525_init(name_, symbol_, decimals_);\n\t\tOwnControl.__OwnControl_init(owner_);\n\t\tERC3525Upgradeable._setMetadataDescriptor(metadata_);\n\n\t\tSFTDelegateControl.__SFTDelegateControl_init(concrete_);\n\t\t__ReentrancyGuard_init();\n\n\t\t//address of concrete must be zero when initializing impletion contract avoid failed after upgrade\n\t\tif (concrete_ != Constants.ZERO_ADDRESS) {\n\t\t\tISFTConcreteControl(concrete_).setDelegate(address(this));\n\t\t}\n\t}\n\n\tfunction delegateToConcreteView(bytes calldata data) external view override returns (bytes memory) {\n\t\t(bool success, bytes memory returnData) = concrete().staticcall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize())\n            }\n        }\n        return returnData;\n\t}\n\n\tfunction contractType() external view virtual returns (string memory);\n\n\tuint256[50] private __gap;\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/interface/IBaseSFTConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBaseSFTConcrete {\n    function isSlotValid(uint256 slot_) external view returns (bool);\n} "
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/interface/IBaseSFTDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBaseSFTDelegate  {\n    function delegateToConcreteView(bytes calldata data) external view returns (bytes memory);\n}\n"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/AdminControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nabstract contract AdminControl is Initializable, ContextUpgradeable {\n\n    event NewAdmin(address oldAdmin, address newAdmin);\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    address public admin;\n    address public pendingAdmin;\n\n    modifier onlyAdmin() {\n        require(_msgSender() == admin, \"only admin\");\n        _;\n    }\n\n    function __AdminControl_init(address admin_) internal onlyInitializing {\n        __AdminControl_init_unchained(admin_);\n    }\n\n    function __AdminControl_init_unchained(address admin_) internal onlyInitializing {\n        admin = admin_;\n        emit NewAdmin(address(0), admin_);\n    }\n\n    function setPendingAdmin(address newPendingAdmin_) external virtual onlyAdmin {\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\n        pendingAdmin = newPendingAdmin_;        \n    }\n\n    function acceptAdmin() external virtual {\n        require(_msgSender() == pendingAdmin, \"only pending admin\");\n        emit NewAdmin(admin, pendingAdmin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n\tuint256[48] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/GovernorControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\n\nabstract contract GovernorControl is AdminControl {\n\tevent NewGovernor(address oldGovernor, address newGovernor);\n\n\taddress public governor;\n\n\tmodifier onlyGovernor() {\n\t\trequire(governor == _msgSender(), \"only governor\");\n\t\t_;\n\t}\n\n\tfunction __GovernorControl_init(address governor_) internal onlyInitializing {\n\t\t__GovernorControl_init_unchained(governor_);\n\t\t__AdminControl_init_unchained(_msgSender());\n\t}\n\n\tfunction __GovernorControl_init_unchained(address governor_) internal onlyInitializing {\n\t\t_setGovernor(governor_);\n\t}\n\n\tfunction setGovernorOnlyAdmin(address newGovernor_) public onlyAdmin {\n\t\t_setGovernor(newGovernor_);\n\t}\n\n\tfunction _setGovernor(address newGovernor_) internal {\n\t\trequire(newGovernor_ != address(0), \"Governor address connot be 0\");\n\t\temit NewGovernor(governor, newGovernor_);\n\t\tgovernor = newGovernor_;\n\t}\n\n\tuint256[49] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTConcreteControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface ISFTConcreteControl {\n\tevent NewDelegate(address old_, address new_);\n\n\tfunction setDelegate(address newDelegate_) external;\n\tfunction delegate() external view returns (address);\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTDelegateControl.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISFTDelegateControl {\n\tevent NewConcrete(address old_, address new_);\n\n\tfunction concrete() external view returns (address);\n\tfunction setConcreteOnlyAdmin(address newConcrete_) external;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\n\nabstract contract OwnControl is AdminControl {\n\tevent NewOwner(address oldOwner, address newOwner);\n\n\taddress public owner;\n\n\tmodifier onlyOwner() {\n\t\trequire(owner == _msgSender(), \"only owner\");\n\t\t_;\n\t}\n\n\tfunction __OwnControl_init(address owner_) internal onlyInitializing {\n\t\t__OwnControl_init_unchained(owner_);\n\t\t__AdminControl_init_unchained(_msgSender());\n\t}\n\n\tfunction __OwnControl_init_unchained(address owner_) internal onlyInitializing {\n\t\t_setOwner(owner_);\n\t}\n\n\tfunction setOwnerOnlyAdmin(address newOwner_) public onlyAdmin {\n\t\t_setOwner(newOwner_);\n\t}\n\n\tfunction _setOwner(address newOwner_) internal {\n\t\trequire(newOwner_ != address(0), \"Owner address connot be 0\");\n\t\temit NewOwner(owner, newOwner_);\n\t\towner = newOwner_;\n\t}\n\n\tuint256[49] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTConcreteControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\nimport \"./ISFTConcreteControl.sol\";\n\nabstract contract SFTConcreteControl is ISFTConcreteControl, AdminControl {\n    address private _delegate;\n\n    modifier onlyDelegate() {\n        require(_msgSender() == _delegate, \"only delegate\");\n        _;\n    }\n\n    function __SFTConcreteControl_init() internal onlyInitializing {\n        __AdminControl_init_unchained(_msgSender());\n        __SFTConcreteControl_init_unchained();\n    }\n\n    function __SFTConcreteControl_init_unchained() internal onlyInitializing {}\n\n    function delegate() public view override returns (address) {\n        return _delegate;\n    }\n\n    function setDelegate(address newDelegate_) external override {\n        if (_delegate != address(0)) {\n            require(_msgSender() == admin, \"only admin\");\n        }\n\n        emit NewDelegate(_delegate, newDelegate_);\n        _delegate = newDelegate_;\n    }\n\n\tuint256[49] private __gap;\n}\n"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTDelegateControl.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\nimport \"./ISFTDelegateControl.sol\";\n\nabstract contract SFTDelegateControl is ISFTDelegateControl, AdminControl {\n    address private _concrete;\n\n    function __SFTDelegateControl_init(address concrete_) internal onlyInitializing {\n        __AdminControl_init_unchained(_msgSender());\n        __SFTDelegateControl_init_unchained(concrete_);\n    }\n\n    function __SFTDelegateControl_init_unchained(address concrete_) internal onlyInitializing {\n        _concrete = concrete_;\n    }\n\n    function concrete() public view override returns (address) {\n        return _concrete;\n    }\n\n    function setConcreteOnlyAdmin(address newConcrete_) external override onlyAdmin {\n        emit NewConcrete(_concrete, newConcrete_);\n        _concrete = newConcrete_;\n    }\n\n\tuint256[49] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../misc/Constants.sol\";\n\ninterface ERC20Interface {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary ERC20TransferHelper {\n    function doApprove(address underlying, address spender, uint256 amount) internal {\n        require(underlying.code.length > 0, \"invalid underlying\");\n        (bool success, bytes memory data) = underlying.call(\n            abi.encodeWithSelector(\n                ERC20Interface.approve.selector,\n                spender,\n                amount\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SAF\");\n    }\n\n    function doTransferIn(address underlying, address from, uint256 amount) internal {\n        if (underlying == Constants.ETH_ADDRESS) {\n            // Sanity checks\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\n            require(msg.value >= amount, \"value mismatch\");\n        } else {\n            require(underlying.code.length > 0, \"invalid underlying\");\n            (bool success, bytes memory data) = underlying.call(\n                abi.encodeWithSelector(\n                    ERC20Interface.transferFrom.selector,\n                    from,\n                    address(this),\n                    amount\n                )\n            );\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \"STF\");\n        }\n    }\n\n    function doTransferOut(address underlying, address payable to, uint256 amount) internal {\n        if (underlying == Constants.ETH_ADDRESS) {\n            (bool success, ) = to.call{value: amount}(new bytes(0));\n            require(success, \"STE\");\n        } else {\n            require(underlying.code.length > 0, \"invalid underlying\");\n            (bool success, bytes memory data) = underlying.call(\n                abi.encodeWithSelector(\n                    ERC20Interface.transfer.selector,\n                    to,\n                    amount\n                )\n            );\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\n        }\n    }\n\n    function getCashPrior(address underlying_) internal view returns (uint256) {\n        if (underlying_ == Constants.ETH_ADDRESS) {\n            uint256 startingBalance = address(this).balance - msg.value;\n            return startingBalance;\n        } else {\n            ERC20Interface token = ERC20Interface(underlying_);\n            return token.balanceOf(address(this));\n        }\n    }\n}\n"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/misc/BokkyPooBahsDateTimeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary BokkyPooBahsDateTimeLibrary {\n\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint constant SECONDS_PER_HOUR = 60 * 60;\n    uint constant SECONDS_PER_MINUTE = 60;\n    int constant OFFSET19700101 = 2440588;\n\n    uint constant DOW_MON = 1;\n    uint constant DOW_TUE = 2;\n    uint constant DOW_WED = 3;\n    uint constant DOW_THU = 4;\n    uint constant DOW_FRI = 5;\n    uint constant DOW_SAT = 6;\n    uint constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n        require(year >= 1970);\n        int _year = int(year);\n        int _month = int(month);\n        int _day = int(day);\n\n        int __days = _day\n          - 32075\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n          - OFFSET19700101;\n\n        _days = uint(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n        int __days = int(_days);\n\n        int L = __days + 68569 + OFFSET19700101;\n        int N = 4 * L / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int _year = 4000 * (L + 1) / 1461001;\n        L = L - 1461 * _year / 4 + 31;\n        int _month = 80 * L / 2447;\n        int _day = L - 2447 * _month / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint(_year);\n        month = uint(_month);\n        day = uint(_day);\n    }\n\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\n    }\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n        secs = secs % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n        second = secs % SECONDS_PER_MINUTE;\n    }\n\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\n        if (year >= 1970 && month > 0 && month <= 12) {\n            uint daysInMonth = _getDaysInMonth(year, month);\n            if (day > 0 && day <= daysInMonth) {\n                valid = true;\n            }\n        }\n    }\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\n        if (isValidDate(year, month, day)) {\n            if (hour < 24 && minute < 60 && second < 60) {\n                valid = true;\n            }\n        }\n    }\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n    }\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n    }\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\n        uint _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = (_days + 3) % 7 + 1;\n    }\n\n    function getYear(uint timestamp) internal pure returns (uint year) {\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getMonth(uint timestamp) internal pure returns (uint month) {\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getDay(uint timestamp) internal pure returns (uint day) {\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n    function getHour(uint timestamp) internal pure returns (uint hour) {\n        uint secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\n        uint secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n    function getSecond(uint timestamp) internal pure returns (uint second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year += _years;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        month += _months;\n        year += (month - 1) / 12;\n        month = (month - 1) % 12 + 1;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n        require(newTimestamp >= timestamp);\n    }\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp >= timestamp);\n    }\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp + _seconds;\n        require(newTimestamp >= timestamp);\n    }\n\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year -= _years;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint yearMonth = year * 12 + (month - 1) - _months;\n        year = yearMonth / 12;\n        month = yearMonth % 12 + 1;\n        uint daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n        require(newTimestamp <= timestamp);\n    }\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp <= timestamp);\n    }\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n        newTimestamp = timestamp - _seconds;\n        require(newTimestamp <= timestamp);\n    }\n\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\n        require(fromTimestamp <= toTimestamp);\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _years = toYear - fromYear;\n    }\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\n        require(fromTimestamp <= toTimestamp);\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n    }\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\n        require(fromTimestamp <= toTimestamp);\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n    }\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\n        require(fromTimestamp <= toTimestamp);\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n    }\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\n        require(fromTimestamp <= toTimestamp);\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n    }\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\n        require(fromTimestamp <= toTimestamp);\n        _seconds = toTimestamp - fromTimestamp;\n    }\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Constants {\n    uint32 internal constant FULL_PERCENTAGE = 10000;\n\n    uint32 internal constant SECONDS_PER_YEAR = 360 * 24 * 60 * 60;\n    \n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    bytes32 internal constant CONTRACT_ISSUE_MARKET= \"IssueMarket\";\n    bytes32 internal constant CONTRACT_ISSUE_MARKET_PRICE_STRATEGY_MANAGER = \"IMPriceStrategyManager\";\n    bytes32 internal constant CONTRACT_ISSUE_MARKET_WHITELIST_STRATEGY_MANAGER = \"IMWhitelistStrategyManager\";\n\tbytes32 internal constant CONTRACT_ISSUE_MARKET_UNDERWRITER_PROFIT_TOKEN = \"IMUnderwriterProfitToken\";\n}\n"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Dates.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport './BokkyPooBahsDateTimeLibrary.sol';\n\nlibrary Dates {\n\n    using Strings for uint256;\n\n    function datetimeToString(uint256 timestamp) \n        internal\n        pure\n        returns (string memory)\n    {\n        (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second)\n            = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\n        return \n            string(\n                abi.encodePacked(\n                    abi.encodePacked(\n                        year.toString(), '/', \n                        month < 10 ? '0' : '', month.toString(), '/', \n                        day < 10 ? '0' : '', day.toString(), ' '\n                    ),\n                    abi.encodePacked(\n                        hour < 10 ? '0' : '', hour.toString(), ':', \n                        minute < 10 ? '0' : '', minute.toString(), ':',\n                        second < 10 ? '0' : '',  second.toString()\n                    )\n                )\n            );\n    }\n\n    function dateToString(uint256 timestamp)\n        internal\n        pure\n        returns (string memory)\n    {\n        (uint256 year, uint256 month, uint256 day)\n            = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\n        return \n            string(\n                abi.encodePacked(\n                    year.toString(), '/', \n                    month < 10 ? '0' : '', month.toString(), '/', \n                    day < 10 ? '0' : '', day.toString()\n                )\n            );\n    }\n\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/misc/StringConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary StringConvertor {\n\n    using Strings for uint256;\n\n    /**\n     * @dev Converts a `uint256` to its decimals representation according to the specified decimals.\n     */\n    function toDecimalsString(uint256 value, uint8 decimals) \n        internal\n        pure\n        returns (bytes memory)\n    {\n        uint256 base = 10 ** decimals;\n        string memory round = (value / base).toString();\n        string memory fraction = (value % base).toString();\n        uint256 fractionLength = bytes(fraction).length;\n\n        bytes memory fullStr = abi.encodePacked(round, '.');\n        if (fractionLength < decimals) {\n            for (uint8 i = 0; i < decimals - fractionLength; i++) {\n                fullStr = abi.encodePacked(fullStr, '0');\n            }\n        }\n\n        return abi.encodePacked(fullStr, fraction);\n    }\n\n    /**\n     * @dev Trim a string from the right according to the specified cut length.\n     */\n    function trimRight(bytes memory self, uint256 cutLength) \n        internal \n        pure\n        returns (bytes memory newString)\n    {\n        newString = new bytes(self.length - cutLength);\n        for (uint256 index = 0; index < newString.length; index++) {\n            newString[index] = self[index];\n        }\n    }\n\n    /**\n     * @dev Add thousands separator to a numeric string.\n     */\n    function addThousandsSeparator(bytes memory self) \n        internal\n        pure\n        returns (bytes memory newString) \n    {\n        uint256 roundLength = 0;\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i] != '.') {\n                roundLength++;\n            } else {\n                break;\n            }\n        }\n\n        if (roundLength <= 3) {\n            newString = self;\n        } else {\n            newString = new bytes(self.length + (roundLength - 1) / 3);\n            uint256 newIndex = 0;\n            for (uint256 oriIndex = 0; oriIndex < self.length; oriIndex++) {\n                newString[newIndex++] = self[oriIndex];\n                if (oriIndex < roundLength - 1 && (roundLength - oriIndex - 1) % 3 == 0) {\n                    newString[newIndex++] = ',';\n                }\n            }\n        }\n    }\n\n}"
    },
    "@solvprotocol/erc-3525/ERC3525SlotEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"./ERC3525Upgradeable.sol\";\nimport \"./extensions/IERC3525SlotEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ERC3525SlotEnumerableUpgradeable is Initializable, ContextUpgradeable, ERC3525Upgradeable, IERC3525SlotEnumerableUpgradeable {\n    function __ERC3525SlotEnumerable_init(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) internal onlyInitializing {\n        __ERC3525_init_unchained(name_, symbol_, decimals_);\n    }\n\n    function __ERC3525SlotEnumerable_init_unchained(\n        string memory,\n        string memory,\n        uint8\n    ) internal onlyInitializing {\n    }\n\n    struct SlotData {\n        uint256 slot;\n        uint256[] slotTokens;\n    }\n\n    // slot => tokenId => index\n    mapping(uint256 => mapping(uint256 => uint256)) private _slotTokensIndex;\n\n    SlotData[] private _allSlots;\n\n    // slot => index\n    mapping(uint256 => uint256) private _allSlotsIndex;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC3525Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC3525SlotEnumerableUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function slotCount() public view virtual override returns (uint256) {\n        return _allSlots.length;\n    }\n\n    function slotByIndex(uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525SlotEnumerableUpgradeable.slotCount(), \"ERC3525SlotEnumerable: slot index out of bounds\");\n        return _allSlots[index_].slot;\n    }\n\n    function _slotExists(uint256 slot_) internal view virtual returns (bool) {\n        return _allSlots.length != 0 && _allSlots[_allSlotsIndex[slot_]].slot == slot_;\n    }\n\n    function tokenSupplyInSlot(uint256 slot_) public view virtual override returns (uint256) {\n        if (!_slotExists(slot_)) {\n            return 0;\n        }\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens.length;\n    }\n\n    function tokenInSlotByIndex(uint256 slot_, uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525SlotEnumerableUpgradeable.tokenSupplyInSlot(slot_), \"ERC3525SlotEnumerable: slot token index out of bounds\");\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens[index_];\n    }\n\n    function _tokenExistsInSlot(uint256 slot_, uint256 tokenId_) private view returns (bool) {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        return slotData.slotTokens.length > 0 && slotData.slotTokens[_slotTokensIndex[slot_][tokenId_]] == tokenId_;\n    }\n\n    function _createSlot(uint256 slot_) internal virtual {\n        require(!_slotExists(slot_), \"ERC3525SlotEnumerable: slot already exists\");\n        SlotData memory slotData = SlotData({\n            slot: slot_, \n            slotTokens: new uint256[](0)\n        });\n        _addSlotToAllSlotsEnumeration(slotData);\n        emit SlotChanged(0, 0, slot_);\n    }\n\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override {\n        super._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n\n        if (from_ == address(0) && fromTokenId_ == 0 && !_slotExists(slot_)) {\n            _createSlot(slot_);\n        }\n\n        //Shh - currently unused\n        to_;\n        toTokenId_;\n        value_;\n    }\n\n    function _afterValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override {\n        if (from_ == address(0) && fromTokenId_ == 0 && !_tokenExistsInSlot(slot_, toTokenId_)) {\n            _addTokenToSlotEnumeration(slot_, toTokenId_);\n        } else if (to_ == address(0) && toTokenId_ == 0 && _tokenExistsInSlot(slot_, fromTokenId_)) {\n            _removeTokenFromSlotEnumeration(slot_, fromTokenId_);\n        }\n\n        //Shh - currently unused\n        value_;\n\n        super._afterValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n    }\n\n    function _addSlotToAllSlotsEnumeration(SlotData memory slotData) private {\n        _allSlotsIndex[slotData.slot] = _allSlots.length;\n        _allSlots.push(slotData);\n    }\n\n    function _addTokenToSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        _slotTokensIndex[slot_][tokenId_] = slotData.slotTokens.length;\n        slotData.slotTokens.push(tokenId_);\n    }\n\n    function _removeTokenFromSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        uint256 lastTokenIndex = slotData.slotTokens.length - 1;\n        uint256 lastTokenId = slotData.slotTokens[lastTokenIndex];\n        uint256 tokenIndex = _slotTokensIndex[slot_][tokenId_];\n\n        slotData.slotTokens[tokenIndex] = lastTokenId;\n        _slotTokensIndex[slot_][lastTokenId] = tokenIndex;\n\n        delete _slotTokensIndex[slot_][tokenId_];\n        slotData.slotTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}"
    },
    "@solvprotocol/erc-3525/ERC3525Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC3525Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./IERC3525ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721EnumerableUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"./extensions/IERC3525MetadataUpgradeable.sol\";\nimport \"./periphery/interface/IERC3525MetadataDescriptorUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ERC3525Upgradeable is Initializable, ContextUpgradeable, IERC3525MetadataUpgradeable, IERC721EnumerableUpgradeable {\n    using StringsUpgradeable for address;\n    using StringsUpgradeable for uint256;\n    using AddressUpgradeable for address;\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    event SetMetadataDescriptor(address indexed metadataDescriptor);\n\n    struct TokenData {\n        uint256 id;\n        uint256 slot;\n        uint256 balance;\n        address owner;\n        address approved;\n        address[] valueApprovals;\n    }\n\n    struct AddressData {\n        uint256[] ownedTokens;\n        mapping(uint256 => uint256) ownedTokensIndex;\n        mapping(address => bool) approvals;\n    }\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    CountersUpgradeable.Counter private _tokenIdGenerator;\n\n    // id => (approval => allowance)\n    // @dev _approvedValues cannot be defined within TokenData, cause struct containing mappings cannot be constructed.\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\n\n    TokenData[] private _allTokens;\n\n    // key: id\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    mapping(address => AddressData) private _addressData;\n\n    IERC3525MetadataDescriptorUpgradeable public metadataDescriptor;\n\n    function __ERC3525_init(string memory name_, string memory symbol_, uint8 decimals_) internal onlyInitializing {\n        __ERC3525_init_unchained(name_, symbol_, decimals_);\n    }\n\n    function __ERC3525_init_unchained(string memory name_, string memory symbol_, uint8 decimals_) internal onlyInitializing {\n         _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC165Upgradeable).interfaceId ||\n            interfaceId == type(IERC3525Upgradeable).interfaceId ||\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC3525MetadataUpgradeable).interfaceId ||\n            interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || \n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId;\n    }\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals the token uses for value.\n     */\n    function valueDecimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\n    }\n\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\n        _requireMinted(tokenId_);\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\n        require(owner_ != address(0), \"ERC3525: invalid token ID\");\n    }\n\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    function contractURI() public view virtual override returns (string memory) {\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructContractURI() :\n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, \"contract/\", StringsUpgradeable.toHexString(address(this)))) : \n                    \"\";\n    }\n\n    function slotURI(uint256 slot_) public view virtual override returns (string memory) {\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructSlotURI(slot_) : \n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, \"slot/\", slot_.toString())) : \n                    \"\";\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\n        _requireMinted(tokenId_);\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructTokenURI(tokenId_) : \n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, tokenId_.toString())) : \n                    \"\";\n    }\n\n    function approve(uint256 tokenId_, address to_, uint256 value_) public payable virtual override {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        require(to_ != owner, \"ERC3525: approval to current owner\");\n\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: approve caller is not owner nor approved\");\n\n        _approveValue(tokenId_, to_, value_);\n    }\n\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _approvedValues[tokenId_][operator_];\n    }\n\n    function transferFrom(\n        uint256 fromTokenId_,\n        address to_,\n        uint256 value_\n    ) public payable virtual override returns (uint256 newTokenId) {\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\n\n        newTokenId = _createDerivedTokenId(fromTokenId_);\n        _mint(to_, newTokenId, ERC3525Upgradeable.slotOf(fromTokenId_), 0);\n        _transferValue(fromTokenId_, newTokenId, value_);\n    }\n\n    function transferFrom(\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 value_\n    ) public payable virtual override {\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\n        _transferValue(fromTokenId_, toTokenId_, value_);\n    }\n\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\n        require(owner_ != address(0), \"ERC3525: balance query for the zero address\");\n        return _addressData[owner_].ownedTokens.length;\n    }\n\n    function transferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) public payable virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\n        _transferTokenId(from_, to_, tokenId_);\n    }\n\n    function safeTransferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) public payable virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\n    }\n\n    function safeTransferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) public payable virtual override {\n        safeTransferFrom(from_, to_, tokenId_, \"\");\n    }\n\n    function approve(address to_, uint256 tokenId_) public payable virtual override {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        require(to_ != owner, \"ERC3525: approval to current owner\");\n\n        require(\n            _msgSender() == owner || ERC3525Upgradeable.isApprovedForAll(owner, _msgSender()),\n            \"ERC3525: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to_, tokenId_);\n    }\n\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\n    }\n\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\n        _setApprovalForAll(_msgSender(), operator_, approved_);\n    }\n\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\n        return _addressData[owner_].approvals[operator_];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525Upgradeable.totalSupply(), \"ERC3525: global index out of bounds\");\n        return _allTokens[index_].id;\n    }\n\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525Upgradeable.balanceOf(owner_), \"ERC3525: owner index out of bounds\");\n        return _addressData[owner_].ownedTokens[index_];\n    }\n\n    function _setApprovalForAll(\n        address owner_,\n        address operator_,\n        bool approved_\n    ) internal virtual {\n        require(owner_ != operator_, \"ERC3525: approve to caller\");\n\n        _addressData[owner_].approvals[operator_] = approved_;\n\n        emit ApprovalForAll(owner_, operator_, approved_);\n    }\n\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        return (\n            operator_ == owner ||\n            ERC3525Upgradeable.isApprovedForAll(owner, operator_) ||\n            ERC3525Upgradeable.getApproved(tokenId_) == operator_\n        );\n    }\n\n    function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual {\n        uint256 currentAllowance = ERC3525Upgradeable.allowance(tokenId_, operator_);\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\n            require(currentAllowance >= value_, \"ERC3525: insufficient allowance\");\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\n        }\n    }\n\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\n    }\n\n    function _requireMinted(uint256 tokenId_) internal view virtual {\n        require(_exists(tokenId_), \"ERC3525: invalid token ID\");\n    }\n\n    function _mint(address to_, uint256 slot_, uint256 value_) internal virtual returns (uint256 tokenId) {\n        tokenId = _createOriginalTokenId();\n        _mint(to_, tokenId, slot_, value_);  \n    }\n\n    function _mint(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual {\n        require(to_ != address(0), \"ERC3525: mint to the zero address\");\n        require(tokenId_ != 0, \"ERC3525: cannot mint zero tokenId\");\n        require(!_exists(tokenId_), \"ERC3525: token already minted\");\n\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\n        __mintToken(to_, tokenId_, slot_);\n        __mintValue(tokenId_, value_);\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\n    }\n\n    function _mintValue(uint256 tokenId_, uint256 value_) internal virtual {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        _beforeValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\n        __mintValue(tokenId_, value_);\n        _afterValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\n    }\n\n    function __mintValue(uint256 tokenId_, uint256 value_) private {\n        _allTokens[_allTokensIndex[tokenId_]].balance += value_;\n        emit TransferValue(0, tokenId_, value_);\n    }\n\n    function __mintToken(address to_, uint256 tokenId_, uint256 slot_) private {\n        TokenData memory tokenData = TokenData({\n            id: tokenId_,\n            slot: slot_,\n            balance: 0,\n            owner: to_,\n            approved: address(0),\n            valueApprovals: new address[](0)\n        });\n\n        _addTokenToAllTokensEnumeration(tokenData);\n        _addTokenToOwnerEnumeration(to_, tokenId_);\n\n        emit Transfer(address(0), to_, tokenId_);\n        emit SlotChanged(tokenId_, 0, slot_);\n    }\n\n    function _burn(uint256 tokenId_) internal virtual {\n        _requireMinted(tokenId_);\n\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        address owner = tokenData.owner;\n        uint256 slot = tokenData.slot;\n        uint256 value = tokenData.balance;\n\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\n\n        _clearApprovedValues(tokenId_);\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\n        _removeTokenFromAllTokensEnumeration(tokenId_);\n\n        emit TransferValue(tokenId_, 0, value);\n        emit SlotChanged(tokenId_, slot, 0);\n        emit Transfer(owner, address(0), tokenId_);\n\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\n    }\n\n    function _burnValue(uint256 tokenId_, uint256 burnValue_) internal virtual {\n        _requireMinted(tokenId_);\n\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        address owner = tokenData.owner;\n        uint256 slot = tokenData.slot;\n        uint256 value = tokenData.balance;\n\n        require(value >= burnValue_, \"ERC3525: burn value exceeds balance\");\n\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\n        \n        tokenData.balance -= burnValue_;\n        emit TransferValue(tokenId_, 0, burnValue_);\n        \n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\n    }\n\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\n\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\n        _addressData[to_].ownedTokens.push(tokenId_);\n    }\n\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\n\n        AddressData storage ownerData = _addressData[from_];\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\n\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\n\n        delete ownerData.ownedTokensIndex[tokenId_];\n        ownerData.ownedTokens.pop();\n    }\n\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\n        _allTokens.push(tokenData_);\n    }\n\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId_];\n        _allTokens.pop();\n    }\n\n    function _approve(address to_, uint256 tokenId_) internal virtual {\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\n        emit Approval(ERC3525Upgradeable.ownerOf(tokenId_), to_, tokenId_);\n    }\n\n    function _approveValue(\n        uint256 tokenId_,\n        address to_,\n        uint256 value_\n    ) internal virtual {\n        require(to_ != address(0), \"ERC3525: approve value to the zero address\");\n        if (!_existApproveValue(to_, tokenId_)) {\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\n        }\n        _approvedValues[tokenId_][to_] = value_;\n\n        emit ApprovalValue(tokenId_, to_, value_);\n    }\n\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        uint256 length = tokenData.valueApprovals.length;\n        for (uint256 i = 0; i < length; i++) {\n            address approval = tokenData.valueApprovals[i];\n            delete _approvedValues[tokenId_][approval];\n        }\n        delete tokenData.valueApprovals;\n    }\n\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _transferValue(\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 value_\n    ) internal virtual {\n        require(_exists(fromTokenId_), \"ERC3525: transfer from invalid token ID\");\n        require(_exists(toTokenId_), \"ERC3525: transfer to invalid token ID\");\n\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\n\n        require(fromTokenData.balance >= value_, \"ERC3525: insufficient balance for transfer\");\n        require(fromTokenData.slot == toTokenData.slot, \"ERC3525: transfer to token with different slot\");\n\n        _beforeValueTransfer(\n            fromTokenData.owner,\n            toTokenData.owner,\n            fromTokenId_,\n            toTokenId_,\n            fromTokenData.slot,\n            value_\n        );\n\n        fromTokenData.balance -= value_;\n        toTokenData.balance += value_;\n\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\n\n        _afterValueTransfer(\n            fromTokenData.owner,\n            toTokenData.owner,\n            fromTokenId_,\n            toTokenId_,\n            fromTokenData.slot,\n            value_\n        );\n\n        require(\n            _checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \"\"),\n            \"ERC3525: transfer rejected by ERC3525Receiver\"\n        );\n    }\n\n    function _transferTokenId(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) internal virtual {\n        require(ERC3525Upgradeable.ownerOf(tokenId_) == from_, \"ERC3525: transfer from invalid owner\");\n        require(to_ != address(0), \"ERC3525: transfer to the zero address\");\n\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        uint256 value = ERC3525Upgradeable.balanceOf(tokenId_);\n\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\n\n        _approve(address(0), tokenId_);\n        _clearApprovedValues(tokenId_);\n\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\n        _addTokenToOwnerEnumeration(to_, tokenId_);\n\n        emit Transfer(from_, to_, tokenId_);\n\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\n    }\n\n    function _safeTransferTokenId(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) internal virtual {\n        _transferTokenId(from_, to_, tokenId_);\n        require(\n            _checkOnERC721Received(from_, to_, tokenId_, data_),\n            \"ERC3525: transfer to non ERC721Receiver\"\n        );\n    }\n\n    function _checkOnERC3525Received( \n        uint256 fromTokenId_, \n        uint256 toTokenId_, \n        uint256 value_, \n        bytes memory data_\n    ) internal virtual returns (bool) {\n        address to = ERC3525Upgradeable.ownerOf(toTokenId_);\n        if (to.isContract()) {\n            try IERC165Upgradeable(to).supportsInterface(type(IERC3525ReceiverUpgradeable).interfaceId) returns (bool retval) {\n                if (retval) {\n                    bytes4 receivedVal = IERC3525ReceiverUpgradeable(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_);\n                    return receivedVal == IERC3525ReceiverUpgradeable.onERC3525Received.selector;\n                } else {\n                    return true;\n                }\n            } catch (bytes memory /** reason */) {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from_ address representing the previous owner of the given token ID\n     * @param to_ target address that will receive the tokens\n     * @param tokenId_ uint256 ID of the token to be transferred\n     * @param data_ bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) private returns (bool) {\n        if (to_.isContract()) {\n            try \n                IERC721ReceiverUpgradeable(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /* solhint-disable */\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual {}\n\n    function _afterValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual {}\n    /* solhint-enable */\n\n    function _setMetadataDescriptor(address metadataDescriptor_) internal virtual {\n        metadataDescriptor = IERC3525MetadataDescriptorUpgradeable(metadataDescriptor_);\n        emit SetMetadataDescriptor(metadataDescriptor_);\n    }\n\n    function _createOriginalTokenId() internal virtual returns (uint256) {\n         _tokenIdGenerator.increment();\n        return _tokenIdGenerator.current();\n    }\n\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\n        fromTokenId_;\n        return _createOriginalTokenId();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n\n"
    },
    "@solvprotocol/erc-3525/IERC3525ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\n/**\n * @title EIP-3525 token receiver interface\n * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when \n *  receiving values from ANY addresses or EIP-3525 tokens.\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\n */\ninterface IERC3525ReceiverUpgradeable {\n    /**\n     * @notice Handle the receipt of an EIP-3525 token value.\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the \n     *  recipient contract, if the recipient contract implements this function, the EIP-3525 \n     *  contract MUST call this function after a value transfer (i.e. `transferFrom(uint256,\n     *  uint256,uint256,bytes)`).\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\n     *  uint256,bytes)'))`) if the transfer is accepted.\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\n     * @param _operator The address which triggered the transfer\n     * @param _fromTokenId The token id to transfer value from\n     * @param _toTokenId The token id to transfer value to\n     * @param _value The transferred value\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))` \n     *  unless the transfer is rejected.\n     */\n    function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes calldata _data) external returns (bytes4);\n\n}"
    },
    "@solvprotocol/erc-3525/IERC3525Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-3525 Semi-Fungible Token Standard\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0xd5358140.\n */\ninterface IERC3525Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\n    /**\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\n     * @param _fromTokenId The token id to transfer value from\n     * @param _toTokenId The token id to transfer value to\n     * @param _value The transferred value\n     */\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\n\n    /**\n     * @dev MUST emits when the approval value of a token is set or changed.\n     * @param _tokenId The token to approve\n     * @param _operator The operator to approve for\n     * @param _value The maximum value that `_operator` is allowed to manage\n     */\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\n\n    /**\n     * @dev MUST emit when the slot of a token is set or changed.\n     * @param _tokenId The token of which slot is set or changed\n     * @param _oldSlot The previous slot of the token\n     * @param _newSlot The updated slot of the token\n     */ \n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\n\n    /**\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\n     *  Considering the compatibility with third-party wallets, this function is defined as\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.\n     * @return The number of decimals for value\n     */\n    function valueDecimals() external view returns (uint8);\n\n    /**\n     * @notice Get the value of a token.\n     * @param _tokenId The token for which to query the balance\n     * @return The value of `_tokenId`\n     */\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     * @notice Get the slot of a token.\n     * @param _tokenId The identifier for a token\n     * @return The slot of the token\n     */\n    function slotOf(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     * @notice Allow an operator to manage the value of a token, up to the `_value` amount.\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\n     *  address for `_tokenId`.\n     *  MUST emit ApprovalValue event.\n     * @param _tokenId The token to approve\n     * @param _operator The operator to be approved\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\n     */\n    function approve(\n        uint256 _tokenId,\n        address _operator,\n        uint256 _value\n    ) external payable;\n\n    /**\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\n     * @param _tokenId The token for which to query the allowance\n     * @param _operator The address of an operator\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\n     */\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\n\n    /**\n     * @notice Transfer value from a specified token to another specified token with the same slot.\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\n     *  approved the whole `_fromTokenId` or part of it.\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\n     *  operator.\n     *  MUST emit `TransferValue` event.\n     * @param _fromTokenId The token to transfer value from\n     * @param _toTokenId The token to transfer value to\n     * @param _value The transferred value\n     */\n    function transferFrom(\n        uint256 _fromTokenId,\n        uint256 _toTokenId,\n        uint256 _value\n    ) external payable;\n\n    /**\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\n     *  `_to` is capable of receiving ERC3525 tokens.\n     * @dev This function MUST create a new ERC3525 token with the same slot for `_to` to receive\n     *  the transferred value.\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\n     *  MUST revert if `_to` is zero address.\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\n     *  operator.\n     *  MUST emit `Transfer` and `TransferValue` events.\n     * @param _fromTokenId The token to transfer value from\n     * @param _to The address to transfer value to\n     * @param _value The transferred value\n     * @return ID of the new token created for `_to` which receives the transferred value\n     */\n    function transferFrom(\n        uint256 _fromTokenId,\n        address _to,\n        uint256 _value\n    ) external payable returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\n *  Note: the ERC-165 identifier for this interface is 0x150b7a02.\n */\ninterface IERC721ReceiverUpgradeable {\n    /** \n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. Return of other than the magic value MUST result in the\n     *  transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _operator The address which called `safeTransferFrom` function\n     * @param _from The address which previously owned the token\n     * @param _tokenId The NFT identifier which is being transferred\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onERC721Received(\n        address _operator, \n        address _from, \n        uint256 _tokenId, \n        bytes calldata _data\n    ) external returns(bytes4);\n}\n"
    },
    "@solvprotocol/erc-3525/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/** \n * @title ERC-721 Non-Fungible Token Standard\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /** \n     * @dev This emits when ownership of any NFT changes by any mechanism.\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\n     *  may be created and assigned without emitting Transfer. At the time of\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when the approved address for an NFT is changed or\n     *  reaffirmed. The zero address indicates there is no approved address.\n     *  When a Transfer event emits, this also indicates that the approved\n     *  address for that NFT (if any) is reset to none.\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when an operator is enabled or disabled for an owner.\n     *  The operator can manage all NFTs of the owner.\n     */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * @notice Count all NFTs assigned to an owner\n     * @dev NFTs assigned to the zero address are considered invalid, and this\n     *  function throws for queries about the zero address.\n     * @param _owner An address for whom to query the balance\n     * @return The number of NFTs owned by `_owner`, possibly zero\n     */\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Find the owner of an NFT\n     * @dev NFTs assigned to zero address are considered invalid, and queries\n     *  about them do throw.\n     * @param _tokenId The identifier for an NFT\n     * @return The address of the owner of the NFT\n     */\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\n     *  `onERC721Received` on `_to` and throws if the return value is not\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     * @param data Additional data with no specified format, sent in call to `_to`\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev This works identically to the other function with an extra data parameter,\n     *  except this function just sets data to \"\".\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n     *  THEY MAY BE PERMANENTLY LOST\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Change or reaffirm the approved address for an NFT\n     * @dev The zero address indicates there is no approved address.\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\n     *  operator of the current owner.\n     * @param _approved The new approved NFT controller\n     * @param _tokenId The NFT to approve\n     */\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage\n     *  all of `msg.sender`'s assets\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\n     *  multiple operators per owner.\n     * @param _operator Address to add to the set of authorized operators\n     * @param _approved True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice Get the approved address for a single NFT\n     * @dev Throws if `_tokenId` is not a valid NFT.\n     * @param _tokenId The NFT to find the approved address for\n     * @return The approved address for this NFT, or the zero address if there is none\n     */\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice Query if an address is an authorized operator for another address\n     * @param _owner The address that owns the NFTs\n     * @param _operator The address that acts on behalf of the owner\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\n     */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC3525MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC3525Upgradeable.sol\";\nimport \"./IERC721MetadataUpgradeable.sol\";\n\n/**\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\n *  (URI) for the ERC3525 contract as well as a specified slot.\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\n *  to any resource stored in a centralized system.\n *  See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\n */\ninterface IERC3525MetadataUpgradeable is IERC3525Upgradeable, IERC721MetadataUpgradeable {\n    /**\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\n     *  header `data:application/json;`.\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\n     * @return The JSON formatted URI of the current ERC3525 contract\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\n     *  `data:application/json;`.\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\n     * @return The JSON formatted URI of `_slot`\n     */\n    function slotURI(uint256 _slot) external view returns (string memory);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC3525SlotEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC3525Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\n/**\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for slot enumeration\n * @dev Interfaces for any contract that wants to support enumeration of slots as well as tokens \n *  with the same slot.\n *  See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0x3b741b9e.\n */\ninterface IERC3525SlotEnumerableUpgradeable is IERC3525Upgradeable, IERC721EnumerableUpgradeable {\n\n    /**\n     * @notice Get the total amount of slots stored by the contract.\n     * @return The total amount of slots\n     */\n    function slotCount() external view returns (uint256);\n\n    /**\n     * @notice Get the slot at the specified index of all slots stored by the contract.\n     * @param _index The index in the slot list\n     * @return The slot at `index` of all slots.\n     */\n    function slotByIndex(uint256 _index) external view returns (uint256);\n\n    /**\n     * @notice Get the total amount of tokens with the same slot.\n     * @param _slot The slot to query token supply for\n     * @return The total amount of tokens with the specified `_slot`\n     */\n    function tokenSupplyInSlot(uint256 _slot) external view returns (uint256);\n\n    /**\n     * @notice Get the token at the specified index of all tokens with the same slot.\n     * @param _slot The slot to query tokens with\n     * @param _index The index in the token list of the slot\n     * @return The token ID at `_index` of all tokens with `_slot`\n     */\n    function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /** \n     * @notice Count NFTs tracked by this contract\n     * @return A count of valid NFTs tracked by this contract, where each one of\n     *  them has an assigned and queryable owner not equal to the zero address\n     */\n    function totalSupply() external view returns (uint256);\n\n    /** \n     * @notice Enumerate valid NFTs\n     * @dev Throws if `_index` >= `totalSupply()`.\n     * @param _index A counter less than `totalSupply()`\n     * @return The token identifier for the `_index`th NFT,\n     *  (sort order not specified)\n     */\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /** \n     * @notice Enumerate NFTs assigned to an owner\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n     *  `_owner` is the zero address, representing invalid NFTs.\n     * @param _owner An address where we are interested in NFTs owned by them\n     * @param _index A counter less than `balanceOf(_owner)`\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\n     *  (sort order not specified)\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @notice A descriptive name for a collection of NFTs in this contract\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice An abbreviated name for NFTs in this contract\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n     *  Metadata JSON Schema\".\n     */\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n"
    },
    "@solvprotocol/erc-3525/periphery/interface/IERC3525MetadataDescriptorUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC3525MetadataDescriptorUpgradeable {\n\n    function constructContractURI() external view returns (string memory);\n\n    function constructSlotURI(uint256 slot) external view returns (string memory);\n    \n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\n\n}"
    },
    "contracts/open-fund-redemptions/IOpenFundRedemptionConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IOpenFundRedemptionConcrete {\n\t\n\tstruct RedeemInfo {\n\t\tbytes32 poolId;\n\t\taddress currency;\n\t\tuint256 createTime;\n\t\tuint256 nav;\n\t}\t\n\n\tfunction setRedeemNavOnlyDelegate(uint256 slot_, uint256 nav_) external;\n\n\tfunction getRedeemInfo(uint256 slot_) external view returns (RedeemInfo memory);\n\tfunction getRedeemNav(uint256 slot_) external view returns (uint256);\n}"
    },
    "contracts/open-fund-redemptions/IOpenFundRedemptionDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IOpenFundRedemptionDelegate {\n\tfunction setRedeemNavOnlyMarket(uint256 slot_, uint256 nav_) external;\n}"
    },
    "contracts/open-fund-redemptions/OpenFundRedemptionConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableConcrete.sol\";\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/FCFSMultiRepayableConcrete.sol\";\nimport \"./IOpenFundRedemptionConcrete.sol\";\n\ncontract OpenFundRedemptionConcrete is IOpenFundRedemptionConcrete, SFTValueIssuableConcrete, FCFSMultiRepayableConcrete {\n\n    mapping(uint256 => RedeemInfo) internal _redeemInfos;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() { \n        _disableInitializers();\n    }\n    \n    function initialize() external initializer {\n        __SFTIssuableConcrete_init();\n\t}\n\n    function setRedeemNavOnlyDelegate(uint256 slot_, uint256 nav_) external virtual override onlyDelegate {\n        _redeemInfos[slot_].nav = nav_;\n    }\n\n    function getRedeemInfo(uint256 slot_) external view virtual override returns (RedeemInfo memory) {\n        return _redeemInfos[slot_];\n    }\n\n\tfunction getRedeemNav(uint256 slot_) external view virtual override returns (uint256) {\n        return _redeemInfos[slot_].nav;\n    }\n\t\n    function _isSlotValid( uint256 slot_) internal view virtual override returns (bool) {\n        return _redeemInfos[slot_].createTime != 0;\n    }\n\n    function _createSlot( address /* txSender_ */, bytes memory inputSlotInfo_) internal virtual override returns (uint256 slot_) {\n        RedeemInfo memory redeemInfo = abi.decode(inputSlotInfo_, (RedeemInfo));\n        require(redeemInfo.poolId != bytes32(0), \"OFRC: invalid poolId\");\n        require(redeemInfo.currency != address(0), \"OFRC: invalid currency\");\n        require(redeemInfo.createTime != 0, \"OFRC: invalid createTime\");\n        slot_ = _getSlot(redeemInfo.poolId, redeemInfo.currency, redeemInfo.createTime);\n\n        // if the slot is already created, do nothing\n        if (_redeemInfos[slot_].createTime == 0) {\n            _redeemInfos[slot_] = redeemInfo;\n        }\n    }\n\n    function _getSlot(bytes32 poolId_, address currency_, uint256 createTime_) internal view virtual returns (uint256) {\n\t\tuint256 chainId;\n        assembly { chainId := chainid() }\n\t\treturn uint256(keccak256(abi.encodePacked(chainId, delegate(), poolId_, currency_, createTime_)));\n    }\n\n    function _mint(\n        address /** txSender_ */, address currency_, address /** mintTo_ */, \n        uint256 slot_, uint256 /** tokenId_ */, uint256 /** amount_ */\n    ) internal virtual override {\n        require(_isSlotValid(slot_), \"OFRC: invalid slot\");\n        require(_redeemInfos[slot_].currency == currency_, \"OFRC: invalid currency\");\n    }\n\n    function _burn(uint256 tokenId_, uint256 burnValue_) internal virtual override {\n        uint256 slot = ERC3525Upgradeable(delegate()).slotOf(tokenId_);\n        FCFSMultiRepayableConcrete._slotValueInfo[slot].slotTotalValue -= burnValue_;\n    }\n\n    function _currency( uint256 slot_) internal view virtual override returns (address) {\n        return _redeemInfos[slot_].currency;\n    }\n\n    function _repayRate( uint256 slot_) internal view virtual override returns (uint256) {\n        return _redeemInfos[slot_].nav;\n    }\n\t\n\n}"
    },
    "contracts/open-fund-redemptions/OpenFundRedemptionDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/fcfs-multi-repayable/FCFSMultiRepayableDelegate.sol\";\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableDelegate.sol\";\nimport \"./IOpenFundRedemptionDelegate.sol\";\nimport \"./IOpenFundRedemptionConcrete.sol\";\n\ncontract OpenFundRedemptionDelegate is IOpenFundRedemptionDelegate, SFTValueIssuableDelegate, FCFSMultiRepayableDelegate {\n\n\tbytes32 internal constant CONTRACT_OPEN_FUND_MARKET = \"OpenFundMarket\"; \n\n    bool private __allowRepayWithBalance;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() { \n        _disableInitializers();\n    }\n    \n\tfunction initialize(\n        address resolver_, string calldata name_, string calldata symbol_, uint8 decimals_, \n\t\taddress concrete_, address descriptor_, address owner_, bool allowRepayWithBalance_\n    ) external initializer {\n\t\t__SFTIssuableDelegate_init(resolver_, name_, symbol_, decimals_, concrete_, descriptor_, owner_);\n        __allowRepayWithBalance = allowRepayWithBalance_;\n\t}\n\n\tfunction setRedeemNavOnlyMarket(uint256 slot_, uint256 nav_) external virtual override {\n\t\trequire(_msgSender() == _issueMarket(), \"OFRD: only market\");\n\t\tIOpenFundRedemptionConcrete(concrete()).setRedeemNavOnlyDelegate(slot_, nav_);\n\t}\n\n    function allowRepayWithBalance() public view virtual override returns (bool) {\n        return __allowRepayWithBalance;\n    }\n\n\tfunction _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override(ERC3525SlotEnumerableUpgradeable, FCFSMultiRepayableDelegate) {\n        FCFSMultiRepayableDelegate._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n    }\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory addressNames) {\n\t\taddressNames = new bytes32[](1);\n\t\taddressNames[0] = CONTRACT_OPEN_FUND_MARKET;\n\t}\n\n\tfunction _issueMarket() internal view virtual override returns (address) {\n\t\treturn getRequiredAddress(CONTRACT_OPEN_FUND_MARKET, \"OFRD: OpenFundMarket not set\");\n\t}\n\n\tfunction contractType() external view virtual override returns (string memory) {\n        return \"Open Fund Redemptions\";\n    }\n}"
    },
    "contracts/open-fund-redemptions/svgs/DefaultOpenFundRedemptionSVG.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../OpenFundRedemptionDelegate.sol\";\nimport \"../OpenFundRedemptionConcrete.sol\";\nimport \"../../svg-base/OpenFundSVGBase.sol\";\n\ncontract DefaultOpenFundRedemptionSVG is OpenFundSVGBase {\n\n    using Strings for uint256;\n    using Strings for address;\n    using Dates for uint256;\n    \n    struct SVGParams {\n        address payableAddress;\n        string tokenId;\n        uint256 slot;\n        string payableName;\n        string currencyTokenSymbol;\n        string tokenBalance;\n        string value;\n        string nav;\n        address issuer;\n        string svgGenerationTime;\n    }\n\n    function generateSVG(address payable_, uint256 tokenId_) \n        external \n        view \n        virtual \n        override\n        returns (string memory) \n    {\n        OpenFundRedemptionDelegate payableDelegate = OpenFundRedemptionDelegate(payable_);\n        OpenFundRedemptionConcrete payableConcrete = OpenFundRedemptionConcrete(payableDelegate.concrete());\n\n        uint256 tokenBalance = payableDelegate.balanceOf(tokenId_);\n        uint256 slot = payableDelegate.slotOf(tokenId_);\n        OpenFundRedemptionConcrete.RedeemInfo memory redeemInfo = payableConcrete.getRedeemInfo(slot);\n\n        (,, OpenFundMarketStorage.ManagerInfo memory managerInfo, ,,,,,,) = OpenFundMarketStorage(_market()).poolInfos(redeemInfo.poolId);\n        uint256 value = tokenBalance * redeemInfo.nav / (10 ** payableDelegate.valueDecimals());\n        \n        SVGParams memory svgParams;\n        svgParams.payableAddress = payable_;\n        svgParams.tokenId = tokenId_.toString();\n        svgParams.slot = slot;\n        svgParams.payableName = payableDelegate.name();\n        svgParams.currencyTokenSymbol = ERC20(redeemInfo.currency).symbol();\n        svgParams.tokenBalance = string(_formatValue(tokenBalance, payableDelegate.valueDecimals()));\n        svgParams.value = redeemInfo.nav == 0 ? 'Pending' : string(abi.encodePacked(_formatValue(value, ERC20(redeemInfo.currency).decimals()), ' ', svgParams.currencyTokenSymbol));\n        svgParams.nav = redeemInfo.nav == 0 ? 'Pending' : string(_formatValue(redeemInfo.nav, ERC20(redeemInfo.currency).decimals()));\n        svgParams.issuer = managerInfo.poolManager;\n        svgParams.svgGenerationTime = block.timestamp.datetimeToString();\n\n        return generateSVG(svgParams);\n    }\n\n    function generateSVG(SVGParams memory params) \n        public \n        virtual \n        view \n        returns (string memory) \n    {\n        return \n            string(\n                abi.encodePacked(\n                    '<svg width=\"600\" height=\"400\" viewBox=\"0 0 600 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">',\n                         _generateBackground(params.payableAddress, params.slot),\n                        _generateContent(params),\n                    '</svg>'\n                )\n            );\n    }\n\n    function _generateContent(SVGParams memory params) internal view virtual returns (string memory) {\n        SVGBackgroundGenerator.SVGColorInfo memory svgColorInfo = SVGBackgroundGenerator(svgBackgroundGenerator).getSVGColorInfo(params.payableAddress, params.slot);\n        return\n            string(\n                abi.encodePacked(\n                    '<rect x=\"154\" y=\"278\" width=\"96\" height=\"16\" rx=\"8\" fill=\"', svgColorInfo.backgroundColor, '\" />',\n                    '<text fill=\"#202020\" font-family=\"Arial\" font-size=\"12\">',\n                    abi.encodePacked(\n                        '<tspan x=\"26\" y=\"61\" font-size=\"16\" font-weight=\"bold\">AMOUNT</tspan>',\n                        '<tspan x=\"26\" y=\"108\" font-size=\"38\" font-weight=\"bold\">', params.tokenBalance, '</tspan>',\n                        '<tspan x=\"26\" y=\"143\" font-size=\"14\" font-weight=\"bold\" fill=\"', svgColorInfo.backgroundColor, '\">', params.payableName, '</tspan>',\n                        '<tspan x=\"26\" y=\"162\">#', params.tokenId, '</tspan>'\n                    ),\n                    abi.encodePacked(\n                        '<tspan x=\"26\" y=\"290\">STATUS</tspan>'\n                        '<tspan x=\"26\" y=\"310\">VALUE</tspan>',\n                        '<tspan x=\"26\" y=\"330\">NAV</tspan>',\n                        '<tspan x=\"238\" y=\"290\" text-anchor=\"end\" font-size=\"10\" fill=\"white\">REDEMPTION</tspan>',\n                        '<tspan x=\"250\" y=\"310\" text-anchor=\"end\">', params.value, '</tspan>',\n                        '<tspan x=\"250\" y=\"330\" text-anchor=\"end\">', params.nav, '</tspan>'\n                    ),\n                    abi.encodePacked(\n                        '<tspan x=\"26\" y=\"364\" font-size=\"7\">Issuer: ', params.issuer.toHexString(), '</tspan>',\n                        '<tspan x=\"26\" y=\"376\" font-size=\"7\">Updated: ', params.svgGenerationTime, '</tspan>',\n                        '<tspan x=\"498\" y=\"376\" font-size=\"7\" fill=\"white\" fill-opacity=\"0.6\">Powered by Solv Protocol</tspan>'\n                    ),\n                    '</text>'\n                )\n            );\n    }\n\n}"
    },
    "contracts/svg-base/OpenFundSVGBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/StringConvertor.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Dates.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-open-fund-market/contracts/OpenFundMarketStorage.sol\";\nimport \"@solvprotocol/contracts-v3-open-fund-market/contracts/oracle/INavOracle.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./SVGBackgroundGenerator.sol\";\n\nabstract contract OpenFundSVGBase is ResolverCache {\n\n    using StringConvertor for uint256;\n    using StringConvertor for bytes;\n\n\tbytes32 internal constant CONTRACT_OPEN_FUND_MARKET = \"OpenFundMarket\"; \n\n    address public svgBackgroundGenerator;\n\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only owner\");\n        _;\n    }\n\n    function initialize(address resolver_, address svgBackgroundGenerator_, address owner_) external initializer {\n\t\t__ResolverCache_init(resolver_);\n        svgBackgroundGenerator = svgBackgroundGenerator_;\n        owner = owner_;\n    }\n\n    function generateSVG(address payable_, uint256 tokenId_) external virtual view returns (string memory);\n\n    function _generateBackground(address sft_, uint256 slot_) internal view virtual returns (string memory) {\n        return SVGBackgroundGenerator(svgBackgroundGenerator).generateBackground(sft_, slot_);\n    }\n\n    function _formatValue(uint256 value, uint8 decimals) internal pure returns (bytes memory) {\n        if(value < (10 ** decimals)) {\n            return value.toDecimalsString(decimals).trimRight(decimals - 6);\n        } else {\n            return value.toDecimalsString(decimals).trimRight(decimals - 2).addThousandsSeparator();\n        }\n    }\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory addressNames) {\n\t\taddressNames = new bytes32[](1);\n\t\taddressNames[0] = CONTRACT_OPEN_FUND_MARKET;\n\t}\n\n\tfunction _market() internal view virtual returns (address) {\n\t\treturn getRequiredAddress(CONTRACT_OPEN_FUND_MARKET, \"OFS_SVG: Market not set\");\n\t}\n\n}"
    },
    "contracts/svg-base/SVGBackgroundGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-open-fund-market/contracts/OpenFundMarketStorage.sol\";\nimport \"../open-fund-redemptions/OpenFundRedemptionDelegate.sol\";\nimport \"../open-fund-redemptions/OpenFundRedemptionConcrete.sol\";\n\ncontract SVGBackgroundGenerator is OwnControl, ResolverCache {\n\n    struct SVGColorInfo {\n        uint256 strategyCount;\n        string backgroundColor;\n        string[] patternColors;\n    }\n\n    event SetSVGColorInfo(address sft, uint256 slot, SVGColorInfo svgColorInfo);\n\n\tbytes32 internal constant CONTRACT_OPEN_FUND_MARKET = \"OpenFundMarket\"; \n\n    mapping(address => mapping(uint256 => SVGColorInfo)) internal _svgColorInfos;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() { \n        _disableInitializers();\n    }\n\n    function initialize(address resolver_, address owner_, SVGColorInfo calldata defaultColorInfo_) external initializer {\n\t\t__ResolverCache_init(resolver_);\n        __OwnControl_init(owner_);\n        _setSVGColorInfo(address(0), 0, defaultColorInfo_);\n\t}\n    \n    function generateBackground(address sft_, uint256 slot_) external view virtual returns (string memory background_) {\n        (address shareAddress, uint256 shareSlot) = _getShareAddressAndSlot(sft_, slot_);\n        SVGColorInfo storage colorInfo = _svgColorInfos[shareAddress][shareSlot];\n        if (colorInfo.strategyCount == 0) {\n            colorInfo = _svgColorInfos[address(0)][0];\n        }\n\n        bytes memory outline = abi.encodePacked(\n            '<rect width=\"600\" height=\"400\" rx=\"20\" fill=\"white\" />',\n            '<rect x=\"0.5\" y=\"0.5\" width=\"599\" height=\"399\" rx=\"20\" stroke=\"#F9F9F9\" />',\n            '<mask id=\"m_3525_1\" style=\"mask-type:alpha\" maskUnits=\"userSpaceOnUse\" x=\"300\" y=\"0\" width=\"300\" height=\"400\">',\n                '<path d=\"M300 0H580C590 0 600 8 600 20V380C600 392 590 400 580 400H300V0Z\" fill=\"white\" />',\n            '</mask>'\n        );\n\n        bytes memory figure;\n\n        if (colorInfo.strategyCount == 1) {\n            figure = abi.encodePacked(\n                abi.encodePacked(\n                    '<defs>',\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_1\" x1=\"540\" y1=\"120\" x2=\"360\" y2=\"275\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                    '</defs>'\n                ),\n                abi.encodePacked(\n                    '<g mask=\"url(#m_3525_1)\">',\n                        '<rect x=\"300\" width=\"300\" height=\"400\" fill=\"', colorInfo.backgroundColor, '\" />',\n                        '<circle cx=\"450\" cy=\"200\" r=\"115\" fill=\"url(#p_3525_1)\"></circle>',\n                    '</g>'\n                )\n            );\n\n        } else if (colorInfo.strategyCount == 2) {\n            figure = abi.encodePacked(\n                abi.encodePacked(\n                    '<defs>',\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_1\" x1=\"410\" y1=\"180\" x2=\"565\" y2=\"70\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop offset=\"0.1\" stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"0.9\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_2\" x1=\"370\" y1=\"346\" x2=\"480\" y2=\"205\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop offset=\"0.06\" stop-color=\"', colorInfo.patternColors[2], '\" />',\n                                '<stop offset=\"0.9\" stop-color=\"', colorInfo.patternColors[3], '\" />',\n                            '</linearGradient>'\n                        ),\n                    '</defs>'\n                ),\n                abi.encodePacked(\n                    '<g mask=\"url(#m_3525_1)\">',\n                        '<rect x=\"300\" width=\"300\" height=\"400\" fill=\"', colorInfo.backgroundColor, '\" />',\n                        '<circle cx=\"489\" cy=\"125\" r=\"77\" fill=\"url(#p_3525_1)\"></circle>',\n                        '<circle cx=\"411\" cy=\"269\" r=\"77\" fill=\"url(#p_3525_2)\"></circle>',\n                    '</g>'\n                )\n            );\n\n        } else if (colorInfo.strategyCount == 3) {\n            figure = abi.encodePacked(\n                abi.encodePacked(\n                    '<defs>',\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_1\" x1=\"330\" y1=\"340\" x2=\"460\" y2=\"60\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_2\" x1=\"450\" y1=\"220\" x2=\"560\" y2=\"60\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[2], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[3], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_3\" x1=\"460\" y1=\"340\" x2=\"550\" y2=\"240\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[4], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[5], '\" />',\n                            '</linearGradient>'\n                        ),\n                    '</defs>'\n                ),\n                abi.encodePacked(\n                    '<g mask=\"url(#m_3525_1)\">',\n                        '<rect x=\"300\" width=\"300\" height=\"400\" fill=\"', colorInfo.backgroundColor, '\" />',\n                        '<path d=\"M333 292A55 55 0 0 0 443 292V108A55 55 0 0 0 333 108Z\" fill=\"url(#p_3525_1)\"/>',\n                        '<path d=\"M457 165A55 55 0 0 0 567 165V108A55 55 0 0 0 457 108Z\" fill=\"url(#p_3525_2)\"/>',\n                        '<circle cx=\"512\" cy=\"292\" r=\"55\" fill=\"url(#p_3525_3)\"></circle>',\n                    '</g>'\n                )\n            );\n\n        } else {\n            figure = abi.encodePacked(\n                abi.encodePacked(\n                    '<defs>',\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_1\" x1=\"410\" y1=\"40\" x2=\"360\" y2=\"140\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_2\" x1=\"585\" y1=\"125\" x2=\"460\" y2=\"-14\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_3\" x1=\"315\" y1=\"200\" x2=\"440\" y2=\"65\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_4\" x1=\"490\" y1=\"120\" x2=\"540\" y2=\"220\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_5\" x1=\"410\" y1=\"195\" x2=\"360\" y2=\"300\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_6\" x1=\"585\" y1=\"280\" x2=\"460\" y2=\"140\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_7\" x1=\"315\" y1=\"360\" x2=\"440\" y2=\"220\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                        abi.encodePacked(\n                            '<linearGradient id=\"p_3525_8\" x1=\"490\" y1=\"270\" x2=\"540\" y2=\"375\" gradientUnits=\"userSpaceOnUse\">',\n                                '<stop stop-color=\"', colorInfo.patternColors[0], '\" />',\n                                '<stop offset=\"1\" stop-color=\"', colorInfo.patternColors[1], '\" />',\n                            '</linearGradient>'\n                        ),\n                    '</defs>'\n                ),\n                abi.encodePacked(\n                    '<g mask=\"url(#m_3525_1)\">',\n                        '<rect x=\"300\" width=\"300\" height=\"400\" fill=\"', colorInfo.backgroundColor, '\" />',\n                        '<circle cx=\"367\" cy=\"83\" r=\"35\" fill=\"url(#p_3525_1)\"></circle>',\n                        '<path d=\"M444 48A35 35 0 0 0 444 118H533A 35 35 0 0 0 533 48Z\" fill=\"url(#p_3525_2)\" />',\n                        '<path d=\"M367 126A35 35 0 0 0 367 196H456A 35 35 0 0 0 456 126Z\" fill=\"url(#p_3525_3)\" />',\n                        '<circle cx=\"533\" cy=\"161\" r=\"35\" fill=\"url(#p_3525_4)\"></circle>',\n                        '<circle cx=\"367\" cy=\"239\" r=\"35\" fill=\"url(#p_3525_5)\"></circle>',\n                        '<path d=\"M444 204A35 35 0 0 0 444 274H533A 35 35 0 0 0 533 204Z\" fill=\"url(#p_3525_6)\" />',\n                        '<path d=\"M367 282A35 35 0 0 0 367 352H456A 35 35 0 0 0 456 282Z\" fill=\"url(#p_3525_7)\" />',\n                        '<circle cx=\"533\" cy=\"317\" r=\"35\" fill=\"url(#p_3525_8)\"></circle>',\n                    '</g>'\n                )\n            );\n        }\n\n        return string(abi.encodePacked(outline, figure));\n    }\n\n    function setSVGColorInfo(address sft_, uint256 slot_, SVGColorInfo calldata svgColorInfo_) external virtual onlyOwner {\n        _setSVGColorInfo(sft_, slot_, svgColorInfo_);\n    }\n\n    function getSVGColorInfo(address sft_, uint256 slot_) public view virtual returns (SVGColorInfo memory colorInfo) {\n        (address shareAddress, uint256 shareSlot) = _getShareAddressAndSlot(sft_, slot_);\n        colorInfo = _svgColorInfos[shareAddress][shareSlot];\n        if (colorInfo.strategyCount == 0) {\n            colorInfo = _svgColorInfos[address(0)][0];\n        }\n    }\n\n    function _setSVGColorInfo(address sft_, uint256 slot_, SVGColorInfo calldata svgColorInfo_) internal virtual {\n        _svgColorInfos[sft_][slot_] = svgColorInfo_;\n        emit SetSVGColorInfo(sft_, slot_, svgColorInfo_);\n    }\n\n    function _getShareAddressAndSlot(address sftAddress_, uint256 sftSlot_) \n        internal \n        view \n        virtual \n        returns (address, uint256) \n    {\n        string memory contractType = BaseSFTDelegateUpgradeable(sftAddress_).contractType();\n        if (keccak256(abi.encodePacked(contractType)) == keccak256(abi.encodePacked(\"Open Fund Shares\"))) {\n            return (sftAddress_, sftSlot_);\n        } else {\n            OpenFundRedemptionConcrete concrete = OpenFundRedemptionConcrete(OpenFundRedemptionDelegate(sftAddress_).concrete());\n            OpenFundRedemptionConcrete.RedeemInfo memory redeemInfo = concrete.getRedeemInfo(sftSlot_);\n            (OpenFundMarketStorage.PoolSFTInfo memory poolSFTInfo, ,,,,,,,,) = OpenFundMarketStorage(_market()).poolInfos(redeemInfo.poolId);\n            return (poolSFTInfo.openFundShare, poolSFTInfo.openFundShareSlot);\n        }\n    }\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory addressNames) {\n\t\taddressNames = new bytes32[](1);\n\t\taddressNames[0] = CONTRACT_OPEN_FUND_MARKET;\n\t}\n\n\tfunction _market() internal view virtual returns (address) {\n\t\treturn getRequiredAddress(CONTRACT_OPEN_FUND_MARKET, \"SVG_BGG: Market not set\");\n\t}\n\n}"
    }
  }
}}