{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"ITokenLock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface ITokenLock {\n    function setERC20(address tokenAddress) external ;\n    function unLock() external;\n    function getReceiverIndex() external view returns (uint256);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"TokenLock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\nimport \"./TokenLockConst.sol\";\nimport \"./ITokenLock.sol\";\n\ncontract TokenLock is Ownable, TokenLockConst, ITokenLock {\n\n    event UnLock(address sender, address receiver, uint256 amount);\n\n    uint8 public immutable _receiverIndex; \n    IERC20 public _erc20Token = IERC20(address(0)); \n    uint256 public _totalUnLock = 0; \n    uint256[] public _scheduleAmount; \n    address public immutable _multiSigWallet;\n\n    constructor(uint8 receiverIndex, address walletSigAddress) Ownable(msg.sender) {\n        require(walletSigAddress != address(0), \"walletSigAddress is null\");\n        require(receiverIndex \u003e= 0 \u0026\u0026 receiverIndex \u003c= 6, \"The scope of the receiverIndex variable is incorrect.\");\n        require(isSorted(SCHEDULE_TIMES), \"The array is not sorted.\");\n        require(TokenLockConst.SCHEDULE_TIMES.length == TokenLockConst.CONST_SCHEDULE_COUNT, \"The array is not sorted.\");\n        uint256[] memory amounts = TokenLockConst.SCHEDULE_AMOUNT[receiverIndex];\n        require(amounts.length == TokenLockConst.CONST_SCHEDULE_COUNT, \"Array is incorrect.\");\n       \n        _receiverIndex = receiverIndex; \n\n        _scheduleAmount = new uint256[](amounts.length);\n        for (uint8 i = 0; i \u003c amounts.length; i++) {\n            _scheduleAmount[i] = amounts[i];\n        }\n\n        _multiSigWallet = walletSigAddress;\n    }\n\n    function isSorted(uint256[] memory arr) internal pure returns (bool) {\n        for (uint i = 1; i \u003c arr.length; i++) {\n            if (arr[i] \u003c arr[i - 1]) {\n                return false; \n            }\n        }\n        return true; \n    }\n\n    function setERC20(address tokenAddress) public virtual onlyOwner {\n        require(tokenAddress != address(0), \"ERC20 is null\");\n        require(_erc20Token == IERC20(address(0)), \"It\u0027s already been assigned\");\n        _erc20Token = IERC20(tokenAddress); \n    }\n\n    function unLock() public virtual {\n        require(_multiSigWallet == msg.sender, \"multiSigWallet is wrong\");\n\n        uint256 sum = 0;\n\n        for (uint256 i = 0; i \u003c TokenLockConst.SCHEDULE_TIMES.length; i++) {\n            uint256 ts = TokenLockConst.SCHEDULE_TIMES[i];\n            if(block.timestamp \u003c ts) {\n                break;\n            } \n\n            uint256 balance = _scheduleAmount[i];\n            if(balance \u003e 0) {\n                sum += _scheduleAmount[i];\n                _scheduleAmount[i] = 0;\n            }\n        }\n\n        if(sum \u003e 0) {\n            _totalUnLock += sum;\n            _erc20Token.transfer(TokenLockConst.CONST_RECEIVERS[_receiverIndex], sum);\n            emit UnLock(address(this), TokenLockConst.CONST_RECEIVERS[_receiverIndex], sum);\n        }\n\n    }\n\n    function getDataUnLock() public pure returns (bytes memory) {\n        return abi.encodeWithSignature(\"unLock()\");\n    }\n\n    function getReceiver() public view returns (address) {\n        return TokenLockConst.CONST_RECEIVERS[_receiverIndex];\n    }\n\n    function tokenBalance() public view returns (uint256) {\n        return _erc20Token.balanceOf(address(this));\n    }\n\n    function totalLockAmount() public view returns (uint256) {\n        uint256 balance = 0;\n        for (uint256 i = 0; i \u003c _scheduleAmount.length; i++) {\n            balance += _scheduleAmount[i];\n        }\n        return balance;\n    }\n\n    function getReceiverIndex() public view virtual returns (uint256) {\n        return _receiverIndex;\n    }\n}\n"},"TokenLockConst.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract TokenLockConst {\n\n    address[] CONST_RECEIVERS = \n        [0x72Fbc38d133E4d0E1B55278134Dbbe7Ba4539Bd1, // 0\n        0x00FEfd30419B2A846aEFF1956735d1Be373a4129, // 1\n        0x3cE5Cc576D7E6b301051938afecF01B13718bAEc, // 2\n        0x86D191b243654B5b3c43B92ED48BF52d377cAEe8, // 3\n        0x0559f10ba108b43D1206e3f78C2382C3911135a2, // 4\n        0x92Cd73d498632500f729d7423511b4fd49344abF, // 5\n        0xbA3D728d9fBB03Cbd0c3778f0b66992FC536c194  // 6\n    ];\n\n    uint256 CONST_SCHEDULE_COUNT = 49; \n    \n    uint256[] SCHEDULE_TIMES = [1, \n        1705276800, 1707955200, 1710460800, 1713139200, 1715731200, \n        1718409600, 1721001600, 1723680000, 1726358400, 1728950400, \n        1731628800, 1734220800, 1736899200, 1739577600, 1741996800, \n        1744675200, 1747267200, 1749945600, 1752537600, 1755216000, \n        1757894400, 1760486400, 1763164800, 1765756800, 1768435200, \n        1771113600, 1773532800, 1776211200, 1778803200, 1781481600, \n        1784073600, 1786752000, 1789430400, 1792022400, 1794700800, \n        1797292800, 1799971200, 1802649600, 1805068800, 1807747200, \n        1810339200, 1813017600, 1815609600, 1818288000, 1820966400, \n        1823558400, 1826236800, 1828828800];\n\n    uint256[][] SCHEDULE_AMOUNT =  [\n        [\n            3600000000000000,               0,               0,\n                        0,               0,               0,\n                        0,               0,               0,\n                        0,               0,               0,\n                        0, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000, 600000000000000, 600000000000000,\n            600000000000000,               0,               0,\n                        0,               0,               0,\n                        0,               0,               0,\n                        0,               0,               0,\n                        0\n        ],\n        [\n            1350000000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000, 534375000000000, 534375000000000,\n            534375000000000\n        ],\n        [\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000, 1875000000000000,\n            1875000000000000, 1875000000000000,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0\n        ],\n        [\n            7950000000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000, 3146875000000000, 3146875000000000,\n            3146875000000000\n        ],\n        [\n            1500000000000000, 0, 0,\n                        0, 0, 0,\n            1500000000000000, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0, 0, 0,\n                        0\n        ],\n        [\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000, 1250000000000000, 1250000000000000,\n            1250000000000000,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0,                0,                0,\n                        0\n        ],\n        [\n            900000000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000, 356250000000000, 356250000000000,\n            356250000000000\n        ]\n    ];\n}\n"}}