{{
  "language": "Solidity",
  "sources": {
    "VotingPowerAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"EnumerableSet.sol\";\n\nimport \"ImmutableOwner.sol\";\n\nimport \"Errors.sol\";\nimport \"ScaledMath.sol\";\n\nimport \"IVotingPowerAggregator.sol\";\nimport \"IVault.sol\";\n\ncontract VotingPowerAggregator is IVotingPowerAggregator, ImmutableOwner {\n    using ScaledMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet internal _vaultAddresses;\n    mapping(address => DataTypes.VaultWeightConfiguration) internal _vaults;\n\n    uint256 public scheduleStartsAt;\n    uint256 public scheduleEndsAt;\n\n    constructor(\n        address _owner,\n        DataTypes.VaultWeightSchedule memory initialSchedule\n    ) ImmutableOwner(_owner) {\n        _setSchedule(initialSchedule);\n    }\n\n    function createVaultsSnapshot()\n        external\n        view\n        returns (DataTypes.VaultSnapshot[] memory snapshots)\n    {\n        uint256 len = _vaultAddresses.length();\n        snapshots = new DataTypes.VaultSnapshot[](len);\n        for (uint256 i = 0; i < len; i++) {\n            snapshots[i] = _makeVaultSnapshot(_vaultAddresses.at(i));\n        }\n    }\n\n    function _makeVaultSnapshot(\n        address vaultAddress\n    ) internal view returns (DataTypes.VaultSnapshot memory) {\n        return\n            DataTypes.VaultSnapshot({\n                vaultAddress: vaultAddress,\n                weight: getVaultWeight(vaultAddress),\n                totalVotingPower: IVault(vaultAddress).getTotalRawVotingPower()\n            });\n    }\n\n    function getVotingPower(\n        address account,\n        uint256 timestamp\n    ) external view returns (DataTypes.VaultVotingPower[] memory) {\n        return getVotingPower(account, timestamp, _vaultAddresses.values());\n    }\n\n    function getVotingPower(\n        address account,\n        uint256 timestamp,\n        address[] memory vaults\n    ) public view returns (DataTypes.VaultVotingPower[] memory) {\n        DataTypes.VaultVotingPower[]\n            memory userVotingPower = new DataTypes.VaultVotingPower[](\n                vaults.length\n            );\n        for (uint256 i; i < vaults.length; i++) {\n            IVault vault = IVault(vaults[i]);\n            uint256 userRawVotingPower = vault.getRawVotingPower(\n                account,\n                timestamp\n            );\n            userVotingPower[i] = DataTypes.VaultVotingPower({\n                vaultAddress: address(vault),\n                votingPower: userRawVotingPower\n            });\n        }\n\n        return userVotingPower;\n    }\n\n    function calculateWeightedPowerPct(\n        DataTypes.VaultVotingPower[] calldata vaultVotingPowers\n    ) external view returns (uint256) {\n        uint256 votingPowerPct;\n\n        for (uint256 i; i < vaultVotingPowers.length; i++) {\n            DataTypes.VaultVotingPower memory vaultVP = vaultVotingPowers[i];\n            uint256 vaultWeight = getVaultWeight(vaultVP.vaultAddress);\n            if (vaultWeight > 0 && vaultVP.votingPower > 0) {\n                uint256 tvp = IVault(vaultVP.vaultAddress)\n                    .getTotalRawVotingPower();\n                votingPowerPct += vaultVP.votingPower.divDown(tvp).mulDown(\n                    vaultWeight\n                );\n            }\n        }\n\n        return votingPowerPct;\n    }\n\n    function listVaults()\n        external\n        view\n        returns (DataTypes.VaultWeight[] memory)\n    {\n        uint256 length = _vaultAddresses.length();\n        DataTypes.VaultWeight[] memory vaults = new DataTypes.VaultWeight[](\n            length\n        );\n        for (uint256 i; i < length; i++) {\n            DataTypes.VaultWeightConfiguration memory conf = _vaults[\n                _vaultAddresses.at(i)\n            ];\n            vaults[i].vaultAddress = conf.vaultAddress;\n            vaults[i].initialWeight = conf.initialWeight;\n            vaults[i].targetWeight = conf.targetWeight;\n\n            uint256 vaultWeight = getVaultWeight(conf.vaultAddress);\n            vaults[i].currentWeight = vaultWeight;\n        }\n\n        return vaults;\n    }\n\n    function blockTimestamp() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    function getVaultWeight(address vault) public view returns (uint256) {\n        DataTypes.VaultWeightConfiguration memory vaultWeight = _vaults[vault];\n\n        if (blockTimestamp() > scheduleEndsAt) {\n            return vaultWeight.targetWeight;\n        }\n\n        if (blockTimestamp() < scheduleStartsAt) {\n            return vaultWeight.initialWeight;\n        }\n\n        uint256 scheduleElapsedPct = (blockTimestamp() - scheduleStartsAt)\n            .divDown(scheduleEndsAt - scheduleStartsAt);\n\n        uint256 currentWeight;\n        if (vaultWeight.targetWeight > vaultWeight.initialWeight) {\n            uint256 absWeightChange = vaultWeight.targetWeight -\n                vaultWeight.initialWeight;\n            currentWeight =\n                vaultWeight.initialWeight +\n                absWeightChange.mulDown(scheduleElapsedPct);\n        } else {\n            uint256 absWeightChange = vaultWeight.initialWeight -\n                vaultWeight.targetWeight;\n            currentWeight =\n                vaultWeight.initialWeight -\n                absWeightChange.mulDown(scheduleElapsedPct);\n        }\n        return currentWeight;\n    }\n\n    function setSchedule(\n        DataTypes.VaultWeightSchedule calldata schedule\n    ) external onlyOwner {\n        _setSchedule(schedule);\n    }\n\n    function _setSchedule(\n        DataTypes.VaultWeightSchedule memory schedule\n    ) internal {\n        require(\n            schedule.endsAt > schedule.startsAt,\n            \"schedule must end after it begins\"\n        );\n\n        scheduleStartsAt = schedule.startsAt;\n        scheduleEndsAt = schedule.endsAt;\n\n        _removeAllVaults();\n\n        uint256 totalInitialWeight;\n        uint256 totalTargetWeight;\n\n        for (uint256 i; i < schedule.vaults.length; i++) {\n            DataTypes.VaultWeightConfiguration memory vault = schedule.vaults[\n                i\n            ];\n            _addVault(vault);\n            totalInitialWeight += vault.initialWeight;\n            totalTargetWeight += vault.targetWeight;\n        }\n\n        if (totalInitialWeight != ScaledMath.ONE)\n            revert Errors.InvalidTotalWeight(totalInitialWeight);\n\n        if (totalTargetWeight != ScaledMath.ONE)\n            revert Errors.InvalidTotalWeight(totalTargetWeight);\n    }\n\n    function _addVault(\n        DataTypes.VaultWeightConfiguration memory vault\n    ) internal {\n        if (!_vaultAddresses.add(vault.vaultAddress))\n            revert Errors.DuplicatedVault(vault.vaultAddress);\n        _vaults[vault.vaultAddress] = vault;\n    }\n\n    function _removeAllVaults() internal {\n        uint256 length = _vaultAddresses.length();\n        for (uint256 i; i < length; i++) {\n            address vaultAddress = _vaultAddresses.at(0);\n            _vaultAddresses.remove(vaultAddress);\n            delete _vaults[vaultAddress];\n        }\n    }\n}\n"
    },
    "EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "ImmutableOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"Errors.sol\";\n\ncontract ImmutableOwner {\n    address public immutable owner;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert Errors.NotAuthorized(msg.sender, owner);\n        _;\n    }\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n}\n"
    },
    "Errors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nlibrary Errors {\n    error DuplicatedVault(address vault);\n    error InvalidTotalWeight(uint256 totalWeight);\n    error NotAuthorized(address actual, address expected);\n    error InvalidVotingPowerUpdate(\n        uint256 actualTotalPower,\n        uint256 givenTotalPower\n    );\n    error MultisigSunset();\n\n    error ZeroDivision();\n}\n"
    },
    "ScaledMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nlibrary ScaledMath {\n    uint256 internal constant ONE = 1e18;\n\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * b) / ONE;\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * ONE) / b;\n    }\n\n    function changeScale(\n        uint256 a,\n        uint256 from,\n        uint256 to\n    ) internal pure returns (uint256) {\n        if (from == to) return a;\n        else if (from < to) return a * 10 ** (to - from);\n        else return a / 10 ** (from - to);\n    }\n}\n"
    },
    "IVotingPowerAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"DataTypes.sol\";\n\ninterface IVotingPowerAggregator {\n    function createVaultsSnapshot()\n        external\n        view\n        returns (DataTypes.VaultSnapshot[] memory snapshots);\n\n    function getVotingPower(\n        address account,\n        uint256 timestamp\n    ) external view returns (DataTypes.VaultVotingPower[] memory);\n\n    function getVotingPower(\n        address account,\n        uint256 timestamp,\n        address[] memory vaults\n    ) external view returns (DataTypes.VaultVotingPower[] memory);\n\n    function calculateWeightedPowerPct(\n        DataTypes.VaultVotingPower[] calldata vaultVotingPowers\n    ) external view returns (uint256);\n\n    function listVaults()\n        external\n        view\n        returns (DataTypes.VaultWeight[] memory);\n\n    function getVaultWeight(address vault) external view returns (uint256);\n\n    function setSchedule(\n        DataTypes.VaultWeightSchedule calldata schedule\n    ) external;\n}\n"
    },
    "DataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"ITierStrategy.sol\";\nimport \"EnumerableMap.sol\";\n\nlibrary DataTypes {\n    enum Status {\n        Undefined,\n        Active,\n        Rejected,\n        Queued,\n        Executed,\n        Vetoed\n    }\n\n    struct ProposalAction {\n        address target;\n        bytes data;\n    }\n\n    struct Proposal {\n        uint64 createdAt;\n        uint64 executableAt;\n        uint64 votingEndsAt;\n        uint64 voteThreshold;\n        uint64 quorum;\n        uint16 id;\n        uint8 actionLevel;\n        address proposer;\n        Status status;\n        ProposalAction[] actions;\n    }\n\n    struct PendingWithdrawal {\n        uint256 id;\n        uint256 withdrawableAt;\n        uint256 amount;\n        address to;\n        address delegate;\n    }\n\n    struct VaultWeightSchedule {\n        VaultWeightConfiguration[] vaults;\n        uint256 startsAt;\n        uint256 endsAt;\n    }\n\n    struct VaultWeightConfiguration {\n        address vaultAddress;\n        uint256 initialWeight;\n        uint256 targetWeight;\n    }\n\n    struct VaultWeight {\n        address vaultAddress;\n        uint256 currentWeight;\n        uint256 initialWeight;\n        uint256 targetWeight;\n    }\n\n    struct VaultVotingPower {\n        address vaultAddress;\n        uint256 votingPower;\n    }\n\n    struct Tier {\n        uint64 quorum;\n        uint64 proposalThreshold;\n        uint64 voteThreshold;\n        uint32 timeLockDuration;\n        uint32 proposalLength;\n        uint8 actionLevel;\n    }\n\n    struct EmergencyRecoveryProposal {\n        uint64 createdAt;\n        uint64 completesAt;\n        Status status;\n        bytes payload;\n        EnumerableMap.AddressToUintMap vetos;\n    }\n\n    enum Ballot {\n        Undefined,\n        For,\n        Against,\n        Abstain\n    }\n\n    struct VoteTotals {\n        VaultVotingPower[] _for;\n        VaultVotingPower[] against;\n        VaultVotingPower[] abstentions;\n    }\n\n    struct VaultSnapshot {\n        address vaultAddress;\n        uint256 weight;\n        uint256 totalVotingPower;\n    }\n\n    enum ProposalOutcome {\n        Undefined,\n        QuorumNotMet,\n        ThresholdNotMet,\n        Successful\n    }\n\n    struct LimitUpgradeabilityParameters {\n        uint8 actionLevelThreshold;\n        uint256 emaThreshold;\n        uint256 minBGYDSupply;\n        ITierStrategy tierStrategy;\n    }\n\n    struct Delegation {\n        address delegate;\n        uint256 amount;\n    }\n}\n"
    },
    "ITierStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"DataTypes.sol\";\n\ninterface ITierStrategy {\n    function getTier(\n        bytes calldata payload\n    ) external view returns (DataTypes.Tier memory);\n}\n"
    },
    "EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\nimport \"EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n}\n"
    },
    "IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"VotingPowerHistory.sol\";\n\ninterface IVault {\n    function getRawVotingPower(address account) external view returns (uint256);\n\n    function getCurrentRecord(\n        address account\n    ) external view returns (VotingPowerHistory.Record memory);\n\n    function getRawVotingPower(\n        address account,\n        uint256 timestamp\n    ) external view returns (uint256);\n\n    function getTotalRawVotingPower() external view returns (uint256);\n\n    function getVaultType() external view returns (string memory);\n}\n"
    },
    "VotingPowerHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"ScaledMath.sol\";\n\nlibrary VotingPowerHistory {\n    using VotingPowerHistory for History;\n    using VotingPowerHistory for Record;\n    using ScaledMath for uint256;\n\n    struct Record {\n        uint256 at;\n        uint256 baseVotingPower;\n        uint256 multiplier;\n        int256 netDelegatedVotes;\n    }\n\n    function zeroRecord() internal pure returns (Record memory) {\n        return\n            Record({\n                at: 0,\n                baseVotingPower: 0,\n                multiplier: ScaledMath.ONE,\n                netDelegatedVotes: 0\n            });\n    }\n\n    function total(Record memory record) internal pure returns (uint256) {\n        return\n            uint256(\n                int256(record.baseVotingPower.mulDown(record.multiplier)) +\n                    record.netDelegatedVotes\n            );\n    }\n\n    struct History {\n        mapping(address => Record[]) votes;\n        mapping(address => mapping(address => uint256)) _delegations;\n        mapping(address => uint256) _delegatedToOthers;\n        mapping(address => uint256) _delegatedToSelf;\n    }\n\n    event VotesDelegated(address from, address to, uint256 amount);\n    event VotesUndelegated(address from, address to, uint256 amount);\n\n    function updateVotingPower(\n        History storage history,\n        address for_,\n        uint256 baseVotingPower,\n        uint256 multiplier,\n        int256 netDelegatedVotes\n    ) internal returns (Record memory) {\n        Record[] storage votesFor = history.votes[for_];\n        Record memory updatedRecord = Record({\n            at: block.timestamp,\n            baseVotingPower: baseVotingPower,\n            multiplier: multiplier,\n            netDelegatedVotes: netDelegatedVotes\n        });\n        Record memory lastRecord = history.currentRecord(for_);\n        if (lastRecord.at == block.timestamp && votesFor.length > 0) {\n            votesFor[votesFor.length - 1] = updatedRecord;\n        } else {\n            history.votes[for_].push(updatedRecord);\n        }\n        return updatedRecord;\n    }\n\n    function getVotingPower(\n        History storage history,\n        address for_,\n        uint256 at\n    ) internal view returns (uint256) {\n        (, Record memory record) = binarySearch(history.votes[for_], at);\n        return record.total();\n    }\n\n    function currentRecord(\n        History storage history,\n        address for_\n    ) internal view returns (Record memory) {\n        Record[] memory records = history.votes[for_];\n        if (records.length == 0) {\n            return zeroRecord();\n        } else {\n            return records[records.length - 1];\n        }\n    }\n\n    function binarySearch(\n        Record[] memory records,\n        uint256 at\n    ) internal view returns (bool found, Record memory) {\n        return _binarySearch(records, at, 0, records.length);\n    }\n\n    function _binarySearch(\n        Record[] memory records,\n        uint256 at,\n        uint256 startIdx,\n        uint256 endIdx\n    ) internal view returns (bool found, Record memory) {\n        if (startIdx >= endIdx) {\n            return (false, zeroRecord());\n        }\n\n        if (endIdx - startIdx == 1) {\n            Record memory rec = records[startIdx];\n            return rec.at <= at ? (true, rec) : (false, zeroRecord());\n        }\n\n        uint256 midIdx = (endIdx + startIdx) / 2;\n        Record memory lowerBound = records[midIdx - 1];\n        Record memory upperBound = records[midIdx];\n        if (lowerBound.at <= at && at < upperBound.at) {\n            return (true, lowerBound);\n        } else if (upperBound.at <= at) {\n            return _binarySearch(records, at, midIdx, endIdx);\n        } else {\n            return _binarySearch(records, at, startIdx, midIdx);\n        }\n    }\n\n    function delegateVote(\n        History storage history,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        Record memory fromCurrent = history.currentRecord(from);\n\n        uint256 availableToDelegate = fromCurrent.baseVotingPower.mulDown(\n            fromCurrent.multiplier\n        ) - history._delegatedToOthers[from];\n        require(\n            availableToDelegate >= amount,\n            \"insufficient balance to delegate\"\n        );\n\n        history._delegatedToSelf[to] += amount;\n        history._delegatedToOthers[from] += amount;\n        history._delegations[from][to] += amount;\n\n        history.updateVotingPower(\n            from,\n            fromCurrent.baseVotingPower,\n            fromCurrent.multiplier,\n            history.netDelegatedVotingPower(from)\n        );\n        Record memory toCurrent = history.currentRecord(to);\n        history.updateVotingPower(\n            to,\n            toCurrent.baseVotingPower,\n            toCurrent.multiplier,\n            history.netDelegatedVotingPower(to)\n        );\n\n        emit VotesDelegated(from, to, amount);\n    }\n\n    function undelegateVote(\n        History storage history,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        require(\n            history._delegations[from][to] >= amount,\n            \"user has not delegated enough to delegate\"\n        );\n\n        history._delegatedToSelf[to] -= amount;\n        history._delegatedToOthers[from] -= amount;\n        history._delegations[from][to] -= amount;\n\n        Record memory fromCurrent = history.currentRecord(from);\n        history.updateVotingPower(\n            from,\n            fromCurrent.baseVotingPower,\n            fromCurrent.multiplier,\n            history.netDelegatedVotingPower(from)\n        );\n        Record memory toCurrent = history.currentRecord(to);\n        history.updateVotingPower(\n            to,\n            toCurrent.baseVotingPower,\n            toCurrent.multiplier,\n            history.netDelegatedVotingPower(to)\n        );\n\n        emit VotesUndelegated(from, to, amount);\n    }\n\n    function netDelegatedVotingPower(\n        History storage history,\n        address who\n    ) internal view returns (int256) {\n        return\n            int256(history._delegatedToSelf[who]) -\n            int256(history._delegatedToOthers[who]);\n    }\n\n    function delegatedVotingPower(\n        History storage history,\n        address who\n    ) internal view returns (uint256) {\n        return history._delegatedToOthers[who];\n    }\n\n    function updateMultiplier(\n        History storage history,\n        address who,\n        uint256 multiplier\n    ) internal {\n        Record memory current = history.currentRecord(who);\n        require(current.multiplier <= multiplier, \"cannot decrease multiplier\");\n        history.updateVotingPower(\n            who,\n            current.baseVotingPower,\n            multiplier,\n            current.netDelegatedVotes\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "VotingPowerAggregator.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}