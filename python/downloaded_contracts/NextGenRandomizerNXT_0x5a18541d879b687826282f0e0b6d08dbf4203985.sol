{"INextGenAdmins.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface INextGenAdmins {\n\n    // retrieve global admin\n    function retrieveGlobalAdmin(address _address) external view returns(bool);\n\n    // retrieve function admin\n    function retrieveFunctionAdmin(address _address, bytes4 _selector) external view returns(bool);\n\n    // retrieve collection admin\n    function retrieveCollectionAdmin(address _address, uint256 _collectionID) external view returns(bool);\n\n    // retrieve if the contract is admin contract\n    function isAdminContract() external view returns (bool);\n\n    // retrieve owner\n    function owner() external view returns (address);\n\n}"},"INextGenCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface INextGenCore {\n\n    function retrievewereDataAdded(uint256 _collectionID) external view returns(bool);\n\n    function viewTokensIndexMin(uint256 _collectionID) external view returns (uint256);\n\n    function viewTokensIndexMax(uint256 _collectionID) external view returns (uint256);\n\n    function viewCirSupply(uint256 _collectionID) external view returns (uint256);\n\n    function airDropTokens(uint256 mintIndex, address _recipient, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID) external;\n\n    function mint(uint256 mintIndex, address _mintingAddress , address _mintTo, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID, uint256 phase) external;\n\n    function collectionFreezeStatus(uint256 _collectionID) external view returns(bool);\n\n    function viewMaxAllowance(uint256 _collectionID) external view returns (uint256);\n\n    function retrieveTokensMintedALPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\n\n    function retrieveTokensMintedPublicPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\n\n    function viewColIDforTokenID(uint256 _tokenid) external view returns (uint256);\n\n    function burnToMint(uint256 mintIndex, uint256 _burnCollectionID, uint256 _tokenId, uint256 _mintCollectionID, uint256 _saltfun_o, address burner) external;\n\n    function retrieveArtistAddress(uint256 _collectionID) external view returns(address);\n\n    function setTokenHash(uint256 _collectionID, uint256 _mintIndex, bytes32 _hash) external;\n\n    function retrieveTokenHash(uint256 _tokenid) external view returns(bytes32);\n\n}"},"IXRandoms.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface IXRandoms {\n\n    function randomNumber() external view returns (uint256);\n\n    function randomWord() external view returns (string memory);\n    \n}"},"RandomizerNXT.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *\n *  @title: NextGen 6529 - NXT Randomizer Contract\n *  @date: 20-December-2023\n *  @version: 1.5\n *  @author: 6529 team\n */\n\npragma solidity ^0.8.19;\n\nimport \"./IXRandoms.sol\";\nimport \"./INextGenAdmins.sol\";\nimport \"./INextGenCore.sol\";\n\ncontract NextGenRandomizerNXT {\n\n    IXRandoms public randoms;\n    INextGenAdmins private adminsContract;\n    INextGenCore public gencoreContract;\n    address gencore;\n\n    constructor(address _randoms, address _admin, address _gencore) {\n        randoms = IXRandoms(_randoms);\n        adminsContract = INextGenAdmins(_admin);\n        gencore = _gencore;\n        gencoreContract = INextGenCore(_gencore);\n    }\n\n    // certain functions can only be called by a global or function admin\n\n    modifier FunctionAdminRequired(bytes4 _selector) {\n      require(adminsContract.retrieveFunctionAdmin(msg.sender, _selector) == true || adminsContract.retrieveGlobalAdmin(msg.sender) == true , \"Not allowed\");\n      _;\n    }\n\n    // update contracts if needed\n\n    function updateRandomsContract(address _randoms) public FunctionAdminRequired(this.updateRandomsContract.selector) {\n        randoms = IXRandoms(_randoms);\n    }\n\n    function updateAdminContract(address _newadminsContract) public FunctionAdminRequired(this.updateAdminContract.selector) {\n        require(INextGenAdmins(_newadminsContract).isAdminContract() == true, \"Contract is not Admin\");\n        adminsContract = INextGenAdmins(_newadminsContract);\n    }\n\n    function updateCoreContract(address _gencore) public FunctionAdminRequired(this.updateCoreContract.selector) { \n        gencore = _gencore;\n        gencoreContract = INextGenCore(_gencore);\n    }\n\n    // function that calculates the random hash and returns it to the gencore contract\n    function calculateTokenHash(uint256 _collectionID, uint256 _mintIndex, uint256 _saltfun_o) public {\n        require(msg.sender == gencore);\n        bytes32 hash = keccak256(abi.encodePacked(_mintIndex, blockhash(block.number - 1), randoms.randomNumber(), randoms.randomWord()));\n        gencoreContract.setTokenHash(_collectionID, _mintIndex, hash);\n    }\n\n    // get randomizer contract status\n    function isRandomizerContract() external view returns (bool) {\n        return true;\n    }\n    \n}"}}