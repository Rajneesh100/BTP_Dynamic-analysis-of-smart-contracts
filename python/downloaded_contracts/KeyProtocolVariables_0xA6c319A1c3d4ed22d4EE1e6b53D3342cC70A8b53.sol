{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/KeyProtocolVariables.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"./interfaces/IKeyProtocolVariables.sol\";\n\ncontract KeyProtocolVariables is IKeyProtocolVariables {\n    address public dao;\n\n    bool public preLaunch = true;\n\n    //Commisions\n    uint256 public xTokenMintFee = 300; // 3%\n    uint256 public cTokenSellFee = 1000; // 10%\n    uint256 public payRentFee = 150; // 1.5%\n\n    uint256 public validatorCommission = 25; // 0.25%\n    uint256 public maxValidatorFee = 1000;\n\n    uint256 public sellXTokenSlippage = 300; //3%\n    uint256 public buyXTokenSlippage = 300; //3%\n\n    uint256 public hedgeFundAllocation = 1500; //15%\n    uint8 public securityDepositMonths = 12; // 12 months\n\n    uint256 public landXOperationsPercentage = 3000;\n    uint256 public landXChoicePercentage = 500;\n    uint256 public lndxHoldersPercentage = 6500;\n\n    // Wallets\n    address public hedgeFundWallet;\n    address public landxOperationalWallet;\n    address public landxChoiceWallet;\n    address public xTokensSecurityWallet;\n    address public validatorCommisionWallet;\n\n    constructor(\n        address _dao,\n        address _hedgeFundWallet,\n        address _landxOperationalWallet,\n        address _landxChoiceWallet,\n        address _xTokensSecurityWallet,\n        address _validatorCommisionWallet\n    ) {\n        dao = _dao;\n\n        require(_hedgeFundWallet != address(0), \"zero address is not allowed\");\n        require(_landxOperationalWallet != address(0), \"zero address is not allowed\");\n        require(_landxChoiceWallet != address(0), \"zero address is not allowed\");\n        require(_xTokensSecurityWallet != address(0), \"zero address is not allowed\");\n        require(_validatorCommisionWallet != address(0), \"zero address is not allowed\");\n\n        hedgeFundWallet = _hedgeFundWallet;\n        landxOperationalWallet = _landxOperationalWallet;\n        landxChoiceWallet = _landxChoiceWallet;\n        xTokensSecurityWallet = _xTokensSecurityWallet;\n        validatorCommisionWallet = _validatorCommisionWallet;\n    }\n\n    function updateXTokenMintFee(uint256 _fee) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_fee < 10000, \"value can't be above 100%\");\n        xTokenMintFee = _fee;\n    }\n\n    function updateCTokenSellFee(uint256 _fee) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_fee < 10000, \"value can't be above 100%\");\n        cTokenSellFee = _fee;\n    }\n\n    function updateValidatorCommission(uint256 _fee) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_fee < 10000, \"value can't be above 100%\");\n        validatorCommission = _fee;\n    }\n\n     function updateMaxValidatorFee(uint256 _fee) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_fee < 10000, \"value can't be above 100%\");\n        maxValidatorFee = _fee;\n    }\n\n    function updateSellXTokenSlippage(uint256 _slippage) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_slippage < 10000, \"value can't be above 100%\");\n        sellXTokenSlippage = _slippage;\n    }\n\n    function updateBuyXTokenSlippage(uint256 _slippage) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_slippage < 10000, \"value can't be above 100%\");\n        buyXTokenSlippage = _slippage;\n    }\n\n    function updatePayRentFee(uint256 _fee) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_fee < 10000, \"value can't be above 100%\");\n        payRentFee = _fee;\n    }\n\n    function updateHedgeFundAllocation(uint256 _allocation) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_allocation < 10000, \"value can't be above 100%\");\n        hedgeFundAllocation = _allocation;\n    }\n\n    function updateSecurityDepositMonths(uint8 _months) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        securityDepositMonths = _months;\n    }\n\n    function updateFeeDistributionPercentage(\n        uint256 _lndxHoldersPercentage,\n        uint256 _landxOperationPercentage\n    ) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(\n            (_lndxHoldersPercentage + _landxOperationPercentage) < 10000,\n            \"inconsistent values\"\n        );\n        lndxHoldersPercentage = _lndxHoldersPercentage;\n        landXOperationsPercentage = _landxOperationPercentage;\n        landXChoicePercentage =\n            10000 -\n            lndxHoldersPercentage -\n            landXOperationsPercentage;\n    }\n\n    function updateHedgeFundWallet(address _wallet) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_wallet != address(0), \"zero address is not allowed\");\n        hedgeFundWallet = _wallet;\n    }\n\n    function updateLandxOperationalWallet(address _wallet) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_wallet != address(0), \"zero address is not allowed\");\n        landxOperationalWallet = _wallet;\n    }\n\n    function updateLandxChoiceWallet(address _wallet) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_wallet != address(0), \"zero address is not allowed\");\n        landxChoiceWallet = _wallet;\n    }\n\n    function updateXTokensSecurityWallet(address _wallet) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_wallet != address(0), \"zero address is not allowed\");\n        xTokensSecurityWallet = _wallet;\n    }\n\n    function updateValidatorCommisionWallet(address _wallet) public {\n        require(msg.sender == dao, \"only dao can change value\");\n        require(_wallet != address(0), \"zero address is not allowed\");\n        validatorCommisionWallet = _wallet;\n    }\n\n    function launch() public {\n        require(msg.sender == dao, \"only dao can change value\");\n        preLaunch = false;\n    }\n}\n"
    },
    "contracts/interfaces/IKeyProtocolVariables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n\ninterface IKeyProtocolVariables {\n    function xTokenMintFee() external view returns (uint256);\n\n    function securityDepositMonths() external view returns (uint8);\n\n    function xTokensSecurityWallet() external view returns (address);\n\n    function landxOperationalWallet() external view returns (address);\n\n    function landxChoiceWallet() external view returns (address);\n\n    function landXOperationsPercentage() external view returns (uint256);\n\n    function landXChoicePercentage() external view returns (uint256);\n\n    function lndxHoldersPercentage() external view returns (uint256);\n\n    function hedgeFundAllocation() external view returns (uint256);\n\n    function hedgeFundWallet() external view returns (address);\n\n    function preLaunch() external view returns (bool);\n\n    function sellXTokenSlippage() external view returns (uint256);\n   \n    function buyXTokenSlippage() external view returns (uint256);  \n\n    function cTokenSellFee() external view returns (uint256);\n\n    function validatorCommission() external view returns (uint256);\n\n    function validatorCommisionWallet() external view returns (address);\n\n    function payRentFee() external view returns (uint256);\n\n    function maxValidatorFee() external view returns (uint256);\n}"
    }
  }
}}