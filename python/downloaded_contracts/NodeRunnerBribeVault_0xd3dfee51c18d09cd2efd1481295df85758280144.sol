{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}"},"draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Standard ERC-20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC-721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can\u0027t be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC-1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport {IERC20} from \"./IERC20.sol\";\r\nimport {IERC20Metadata} from \"./IERC20Metadata.sol\";\r\nimport {Context} from \"./Context.sol\";\r\nimport {IERC20Errors} from \"./draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC-20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the ERC may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it\u0027s overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the ERC. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance \u003c value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value \u003c= fromBalance \u003c= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value \u003c= totalSupply or value \u003c= fromBalance \u003c= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance \u003c value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport {IERC20} from \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"LSDNetworkOwnerBribeVault.sol":{"content":"\r\nimport \"./ERC20.sol\";\r\n\r\ncontract NodeRunnerBribeVault{\r\n    // reentrancyGuard //\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    ///////////////////////\r\n\r\n    struct TokenDeposit{\r\n        uint256 id;\r\n        address token;\r\n        uint256 tokenAmount;\r\n        uint256 tokenToValidatorRatio;\r\n        bool activeClaims;\r\n        uint16 activeClaimsCount;\r\n        uint16 maxClaims;\r\n        uint16 totalClaims;\r\n    }\r\n\r\n    struct DepositClaim{\r\n        uint256[] claimed;\r\n        mapping(uint256 =\u003e uint256) initiatedClaims; // deposit.id =\u003e timestamp\r\n    }\r\n\r\n    event BribeAdded(uint256 indexed bribeId, address indexed sender, uint256 epoch);\r\n    event BribeRemoved(uint256 indexed bribeId, address indexed sender, uint256 epoch);\r\n    event BribeToppedUp(uint256 indexed bribeId, address indexed sender, uint256 epoch);\r\n    event BribeClaimed(uint256 indexed bribeId, address indexed sender, uint256 epoch);\r\n\r\n    event FeeRecipientUpdated(address indexed sender, address newFeeRecipient, address oldFeeRecipient, uint256 epoch);\r\n    event FeePerClaimUpdated(address indexed sender, uint256 newFeePerClaim, uint256 oldFeePerClaim, uint256 epoch);\r\n    event VaultCreated(address indexed sender, uint256 epoch);\r\n\r\n    mapping(string =\u003e TokenDeposit) public deposits; // Maps LSD network ticker to (id,token,amount,ratio,expiration). Only 1 active bribe per validator\r\n    string[] public lsdNetworkNames;\r\n    uint256 public lsdNetworkIndex = 0;\r\n    uint256 public depositIndex = 0;\r\n    mapping(bytes =\u003e DepositClaim) internal claimedDeposits; //uint256[]) public claimedDeposits; // Maps Validator BLS to array of deposit.id\r\n\r\n    mapping(address =\u003e bool) public rewardTokens;\r\n    // [\"0x534D1F5E617e0f72A6b06a04Aa599839AF776A5e\",\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\"0x3d1e5cf16077f349e999d6b21a4f646e83cd90c5\",\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"]\r\n    // [\"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\"0x359599d4032D6540F3bE62E459861f742Ceb851f\",\"0x506C2B850D519065a4005b04b9ceed946A64CB6F\",\"0x14Ab8194a1cB89D941cc5159873aFDaC3C45094d\",\"0x15fB74F4d828C85a1b71Ac1A83f31E1D2B8Beb73\"] // Testnet\r\n    //address public stakehouseUniverse = 0xC38ee0eCc213293757dC5a30Cf253D3f40726E4c; // TO-DO: Replace with mainnet. This is Goerli Stakehouse Universe \r\n    // Mainnet stakehouse universe: 0xC6306C52ea0405D3630249f202751aE3043056bd\r\n\r\n    address public stakehouseUniverse;\r\n    uint256 public bribeLength = 31536000; // 365 days\r\n\r\n    address public feeRecipient;\r\n    uint256 public feePerClaimDivisor = 0;\r\n    uint256 public feePerClaimDivisorMin = 5; // divisor of 5 means highest possible fee is 20%\r\n    address public owner;\r\n\r\n    function setAllowToken(address token, bool allowed) external onlyOwner {\r\n        require(rewardTokens[token] != allowed, \"reward token already configured\");\r\n        rewardTokens[token] = allowed;\r\n    }\r\n\r\n    constructor(address _owner, address _stakehouseUniverse, address _feeRecipient, uint256 _feePerClaimDivisor, address[] memory rewardTokensAllowed) public {\r\n        stakehouseUniverse = _stakehouseUniverse;\r\n        require(_feePerClaimDivisor \u003e= feePerClaimDivisorMin, \"fee is too high\");\r\n        feeRecipient = _feeRecipient;\r\n        feePerClaimDivisor = _feePerClaimDivisor;\r\n        owner = _owner;\r\n        for(uint256 x = 0; x\u003crewardTokensAllowed.length;x++){\r\n            rewardTokens[rewardTokensAllowed[x]] = true;\r\n        }\r\n        emit VaultCreated(msg.sender, block.timestamp);\r\n        emit FeeRecipientUpdated(msg.sender, _feeRecipient, address(0), block.timestamp);\r\n        emit FeePerClaimUpdated(msg.sender, _feePerClaimDivisor, 0, block.timestamp);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOnwer\");\r\n        _;\r\n    }\r\n\r\n    function setFeeRecipient(address newFeeRecipient) public onlyOwner {\r\n        require(newFeeRecipient != feeRecipient, \"same recipient\");\r\n        emit FeeRecipientUpdated(msg.sender, newFeeRecipient, feeRecipient, block.timestamp);\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    function setFeePerClaim(uint256 newFeePerClaim) public onlyOwner {\r\n        require(newFeePerClaim \u003e= feePerClaimDivisor, \"new fee must be lower than existing fee\");\r\n        require(newFeePerClaim \u003e= feePerClaimDivisorMin, \"new fee is too high\");\r\n        emit FeePerClaimUpdated(msg.sender, newFeePerClaim, feePerClaimDivisor, block.timestamp);\r\n        feePerClaimDivisor = newFeePerClaim;\r\n    }\r\n\r\n    function _depositInit(address liquidStakingManager, string calldata lsdNetwork, address msgSender) internal {\r\n        (, bytes memory dao) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"dao()\"));\r\n        (, bytes memory stakehouseTicker) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"stakehouseTicker()\"));\r\n        address lsdnOwner = abi.decode(dao, (address));\r\n        string memory lsdnTicker = abi.decode(stakehouseTicker, (string));\r\n        require(keccak256(bytes(lsdnTicker)) == keccak256(bytes(lsdNetwork)), \"lsd network ticker mismatch\");\r\n        require(msgSender == lsdnOwner, \"only lsd owner/dao may deposit bribes\");\r\n    }\r\n\r\n    function depositBribe(address bribeToken, uint256 bribeAmount, uint256 tokenToValidatorRatio, string calldata lsdNetwork, address liquidStakingManager, uint16 maxClaims) public nonReentrant {\r\n        _depositInit(liquidStakingManager, lsdNetwork, msg.sender);\r\n        require(rewardTokens[bribeToken], \"reward token not allowed\");\r\n        uint256 sizeOfBribeTokenContract;\r\n        assembly {\r\n            sizeOfBribeTokenContract := extcodesize(bribeToken)\r\n        }\r\n        //require(msg.sender == getNodeRunnerAddress(validatorBLSKey), \"only node runner may deposit bribes\");\r\n        require(sizeOfBribeTokenContract \u003e 0, \"bribe token is invalid\");\r\n        require(tokenToValidatorRatio\u003e0, \"token to validator ratio must be non-zero\");\r\n        require(bribeAmount\u003e0, \"Bribe amount must be non-zero\");\r\n        bool existingBribe = false;\r\n        bool existingKey = false;\r\n\r\n        TokenDeposit storage deposit = deposits[lsdNetwork];\r\n\r\n        for(uint256 x;x\u003clsdNetworkNames.length;x++){\r\n            if(keccak256(bytes(lsdNetworkNames[x]))==keccak256(bytes(lsdNetwork))){\r\n                existingKey = true;\r\n                if(deposit.tokenAmount \u003e 0){\r\n                    existingBribe = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(existingBribe) // existing validator bribe. Add tokens to bribe total,\r\n        {\r\n            require(deposit.token == bribeToken, \"invalid token for bribe\"); \r\n            require(tokenToValidatorRatio \u003e= deposit.tokenToValidatorRatio, \"tokenToValidatorRatio must be \u003e= existing ratio\"); \r\n            require(maxClaims \u003e= deposit.maxClaims, \"maxClaims must be \u003e= existing maximum\"); \r\n            ERC20(deposit.token).transferFrom(msg.sender, address(this), bribeAmount);\r\n            deposit.tokenAmount = deposit.tokenAmount + bribeAmount;\r\n            deposit.tokenToValidatorRatio = tokenToValidatorRatio; \r\n            deposit.maxClaims = maxClaims;\r\n\r\n            deposits[lsdNetwork] = deposit;\r\n            emit BribeToppedUp(deposit.id, msg.sender, block.timestamp);\r\n        }else{ // new Validator bribe\r\n            ERC20(bribeToken).transferFrom(msg.sender, address(this), bribeAmount);\r\n            uint256 expirationSeconds = block.timestamp + bribeLength;\r\n            deposits[lsdNetwork] = TokenDeposit(depositIndex, bribeToken, bribeAmount, tokenToValidatorRatio, false, 0, maxClaims, 0);\r\n            if(!existingKey){\r\n                lsdNetworkNames.push(lsdNetwork);\r\n                lsdNetworkIndex = lsdNetworkIndex + 1;\r\n            }\r\n            emit BribeAdded(depositIndex, msg.sender, block.timestamp);\r\n            depositIndex = depositIndex + 1;\r\n        }\r\n    }\r\n\r\n    function getNodeRunnerAddress(bytes calldata validatorBLSKey) public view returns (address){\r\n        // Call stakeHouseKnotInfo(bls) on StakehouseUniverse contract\r\n        (, bytes memory data) = stakehouseUniverse.staticcall(abi.encodeWithSignature(\"stakeHouseKnotInfo(bytes)\", validatorBLSKey));\r\n        // Take the 3rd item of the above result (applicant or smart wallet). It\u0027s owner() is the LiquidStakingManager\r\n        (, , address applicant, , , ) = abi.decode(data, (address, address, address, uint256, uint256, bool));\r\n        (, bytes memory liquidStakingManagerBytes) = applicant.staticcall(abi.encodeWithSignature(\"owner()\"));\r\n        address liquidStakingManager = abi.decode(liquidStakingManagerBytes, (address));\r\n        // Call nodeRunnerOfSmartWallet(smartWallet) on the LiquidStakingManager to get the node runner depositor address\r\n        (, bytes memory nodeRunnerBytes) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"nodeRunnerOfSmartWallet(address)\",applicant));\r\n        return abi.decode(nodeRunnerBytes, (address));\r\n    }\r\n\r\n    function withdrawRemainingBribe(address liquidStakingManager) public nonReentrant {\r\n        (, bytes memory stakehouseTicker) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"stakehouseTicker()\"));\r\n        (, bytes memory dao) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"dao()\"));\r\n        string memory lsdnTicker = abi.decode(stakehouseTicker, (string));\r\n        TokenDeposit storage deposit = deposits[lsdnTicker];\r\n        require(deposit.activeClaims == false, \"bribe has active claims initiated\");\r\n        require(deposit.tokenAmount \u003e 0, \"bribe is empty\");\r\n        uint256 amount = deposit.tokenAmount;\r\n        deposit.tokenAmount = 0;\r\n        deposits[lsdnTicker] = deposit;\r\n        emit BribeRemoved(deposit.id, msg.sender, block.timestamp);\r\n        address lsdnOwner = abi.decode(dao, (address));\r\n        ERC20(deposit.token).transfer(lsdnOwner, amount);\r\n        delete deposits[lsdnTicker];\r\n    }\r\n\r\n    function getSavETHandMEVFeesPoolsByBLS(bytes calldata validatorBLSKey) public view returns (address, address){\r\n        // Call stakeHouseKnotInfo(bls) on StakehouseUniverse contract\r\n        (, bytes memory data) = stakehouseUniverse.staticcall(abi.encodeWithSignature(\"stakeHouseKnotInfo(bytes)\", validatorBLSKey));\r\n        // Take the 3rd item of the above result (applicant or smart wallet). It\u0027s owner() is the LiquidStakingManager\r\n        (, , address applicant, , , ) = abi.decode(data, (address, address, address, uint256, uint256, bool));\r\n        (, bytes memory liquidStakingManagerBytes) = applicant.staticcall(abi.encodeWithSignature(\"owner()\"));\r\n        address liquidStakingManager = abi.decode(liquidStakingManagerBytes, (address));\r\n        // Call stakingFundsVault() and savETHVault() on the LiquidStakingManager to get the SavETH and MEVFees Pools\r\n        (, bytes memory savETHPoolBytes) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"savETHVault()\"));\r\n        address savETHPool = abi.decode(savETHPoolBytes, (address));\r\n        (, bytes memory mevFeesPoolBytes) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"stakingFundsVault()\"));\r\n        address mevFeesPool = abi.decode(mevFeesPoolBytes, (address));\r\n        return (savETHPool, mevFeesPool);\r\n    }\r\n\r\n    function getLPTokensByBLS(bytes calldata validatorBLSKey) public view returns (address, address){\r\n        (address savETHPool, address mevFeesPool) = getSavETHandMEVFeesPoolsByBLS(validatorBLSKey);\r\n        (, bytes memory savETHLPBytes) = savETHPool.staticcall(abi.encodeWithSignature(\"lpTokenForKnot(bytes)\", validatorBLSKey));\r\n        address savETHLP = abi.decode(savETHLPBytes, (address));\r\n        (, bytes memory mevFeesLPBytes) = mevFeesPool.staticcall(abi.encodeWithSignature(\"lpTokenForKnot(bytes)\", validatorBLSKey));\r\n        address mevFeesLP = abi.decode(mevFeesLPBytes, (address));\r\n        return (savETHLP, mevFeesLP);\r\n    }\r\n\r\n    function ethDepositsByBLSKeyAndAddress(bytes calldata validatorBLSKey, address depositor) public view returns (uint256){\r\n        (address savETHLP, address mevFeesLP) = getLPTokensByBLS(validatorBLSKey);\r\n        // Call balanceOf() on the LP tokens to determine how much ETH the caller deposited\r\n        (, bytes memory savETHDepositsBytes) = savETHLP.staticcall(abi.encodeWithSignature(\"balanceOf(address)\", depositor));\r\n        uint256 savETHDeposits = abi.decode(savETHDepositsBytes, (uint256));\r\n        (, bytes memory mevFeesDepositsBytes) = mevFeesLP.staticcall(abi.encodeWithSignature(\"balanceOf(address)\", depositor));\r\n        uint256 mevFeesDeposits = abi.decode(mevFeesDepositsBytes, (uint256));\r\n\r\n        return savETHDeposits + mevFeesDeposits;\r\n    }\r\n\r\n    function getValidatorNetwork(bytes calldata validatorBLSKey) public view returns (string memory){\r\n        // Call stakeHouseKnotInfo(bls) on StakehouseUniverse contract\r\n        (, bytes memory data) = stakehouseUniverse.staticcall(abi.encodeWithSignature(\"stakeHouseKnotInfo(bytes)\", validatorBLSKey));\r\n        // Take the 3rd item of the above result (applicant or smart wallet). It\u0027s owner() is the LiquidStakingManager\r\n        (, , address applicant, , , ) = abi.decode(data, (address, address, address, uint256, uint256, bool));\r\n        (, bytes memory liquidStakingManagerBytes) = applicant.staticcall(abi.encodeWithSignature(\"owner()\"));\r\n        address liquidStakingManager = abi.decode(liquidStakingManagerBytes, (address));\r\n        (, bytes memory stakehouseTickerBytes) = liquidStakingManager.staticcall(abi.encodeWithSignature(\"stakehouseTicker()\"));\r\n        return abi.decode(stakehouseTickerBytes, (string));\r\n    }\r\n\r\n    function claimable(bytes calldata validatorBLSKey) public view returns (uint256) {\r\n        string memory validatorNetwork = getValidatorNetwork(validatorBLSKey);\r\n        TokenDeposit storage deposit = deposits[validatorNetwork];\r\n        DepositClaim storage claims = claimedDeposits[validatorBLSKey];\r\n        address nodeRunner = getNodeRunnerAddress(validatorBLSKey);\r\n        require(msg.sender == nodeRunner, \"only node runner may claim\");\r\n        uint256 bribeStart = claims.initiatedClaims[deposit.id];\r\n        require(bribeStart \u003e 0, \"validator hasn\u0027t initiated claim\");\r\n\r\n        //return deposit.tokenToValidatorRatio;\r\n        if (block.timestamp \u003e (bribeStart + bribeLength)) { // 365 days from claim initiation\r\n             return deposit.tokenToValidatorRatio;\r\n        } else {\r\n             uint256 secondsSinceBribeStarted = block.timestamp - bribeStart;\r\n             uint256 rewardsPerSecond = deposit.tokenToValidatorRatio / bribeLength;\r\n             uint256 scaledRewardsAmount = rewardsPerSecond * secondsSinceBribeStarted;\r\n             return scaledRewardsAmount;\r\n        }\r\n    }\r\n\r\n    function totalClaimable(bytes calldata validatorBLSKey) public view returns (uint256){\r\n        string memory validatorNetwork = getValidatorNetwork(validatorBLSKey);\r\n        TokenDeposit storage deposit = deposits[validatorNetwork];\r\n        DepositClaim storage claims = claimedDeposits[validatorBLSKey];\r\n        address nodeRunner = getNodeRunnerAddress(validatorBLSKey);\r\n        require(msg.sender == nodeRunner, \"only node runner may claim\");\r\n        uint256 bribeStart = claims.initiatedClaims[deposit.id];\r\n        require(bribeStart \u003e 0, \"validator has not initiated claim\");\r\n        return deposit.tokenToValidatorRatio;\r\n    }\r\n\r\n    function hasClaimed(string calldata lsdNetwork, bytes calldata validatorBLS) public view returns (bool){\r\n        DepositClaim storage claims = claimedDeposits[validatorBLS];\r\n        TokenDeposit storage deposit = deposits[lsdNetwork];\r\n\r\n        for(uint256 x = 0; x \u003c claims.claimed.length; x++){\r\n            if(claims.claimed[x] == deposit.id){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function initClaim(bytes calldata validatorBLSKey) public nonReentrant {\r\n        uint256 currentTimestamp = block.timestamp;\r\n        string memory validatorNetwork = getValidatorNetwork(validatorBLSKey);\r\n        DepositClaim storage claims = claimedDeposits[validatorBLSKey];\r\n        TokenDeposit storage deposit = deposits[validatorNetwork];\r\n        require(claims.initiatedClaims[deposit.id] == 0, \"already initiated claim\");\r\n        require(deposit.totalClaims \u003c deposit.maxClaims, \"maximum number of claims reached\");\r\n        for (uint256 i = 0; i \u003c claims.claimed.length; i++) {\r\n            require(claims.claimed[i] != deposit.id, \"already claimed\");\r\n        }\r\n        deposit.activeClaims = true;\r\n        deposit.activeClaimsCount = deposit.activeClaimsCount + 1;\r\n        deposit.totalClaims = deposit.totalClaims + 1;\r\n        deposits[validatorNetwork] = deposit;      \r\n        claimedDeposits[validatorBLSKey].initiatedClaims[deposit.id] = currentTimestamp;\r\n    }\r\n\r\n    function claim(bytes calldata validatorBLSKey) public nonReentrant {\r\n        uint256 currentTimestamp = block.timestamp;\r\n        string memory validatorNetwork = getValidatorNetwork(validatorBLSKey);\r\n        // TO-DO: Refactor following lines (already in hasClaimed() which needs to remain public view for dApp\r\n        DepositClaim storage claims = claimedDeposits[validatorBLSKey];\r\n        TokenDeposit storage deposit = deposits[validatorNetwork];\r\n        for (uint256 i = 0; i \u003c claims.claimed.length; i++) {\r\n            require(claims.claimed[i] != deposit.id, \"already claimed\");\r\n        }\r\n        \r\n        uint256 amount = claimable(validatorBLSKey);\r\n\r\n        uint256 feeAmount = 0;\r\n        if(feePerClaimDivisor \u003e 0){\r\n            feeAmount = amount / feePerClaimDivisor;\r\n        }\r\n        require(amount\u003e0,\"nothing to claim\");\r\n        require(deposit.tokenAmount \u003e= amount, \"insufficient bribe balance\"); // tested and working\r\n        //require(deposit.expiration \u003e currentTimestamp, \"bribe expired\"); // ExpirationDate + 28 days\r\n        deposit.activeClaimsCount = deposit.activeClaimsCount - 1;\r\n        if(deposit.activeClaimsCount == 0){\r\n            deposit.activeClaims = false;\r\n        }\r\n        deposit.tokenAmount = deposit.tokenAmount - amount;\r\n        deposits[validatorNetwork] = deposit;\r\n        claimedDeposits[validatorBLSKey].claimed.push(deposit.id);\r\n        ERC20(deposit.token).transfer(msg.sender, amount - feeAmount);\r\n        emit BribeClaimed(deposit.id, msg.sender, block.timestamp);\r\n        if(feeAmount \u003e 0){\r\n            ERC20(deposit.token).transfer(feeRecipient, feeAmount);\r\n        }\r\n        if(deposit.tokenAmount == 0){\r\n            emit BribeRemoved(deposit.id, msg.sender, block.timestamp);\r\n            delete deposits[validatorNetwork];\r\n        }\r\n    }\r\n}"}}