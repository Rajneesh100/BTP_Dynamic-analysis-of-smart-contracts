{"ARSON.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n\nWelcome to $ARSON, bringing the heat without skipping a beat.\n\narsonerc.xyz\nhttps://twitter.com/arsonerc\n@ArsonPortal\n\n*/\n\npragma solidity ^0.8.0;\n\nimport \"ERC20.sol\";\n\ncontract ARSON is ERC20 {\n\n    bool public startTrading;\n    uint256 public TxHoldLimitFactor = 50;  //2%\n    mapping(address =\u003e bool) public locker;\n    uint256 private startArson;\n    uint256 private stopArson;\n\n    constructor(address dvlp_, address mkt_) ERC20(\"ARSON\", \"ARSON\", dvlp_, mkt_){\n        _mint(_msgSender(), 99_000_000_000 * 1e9);\n    }\n\n    function start() public onlyOwner {\n        startTrading = true;\n    }\n\n    function toggleLock(address[] memory accounts) external onlyOwner {\n        for (uint i = 0; i \u003c accounts.length; i++) {\n            locker[accounts[i]] = !locker[accounts[i]];\n        }\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override returns(uint256){\n        require((startTrading \u0026\u0026 !locker[from]) || from == owner() || to == owner(), \"ACTION: locked\");\n        return super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function setLimit(uint256 _txholdlimit, uint256 _startArson, uint256 _stopArson) public onlyOwner() {\n        TxHoldLimitFactor = _txholdlimit;\n        startArson = _startArson;\n        stopArson = _stopArson;\n    }\n\n    /**\n     * The maximum limit for each transaction and wallet.\n     */\n    function txHoldLimit() public view virtual override returns (uint256) {\n        return totalSupply() / TxHoldLimitFactor;\n    }\n\n    function getArson() public view virtual override returns (uint256, uint256) {\n        return (startArson, stopArson);\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    uint256 private _arsonPeriod = 360; //block;\n    uint256 private _arsonIntensity = 10; //1% by 1000\n    mapping(address =\u003e uint256) private _balanceUpdatedBlock;\n\n    IUniswapV2Router02 private _swapV2Router;\n    address private _swapV2Pair;\n\n    address private _dvlp;\n    address private _mkt;\n    uint256 private _btxfi = 2;\n    uint256 private _stxfi = 2;\n\n    uint256 private _buyCooldown = 1;\n    uint256 private _sellCooldown = 1;\n    mapping(address =\u003e uint256) private _buyBlock;\n    mapping(address =\u003e uint256) private _sellBlock;\n\n    bool private _isSwap = false;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, address dvlp_, address mkt_) Ownable(msg.sender){\n        _name = name_;\n        _symbol = symbol_;\n\n        _dvlp = dvlp_;\n        _mkt = mkt_;\n\n        _createLiquidity();\n    }\n\n    function _createLiquidity() private onlyOwner {\n        _swapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        _swapV2Pair = IUniswapV2Factory(_swapV2Router.factory())\n            .createPair(address(this), _swapV2Router.WETH());\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        (uint256 _start, ) = getArson();\n        return currentBalance(_start, _totalSupply);\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return currentBalance(_balanceUpdatedBlock[account], _balances[account]);\n    }\n\n    /**\n     * @dev Return maximum limit per tx, wallet.\n     */\n    function txHoldLimit() public view virtual returns (uint256) {}\n\n    /**\n     * @dev Return start / stop arson block\n     */\n    function getArson() public view virtual returns (uint256, uint256){}\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    receive() external payable {}\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e b ? a : b;\n    }\n\n    /**\n     * @dev Current amount after burning\n     *\n     * Requirements:\n     *\n     * - `lastUpdatedBlock`: the last block number where the balance was saved.\n     * - `amount`: last saved balance.\n     */\n    function currentBalance(uint256 lastUpdatedBlock, uint256 amount) private view  returns (uint256) {\n        if (lastUpdatedBlock == 0)\n            return amount;\n\n        (uint256 _startArson, uint256 _stopArson) = getArson();\n\n        uint256 lastBlock = _stopArson == 0 ? block.number : min(block.number, _stopArson);\n        uint256 arsonCount = 0;\n        if( _startArson \u003e 0 \u0026\u0026 lastBlock \u003e _startArson \u0026\u0026 lastBlock \u003e lastUpdatedBlock ) {\n            if (lastUpdatedBlock \u003e _startArson)\n                arsonCount = (lastBlock - _startArson) / _arsonPeriod - (lastUpdatedBlock - _startArson) / _arsonPeriod;\n            else\n                arsonCount = (lastBlock - _startArson) / _arsonPeriod;                             \n        }\n            \n        uint256 _curAmount = amount;\n        for( uint256 i = 0; i \u003c arsonCount; i ++ ) {\n            _curAmount = _curAmount * (1000 - _arsonIntensity) / 1000;\n        }\n        return _curAmount;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual returns (uint256){\n        uint256 fromBalance = balanceOf(from);\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        uint256 _txfi = 0;\n\n        if (from != owner() \u0026\u0026 to != owner() \u0026\u0026 from != address(this) \u0026\u0026 to != address(this) \u0026\u0026 from != address(0) \u0026\u0026 to != address(0)) {\n            require(amount \u003c= txHoldLimit(), \"TOKEN: Exceed limit\");\n\n            if (!isSwapPair(to) \u0026\u0026 !isSwapRouter(to)) {\n                require(amount + balanceOf(to) \u003c= txHoldLimit(), \"TOKEN: Exceed limit\");\n            }\n\n            if( isSwapPair(from) \u0026\u0026 !isSwapRouter(to)) {\n                require(block.number \u003e= _buyBlock[to] + _buyCooldown, \"ACTION: invalid cooldown block\");\n                _buyBlock[to] = block.number;\n                _txfi = _btxfi;\n            }\n\n            if( isSwapPair(to) \u0026\u0026 !isSwapRouter(from)) {\n                require(block.number \u003e= _sellBlock[from] + _sellCooldown, \"ACTION: invalid cooldown block\");\n                require(block.number \u003e _buyBlock[from], \"ACTION: invalid cooldown block\");\n                _sellBlock[from] = block.number;\n                _txfi = _stxfi;\n\n                if (!_isSwap) {\n                    _swapTokens(min(balanceOf(address(this)), amount));\n                    _sendServ();\n                }\n            }\n        }\n\n        return amount * _txfi / 100;\n    }\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    modifier lockTheSwap() {\n        _isSwap = true;\n        _;\n        _isSwap = false;\n    }\n\n    function _swapTokens(uint256 tokenAmount) private lockTheSwap {\n        if( tokenAmount \u003e 0 ) {\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = _swapV2Router.WETH();\n            _approve(address(this), address(_swapV2Router), tokenAmount);\n            _swapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    function _sendServ() private {\n        uint256 amount = address(this).balance;\n        if( amount \u003e 0.001 ether ) {\n            uint256 amount1 = amount / 3;\n            payable(_dvlp).transfer(amount - amount1);\n            payable(_mkt).transfer(amount1);\n        }\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 _amount = amount - _beforeTokenTransfer(from, to, amount);\n\n        unchecked {\n            _balances[from] = balanceOf(from) - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] = balanceOf(to) + _amount;\n            _balances[address(this)] = balanceOf(address(this)) + amount - _amount;\n\n            _balanceUpdatedBlock[from] = block.number;\n            _balanceUpdatedBlock[to] = block.number;\n            _balanceUpdatedBlock[address(this)] = block.number;\n        }\n\n        emit Transfer(from, to, _amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        // _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = totalSupply() + amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] = balanceOf(account) + amount;\n            _balanceUpdatedBlock[account] = block.number;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = balanceOf(account);\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            _balanceUpdatedBlock[account] = block.number;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply = totalSupply() - amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function isSwapPair(address addr) private view returns (bool) {\n        return addr == _swapV2Pair;\n    }\n\n    function isSwapRouter(address addr) private view returns(bool) {\n        return addr == address(_swapV2Router);\n    }\n\n    function isContract(address account) private view returns (bool) {\n        if(account == _swapV2Pair || account == address(_swapV2Router) || account == address(this))\n            return false;\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n}"}}