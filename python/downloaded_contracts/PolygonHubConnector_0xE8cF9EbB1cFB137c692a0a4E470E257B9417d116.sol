{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/messaging/connectors/Connector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {ProposedOwnable} from \"../../shared/ProposedOwnable.sol\";\nimport {IConnector} from \"../interfaces/IConnector.sol\";\n\n/**\n * @title Connector\n * @author Connext Labs, Inc.\n * @notice This contract has the messaging interface functions used by all connectors.\n *\n * @dev This contract stores information about mirror connectors, but can be used as a\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\n * mainnet). In this case, the `mirrorConnector` and `MIRROR_DOMAIN`\n * will be empty\n *\n * @dev If ownership is renounced, this contract will be unable to update its `mirrorConnector`\n * or `mirrorGas`\n */\nabstract contract Connector is ProposedOwnable, IConnector {\n  // ========== Custom Errors ===========\n\n  error Connector__processMessage_notUsed();\n\n  // ============ Events ============\n\n  event NewConnector(\n    uint32 indexed domain,\n    uint32 indexed mirrorDomain,\n    address amb,\n    address rootManager,\n    address mirrorConnector\n  );\n\n  event MirrorConnectorUpdated(address previous, address current);\n\n  /**\n   * @notice Emitted when funds are withdrawn by the admin\n   * @dev See comments in `withdrawFunds`\n   * @param to The recipient of the funds\n   * @param amount The amount withdrawn\n   */\n  event FundsWithdrawn(address indexed to, uint256 amount);\n\n  // ============ Public Storage ============\n\n  /**\n   * @notice The domain of this Messaging (i.e. Connector) contract.\n   */\n  uint32 public immutable DOMAIN;\n\n  /**\n   * @notice Address of the AMB on this domain.\n   */\n  address public immutable AMB;\n\n  /**\n   * @notice RootManager contract address.\n   */\n  address public immutable ROOT_MANAGER;\n\n  /**\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\n   */\n  uint32 public immutable MIRROR_DOMAIN;\n\n  /**\n   * @notice Connector on L2 for L1 connectors, and vice versa.\n   */\n  address public mirrorConnector;\n\n  // ============ Modifiers ============\n\n  /**\n   * @notice Errors if the msg.sender is not the registered AMB\n   */\n  modifier onlyAMB() {\n    require(msg.sender == AMB, \"!AMB\");\n    _;\n  }\n\n  /**\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\n   */\n  modifier onlyRootManager() {\n    // NOTE: RootManager will be zero address for spoke connectors.\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\n    require(msg.sender == ROOT_MANAGER, \"!rootManager\");\n    _;\n  }\n\n  // ============ Constructor ============\n\n  /**\n   * @notice Creates a new HubConnector instance\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\n   * for optimism, there is one connector on optimism and one connector on mainnet)\n   * @param _domain The domain this connector lives on\n   * @param _mirrorDomain The spoke domain\n   * @param _amb The address of the amb on the domain this connector lives on\n   * @param _rootManager The address of the RootManager on mainnet\n   * @param _mirrorConnector The address of the spoke connector\n   */\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector\n  ) ProposedOwnable() {\n    // set the owner\n    _setOwner(msg.sender);\n\n    // sanity checks on values\n    require(_domain != 0, \"empty domain\");\n    require(_rootManager != address(0), \"empty rootManager\");\n    // see note at top of contract on why the mirror values are not sanity checked\n\n    // set immutables\n    DOMAIN = _domain;\n    AMB = _amb;\n    ROOT_MANAGER = _rootManager;\n    MIRROR_DOMAIN = _mirrorDomain;\n    // set mutables if defined\n    if (_mirrorConnector != address(0)) {\n      _setMirrorConnector(_mirrorConnector);\n    }\n\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\n  }\n\n  // ============ Receivable ============\n  /**\n   * @notice Connectors may need to receive native asset to handle fees when sending a\n   * message\n   */\n  receive() external payable {}\n\n  // ============ Admin Functions ============\n\n  /**\n   * @notice Sets the address of the l2Connector for this domain\n   */\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\n    _setMirrorConnector(_mirrorConnector);\n  }\n\n  /**\n   * @notice This function should be callable by owner, and send funds trapped on\n   * a connector to the provided recipient.\n   * @dev Withdraws the entire balance of the contract.\n   *\n   * @param _to The recipient of the funds withdrawn\n   */\n  function withdrawFunds(address _to) public onlyOwner {\n    uint256 amount = address(this).balance;\n    Address.sendValue(payable(_to), amount);\n    emit FundsWithdrawn(_to, amount);\n  }\n\n  // ============ Public Functions ============\n\n  /**\n   * @notice Processes a message received by an AMB\n   * @dev This is called by AMBs to process messages originating from mirror connector\n   */\n  function processMessage(bytes memory _data) external virtual onlyAMB {\n    _processMessage(_data);\n    emit MessageProcessed(_data, msg.sender);\n  }\n\n  /**\n   * @notice Checks the cross domain sender for a given address\n   */\n  function verifySender(address _expected) external returns (bool) {\n    return _verifySender(_expected);\n  }\n\n  // ============ Virtual Functions ============\n\n  /**\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\n   * @param _data The contents of the message\n   * @param _encodedData Data used to send the message; specific to connector\n   */\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal virtual;\n\n  /**\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\n   * root generated on the l2 domain.\n   */\n  function _processMessage(\n    bytes memory /* _data */\n  ) internal virtual {\n    // By default, reverts. This is to ensure the call path is not used unless this function is\n    // overridden by the inheriting class\n    revert Connector__processMessage_notUsed();\n  }\n\n  /**\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\n   * is the expected address.\n   * @dev Should be overridden by the implementing Connector contract.\n   */\n  function _verifySender(address _expected) internal virtual returns (bool);\n\n  // ============ Private Functions ============\n\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\n    mirrorConnector = _mirrorConnector;\n  }\n}\n"
    },
    "contracts/messaging/connectors/HubConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {Connector} from \"./Connector.sol\";\n\n/**\n * @title HubConnector\n * @author Connext Labs, Inc.\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\n * it contains no logic to store or prove messages.\n *\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\n * which extend this should implement the virtual functions defined in the BaseConnector class\n */\nabstract contract HubConnector is Connector {\n  /**\n   * @notice Creates a new HubConnector instance\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\n   * for optimism, there is one connector on optimism and one connector on mainnet)\n   * @param _domain The domain this connector lives on\n   * @param _mirrorDomain The spoke domain\n   * @param _amb The address of the amb on the domain this connector lives on\n   * @param _rootManager The address of the RootManager on mainnet\n   * @param _mirrorConnector The address of the spoke connector\n   */\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {}\n\n  // ============ Public fns ============\n  /**\n   * @notice Sends a message over the amb\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\n   */\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable onlyRootManager {\n    _sendMessage(_data, _encodedData);\n    emit MessageSent(_data, _encodedData, msg.sender);\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/PolygonHubConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {IRootManager} from \"../../interfaces/IRootManager.sol\";\n\nimport {FxBaseRootTunnel} from \"./tunnel/FxBaseRootTunnel.sol\";\n\nimport {HubConnector} from \"../HubConnector.sol\";\n\ncontract PolygonHubConnector is HubConnector, FxBaseRootTunnel {\n  /**\n   * @notice This mapping records all message roots that have already been processed in order to prevent\n   * redundant message roots from being aggregated.\n   */\n  mapping(bytes32 => bool) public processedMessageRoots;\n\n  // ============ Constructor ============\n  constructor(\n    uint32 _domain,\n    uint32 _mirrorDomain,\n    address _amb,\n    address _rootManager,\n    address _mirrorConnector,\n    address _checkPointManager\n  )\n    HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector)\n    FxBaseRootTunnel(_checkPointManager, _amb)\n  {}\n\n  // ============ Private fns ============\n\n  function _verifySender(address _expected) internal view override returns (bool) {\n    // NOTE: always return false on polygon\n    return false;\n  }\n\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal override {\n    // Should not include specialized calldata\n    require(_encodedData.length == 0, \"!data length\");\n    _sendMessageToChild(_data);\n  }\n\n  function _processMessageFromChild(bytes memory message) internal override {\n    // NOTE: crosschain sender is not directly exposed by the child message\n\n    // do not need any additional sender or origin checks here since the proof contains inclusion proofs of the snapshots\n\n    // get the data (should be the aggregate root)\n    require(message.length == 32, \"!length\");\n\n    // check if the message root has already been processed\n    require(!processedMessageRoots[bytes32(message)], \"message root already processed\");\n    // mark as processed\n    processedMessageRoots[bytes32(message)] = true;\n\n    // update the root on the root manager\n    IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, bytes32(message));\n\n    emit MessageProcessed(message, msg.sender);\n  }\n\n  // DO NOT override _processMessage, should revert from `Connector` class. All messages must use the\n  // `_processMessageFromChild` flow.\n\n  function _setMirrorConnector(address _mirrorConnector) internal override {\n    // NOTE: FxBaseRootTunnel has the following code in their `setFxChildTunnel`:\n    // ```\n    // require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\n    // ```\n    // Which means this function will revert if updating the `mirrorConnector`. In that case, in\n    // changes  the\n    // hub connector should also be redeployed\n    super._setMirrorConnector(_mirrorConnector);\n\n    setFxChildTunnel(_mirrorConnector);\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/lib/ExitPayloadReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/ExitPayloadReader.sol\npragma solidity 0.8.17;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary ExitPayloadReader {\n  using RLPReader for bytes;\n  using RLPReader for RLPReader.RLPItem;\n\n  uint8 constant WORD_SIZE = 32;\n\n  struct ExitPayload {\n    RLPReader.RLPItem[] data;\n  }\n\n  struct Receipt {\n    RLPReader.RLPItem[] data;\n    bytes raw;\n    uint256 logIndex;\n  }\n\n  struct Log {\n    RLPReader.RLPItem data;\n    RLPReader.RLPItem[] list;\n  }\n\n  struct LogTopics {\n    RLPReader.RLPItem[] data;\n  }\n\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\n  function copy(\n    uint256 src,\n    uint256 dest,\n    uint256 len\n  ) private pure {\n    if (len == 0) return;\n\n    // copy as many word sizes as possible\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n\n      src += WORD_SIZE;\n      dest += WORD_SIZE;\n    }\n\n    if (len == 0) return;\n\n    // left over bytes. Mask is used to remove unwanted bytes from the word\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask)) // zero out src\n      let destpart := and(mload(dest), mask) // retrieve the bytes\n      mstore(dest, or(destpart, srcpart))\n    }\n  }\n\n  function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\n    RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\n\n    return ExitPayload(payloadData);\n  }\n\n  function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\n    return payload.data[0].toUint();\n  }\n\n  function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n    return payload.data[1].toBytes();\n  }\n\n  function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\n    return payload.data[2].toUint();\n  }\n\n  function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\n    return payload.data[3].toUint();\n  }\n\n  function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n    return bytes32(payload.data[4].toUint());\n  }\n\n  function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n    return bytes32(payload.data[5].toUint());\n  }\n\n  function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\n    receipt.raw = payload.data[6].toBytes();\n    RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\n\n    if (receiptItem.isList()) {\n      // legacy tx\n      receipt.data = receiptItem.toList();\n    } else {\n      // pop first byte before parsting receipt\n      bytes memory typedBytes = receipt.raw;\n      bytes memory result = new bytes(typedBytes.length - 1);\n      uint256 srcPtr;\n      uint256 destPtr;\n      assembly {\n        srcPtr := add(33, typedBytes)\n        destPtr := add(0x20, result)\n      }\n\n      copy(srcPtr, destPtr, result.length);\n      receipt.data = result.toRlpItem().toList();\n    }\n\n    receipt.logIndex = getReceiptLogIndex(payload);\n    return receipt;\n  }\n\n  function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n    return payload.data[7].toBytes();\n  }\n\n  function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\n    return payload.data[8].toBytes();\n  }\n\n  function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\n    return payload.data[8].toUint();\n  }\n\n  function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\n    return payload.data[9].toUint();\n  }\n\n  // Receipt methods\n  function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\n    return receipt.raw;\n  }\n\n  function getLog(Receipt memory receipt) internal pure returns (Log memory) {\n    RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\n    return Log(logData, logData.toList());\n  }\n\n  // Log methods\n  function getEmitter(Log memory log) internal pure returns (address) {\n    return RLPReader.toAddress(log.list[0]);\n  }\n\n  function getTopics(Log memory log) internal pure returns (LogTopics memory) {\n    return LogTopics(log.list[1].toList());\n  }\n\n  function getData(Log memory log) internal pure returns (bytes memory) {\n    return log.list[2].toBytes();\n  }\n\n  function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\n    return log.data.toRlpBytes();\n  }\n\n  // LogTopics methods\n  function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\n    return topics.data[index];\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/lib/Merkle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/Merkle.sol\npragma solidity 0.8.17;\n\nlibrary Merkle {\n  function checkMembership(\n    bytes32 leaf,\n    uint256 index,\n    bytes32 rootHash,\n    bytes memory proof\n  ) internal pure returns (bool) {\n    require(proof.length % 32 == 0, \"Invalid proof length\");\n    uint256 proofHeight = proof.length / 32;\n    // Proof of size n means, height of the tree is n+1.\n    // In a tree of height n+1, max #leafs possible is 2 ^ n\n    require(index < 2**proofHeight, \"Leaf index is too big\");\n\n    bytes32 proofElement;\n    bytes32 computedHash = leaf;\n    uint256 len = proof.length + 1;\n    for (uint256 i = 32; i < len; ) {\n      assembly {\n        proofElement := mload(add(proof, i))\n      }\n\n      if (index % 2 == 0) {\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n      } else {\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n      }\n\n      index = index / 2;\n\n      unchecked {\n        i += 32;\n      }\n    }\n    return computedHash == rootHash;\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/lib/MerklePatriciaProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/MerklePatriciaProof.sol\npragma solidity 0.8.17;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary MerklePatriciaProof {\n  /*\n   * @dev Verifies a merkle patricia proof.\n   * @param value The terminating value in the trie.\n   * @param encodedPath The path in the trie leading to value.\n   * @param rlpParentNodes The rlp encoded stack of nodes.\n   * @param root The root hash of the trie.\n   * @return The boolean validity of the proof.\n   */\n  function verify(\n    bytes memory value,\n    bytes memory encodedPath,\n    bytes memory rlpParentNodes,\n    bytes32 root\n  ) internal pure returns (bool) {\n    RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\n    RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\n\n    bytes memory currentNode;\n    RLPReader.RLPItem[] memory currentNodeList;\n\n    bytes32 nodeKey = root;\n    uint256 pathPtr = 0;\n\n    bytes memory path = _getNibbleArray(encodedPath);\n    if (path.length == 0) {\n      return false;\n    }\n\n    uint256 len = parentNodes.length;\n    for (uint256 i = 0; i < len; ) {\n      if (pathPtr > path.length) {\n        return false;\n      }\n\n      currentNode = RLPReader.toRlpBytes(parentNodes[i]);\n      if (nodeKey != keccak256(currentNode)) {\n        return false;\n      }\n      currentNodeList = RLPReader.toList(parentNodes[i]);\n\n      if (currentNodeList.length == 17) {\n        if (pathPtr == path.length) {\n          if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        uint8 nextPathNibble = uint8(path[pathPtr]);\n        if (nextPathNibble > 16) {\n          return false;\n        }\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\n        pathPtr += 1;\n      } else if (currentNodeList.length == 2) {\n        uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\n        if (pathPtr + traversed == path.length) {\n          //leaf node\n          if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        //extension node\n        if (traversed == 0) {\n          return false;\n        }\n\n        pathPtr += traversed;\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\n      } else {\n        return false;\n      }\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  function _nibblesToTraverse(\n    bytes memory encodedPartialPath,\n    bytes memory path,\n    uint256 pathPtr\n  ) private pure returns (uint256) {\n    uint256 len = 0;\n    // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\n    // and slicedPath have elements that are each one hex character (1 nibble)\n    bytes memory partialPath = _getNibbleArray(encodedPartialPath);\n    bytes memory slicedPath = new bytes(partialPath.length);\n\n    // pathPtr counts nibbles in path\n    // partialPath.length is a number of nibbles\n    uint256 _len = pathPtr + partialPath.length;\n    for (uint256 i = pathPtr; i < _len; ) {\n      bytes1 pathNibble = path[i];\n      slicedPath[i - pathPtr] = pathNibble;\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    if (keccak256(partialPath) == keccak256(slicedPath)) {\n      len = partialPath.length;\n    } else {\n      len = 0;\n    }\n    return len;\n  }\n\n  // bytes b must be hp encoded\n  function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\n    bytes memory nibbles = \"\";\n    if (b.length > 0) {\n      uint8 offset;\n      uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\n      if (hpNibble == 1 || hpNibble == 3) {\n        nibbles = new bytes(b.length * 2 - 1);\n        bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\n        nibbles[0] = oddNibble;\n        offset = 1;\n      } else {\n        nibbles = new bytes(b.length * 2 - 2);\n        offset = 0;\n      }\n\n      uint256 len = nibbles.length;\n      for (uint256 i = offset; i < len; ) {\n        nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\n\n        unchecked {\n          ++i;\n        }\n      }\n    }\n    return nibbles;\n  }\n\n  function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\n    return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/lib/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/RLPReader.sol\npragma solidity 0.8.17;\n\nlibrary RLPReader {\n  uint8 constant STRING_SHORT_START = 0x80;\n  uint8 constant STRING_LONG_START = 0xb8;\n  uint8 constant LIST_SHORT_START = 0xc0;\n  uint8 constant LIST_LONG_START = 0xf8;\n  uint8 constant WORD_SIZE = 32;\n\n  struct RLPItem {\n    uint256 len;\n    uint256 memPtr;\n  }\n\n  struct Iterator {\n    RLPItem item; // Item that's being iterated over.\n    uint256 nextPtr; // Position of the next item in the list.\n  }\n\n  /*\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\n   * @param self The iterator.\n   * @return The next element in the iteration.\n   */\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\n    require(hasNext(self));\n\n    uint256 ptr = self.nextPtr;\n    uint256 itemLength = _itemLength(ptr);\n    self.nextPtr = ptr + itemLength;\n\n    return RLPItem(itemLength, ptr);\n  }\n\n  /*\n   * @dev Returns true if the iteration has more elements.\n   * @param self The iterator.\n   * @return true if the iteration has more elements.\n   */\n  function hasNext(Iterator memory self) internal pure returns (bool) {\n    RLPItem memory item = self.item;\n    return self.nextPtr < item.memPtr + item.len;\n  }\n\n  /*\n   * @param item RLP encoded bytes\n   */\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n    uint256 memPtr;\n    assembly {\n      memPtr := add(item, 0x20)\n    }\n\n    return RLPItem(item.length, memPtr);\n  }\n\n  /*\n   * @dev Create an iterator. Reverts if item is not a list.\n   * @param self The RLP item.\n   * @return An 'Iterator' over the item.\n   */\n  function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n    require(isList(self));\n\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n    return Iterator(self, ptr);\n  }\n\n  /*\n   * @param item RLP encoded bytes\n   */\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n    return item.len;\n  }\n\n  /*\n   * @param item RLP encoded bytes\n   */\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n    return item.len - _payloadOffset(item.memPtr);\n  }\n\n  /*\n   * @param item RLP encoded list in bytes\n   */\n  function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n    require(isList(item));\n\n    uint256 items = numItems(item);\n    RLPItem[] memory result = new RLPItem[](items);\n\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n    uint256 dataLen;\n    for (uint256 i = 0; i < items; ) {\n      dataLen = _itemLength(memPtr);\n      result[i] = RLPItem(dataLen, memPtr);\n      memPtr = memPtr + dataLen;\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    return result;\n  }\n\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\n  function isList(RLPItem memory item) internal pure returns (bool) {\n    if (item.len == 0) return false;\n\n    uint8 byte0;\n    uint256 memPtr = item.memPtr;\n    assembly {\n      byte0 := byte(0, mload(memPtr))\n    }\n\n    if (byte0 < LIST_SHORT_START) return false;\n    return true;\n  }\n\n  /*\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n   * @return keccak256 hash of RLP encoded bytes.\n   */\n  function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n    uint256 ptr = item.memPtr;\n    uint256 len = item.len;\n    bytes32 result;\n    assembly {\n      result := keccak256(ptr, len)\n    }\n    return result;\n  }\n\n  function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n    uint256 offset = _payloadOffset(item.memPtr);\n    uint256 memPtr = item.memPtr + offset;\n    uint256 len = item.len - offset; // data length\n    return (memPtr, len);\n  }\n\n  /*\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n   * @return keccak256 hash of the item payload.\n   */\n  function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\n    bytes32 result;\n    assembly {\n      result := keccak256(memPtr, len)\n    }\n    return result;\n  }\n\n  /** RLPItem conversions into data types **/\n\n  // @returns raw rlp encoding in bytes\n  function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n    bytes memory result = new bytes(item.len);\n    if (result.length == 0) return result;\n\n    uint256 ptr;\n    assembly {\n      ptr := add(0x20, result)\n    }\n\n    copy(item.memPtr, ptr, item.len);\n    return result;\n  }\n\n  // any non-zero byte is considered true\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\n    require(item.len == 1);\n    uint256 result;\n    uint256 memPtr = item.memPtr;\n    assembly {\n      result := byte(0, mload(memPtr))\n    }\n\n    return result == 0 ? false : true;\n  }\n\n  function toAddress(RLPItem memory item) internal pure returns (address) {\n    // 1 byte for the length prefix\n    require(item.len == 21);\n\n    return address(uint160(toUint(item)));\n  }\n\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\n    require(item.len > 0 && item.len < 33 + 1);\n\n    uint256 offset = _payloadOffset(item.memPtr);\n    uint256 len = item.len - offset;\n\n    uint256 result;\n    uint256 memPtr = item.memPtr + offset;\n    assembly {\n      result := mload(memPtr)\n\n      // shfit to the correct location if neccesary\n      if lt(len, 32) {\n        result := div(result, exp(256, sub(32, len)))\n      }\n    }\n\n    return result;\n  }\n\n  // enforces 32 byte length\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n    // one byte prefix\n    require(item.len == 33);\n\n    uint256 result;\n    uint256 memPtr = item.memPtr + 1;\n    assembly {\n      result := mload(memPtr)\n    }\n\n    return result;\n  }\n\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n    require(item.len > 0);\n\n    uint256 offset = _payloadOffset(item.memPtr);\n    uint256 len = item.len - offset; // data length\n    bytes memory result = new bytes(len);\n\n    uint256 destPtr;\n    assembly {\n      destPtr := add(0x20, result)\n    }\n\n    copy(item.memPtr + offset, destPtr, len);\n    return result;\n  }\n\n  /*\n   * Private Helpers\n   */\n\n  // @return number of payload items inside an encoded list.\n  function numItems(RLPItem memory item) private pure returns (uint256) {\n    if (item.len == 0) return 0;\n\n    uint256 count = 0;\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n    uint256 endPtr = item.memPtr + item.len;\n    while (currPtr < endPtr) {\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\n      count++;\n    }\n\n    return count;\n  }\n\n  // @return entire rlp item byte length\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\n    uint256 itemLen;\n    uint256 byte0;\n    assembly {\n      byte0 := byte(0, mload(memPtr))\n    }\n\n    if (byte0 < STRING_SHORT_START) itemLen = 1;\n    else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\n    else if (byte0 < LIST_SHORT_START) {\n      assembly {\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n        memPtr := add(memPtr, 1) // skip over the first byte\n        /* 32 byte word size */\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n        itemLen := add(dataLen, add(byteLen, 1))\n      }\n    } else if (byte0 < LIST_LONG_START) {\n      itemLen = byte0 - LIST_SHORT_START + 1;\n    } else {\n      assembly {\n        let byteLen := sub(byte0, 0xf7)\n        memPtr := add(memPtr, 1)\n\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n        itemLen := add(dataLen, add(byteLen, 1))\n      }\n    }\n\n    return itemLen;\n  }\n\n  // @return number of bytes until the data\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n    uint256 byte0;\n    assembly {\n      byte0 := byte(0, mload(memPtr))\n    }\n\n    if (byte0 < STRING_SHORT_START) return 0;\n    else if (byte0 < STRING_LONG_START || (byte0 > LIST_SHORT_START - 1 && byte0 < LIST_LONG_START)) return 1;\n    else if (byte0 < LIST_SHORT_START)\n      // being explicit\n      return byte0 - (STRING_LONG_START - 1) + 1;\n    else return byte0 - (LIST_LONG_START - 1) + 1;\n  }\n\n  /*\n   * @param src Pointer to source\n   * @param dest Pointer to destination\n   * @param len Amount of memory to copy from the source\n   */\n  function copy(\n    uint256 src,\n    uint256 dest,\n    uint256 len\n  ) private pure {\n    if (len == 0) return;\n\n    // copy as many word sizes as possible\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n\n      src += WORD_SIZE;\n      dest += WORD_SIZE;\n    }\n\n    if (len == 0) return;\n\n    // left over bytes. Mask is used to remove unwanted bytes from the word\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\n\n    assembly {\n      let srcpart := and(mload(src), not(mask)) // zero out src\n      let destpart := and(mload(dest), mask) // retrieve the bytes\n      mstore(dest, or(destpart, srcpart))\n    }\n  }\n}\n"
    },
    "contracts/messaging/connectors/polygon/tunnel/FxBaseRootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseRootTunnel.sol\npragma solidity 0.8.17;\n\nimport {RLPReader} from \"../lib/RLPReader.sol\";\nimport {MerklePatriciaProof} from \"../lib/MerklePatriciaProof.sol\";\nimport {Merkle} from \"../lib/Merkle.sol\";\nimport \"../lib/ExitPayloadReader.sol\";\n\ninterface IFxStateSender {\n  function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\ncontract ICheckpointManager {\n  struct HeaderBlock {\n    bytes32 root;\n    uint256 start;\n    uint256 end;\n    uint256 createdAt;\n    address proposer;\n  }\n\n  /**\n   * @notice mapping of checkpoint header numbers to block details\n   * @dev These checkpoints are submited by plasma contracts\n   */\n  mapping(uint256 => HeaderBlock) public headerBlocks;\n}\n\nabstract contract FxBaseRootTunnel {\n  using RLPReader for RLPReader.RLPItem;\n  using Merkle for bytes32;\n  using ExitPayloadReader for bytes;\n  using ExitPayloadReader for ExitPayloadReader.ExitPayload;\n  using ExitPayloadReader for ExitPayloadReader.Log;\n  using ExitPayloadReader for ExitPayloadReader.LogTopics;\n  using ExitPayloadReader for ExitPayloadReader.Receipt;\n\n  // keccak256(MessageSent(bytes))\n  bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\n\n  // state sender contract\n  IFxStateSender public fxRoot;\n  // root chain manager\n  ICheckpointManager public checkpointManager;\n  // child tunnel contract which receives and sends messages\n  address public fxChildTunnel;\n\n  // storage to avoid duplicate exits\n  mapping(bytes32 => bool) public processedExits;\n\n  constructor(address _checkpointManager, address _fxRoot) {\n    checkpointManager = ICheckpointManager(_checkpointManager);\n    fxRoot = IFxStateSender(_fxRoot);\n  }\n\n  // set fxChildTunnel if not set already\n  function setFxChildTunnel(address _fxChildTunnel) internal virtual {\n    require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\n    fxChildTunnel = _fxChildTunnel;\n  }\n\n  /**\n   * @notice Send bytes message to Child Tunnel\n   * @param message bytes message that will be sent to Child Tunnel\n   * some message examples -\n   *   abi.encode(tokenId);\n   *   abi.encode(tokenId, tokenMetadata);\n   *   abi.encode(messageType, messageData);\n   */\n  function _sendMessageToChild(bytes memory message) internal {\n    fxRoot.sendMessageToChild(fxChildTunnel, message);\n  }\n\n  function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\n    ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\n\n    bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\n    uint256 blockNumber = payload.getBlockNumber();\n    // checking if exit has already been processed\n    // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n    bytes32 exitHash = keccak256(\n      abi.encodePacked(\n        blockNumber,\n        // first 2 nibbles are dropped while generating nibble array\n        // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n        // so converting to nibble array and then hashing it\n        MerklePatriciaProof._getNibbleArray(branchMaskBytes),\n        payload.getReceiptLogIndex()\n      )\n    );\n    require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\n    processedExits[exitHash] = true;\n\n    ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\n    ExitPayloadReader.Log memory log = receipt.getLog();\n\n    // check child tunnel\n    require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\n\n    bytes32 receiptRoot = payload.getReceiptRoot();\n    // verify receipt inclusion\n    require(\n      MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\n      \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\n    );\n\n    // verify checkpoint inclusion\n    _checkBlockMembershipInCheckpoint(\n      blockNumber,\n      payload.getBlockTime(),\n      payload.getTxRoot(),\n      receiptRoot,\n      payload.getHeaderNumber(),\n      payload.getBlockProof()\n    );\n\n    ExitPayloadReader.LogTopics memory topics = log.getTopics();\n\n    require(\n      bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\n      \"FxRootTunnel: INVALID_SIGNATURE\"\n    );\n\n    // received message data\n    bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\n    return message;\n  }\n\n  function _checkBlockMembershipInCheckpoint(\n    uint256 blockNumber,\n    uint256 blockTime,\n    bytes32 txRoot,\n    bytes32 receiptRoot,\n    uint256 headerNumber,\n    bytes memory blockProof\n  ) private view returns (uint256) {\n    (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\n\n    require(\n      keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\n        blockNumber - startBlock,\n        headerRoot,\n        blockProof\n      ),\n      \"FxRootTunnel: INVALID_HEADER\"\n    );\n    return createdAt;\n  }\n\n  /**\n   * @notice receive message from  L2 to L1, validated by proof\n   * @dev This function verifies if the transaction actually happened on child chain\n   *\n   * @param inputData RLP encoded data of the reference tx containing following list of fields\n   *  0 - headerNumber - Checkpoint header block number containing the reference tx\n   *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n   *  2 - blockNumber - Block number containing the reference tx on child chain\n   *  3 - blockTime - Reference tx block time\n   *  4 - txRoot - Transactions root of block\n   *  5 - receiptRoot - Receipts root of block\n   *  6 - receipt - Receipt of the reference transaction\n   *  7 - receiptProof - Merkle proof of the reference receipt\n   *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n   *  9 - receiptLogIndex - Log Index to read from the receipt\n   */\n  function receiveMessage(bytes memory inputData) public virtual {\n    bytes memory message = _validateAndExtractMessage(inputData);\n    _processMessageFromChild(message);\n  }\n\n  /**\n   * @notice Process message received from Child Tunnel\n   * @dev function needs to be implemented to handle message as per requirement\n   * This is called by onStateReceive function.\n   * Since it is called via a system call, any event will not be emitted during its execution.\n   * @param message bytes message that was sent from Child Tunnel\n   */\n  function _processMessageFromChild(bytes memory message) internal virtual;\n}\n"
    },
    "contracts/messaging/interfaces/IConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\nimport {IProposedOwnable} from \"../../shared/interfaces/IProposedOwnable.sol\";\n\n/**\n * @notice This interface is what the Connext contract will send and receive messages through.\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\n * could be Nomad or a generic AMB under the hood).\n *\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\n *\n * Flow from transfer from polygon to optimism:\n * 1. User calls `xcall` with destination specified\n * 2. This will swap in to the bridge assets\n * 3. The swapped assets will get burned\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\n *    to the root\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\n *    mainnet. This is done on all \"spoke\" domains.\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\n *    root from all of the AMBs\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\n *      tree root\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\n *    process on the `Connext` contract\n * 9. Takes minted bridge tokens and credits the LP\n *\n * AMB requirements:\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\n * - Ability to read *our root* from the AMB\n *\n * AMBs:\n * - PoS bridge from polygon\n * - arbitrum bridge\n * - optimism bridge\n * - gnosis chain\n * - bsc (use multichain for messaging)\n */\ninterface IConnector is IProposedOwnable {\n  // ============ Events ============\n  /**\n   * @notice Emitted whenever a message is successfully sent over an AMB\n   * @param data The contents of the message\n   * @param encodedData Data used to send the message; specific to connector\n   * @param caller Who called the function (sent the message)\n   */\n  event MessageSent(bytes data, bytes encodedData, address caller);\n\n  /**\n   * @notice Emitted whenever a message is successfully received over an AMB\n   * @param data The contents of the message\n   * @param caller Who called the function\n   */\n  event MessageProcessed(bytes data, address caller);\n\n  // ============ Public fns ============\n\n  function processMessage(bytes memory _data) external;\n\n  function verifySender(address _expected) external returns (bool);\n}\n"
    },
    "contracts/messaging/interfaces/IRootManager.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\ninterface IRootManager {\n  /**\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\n   * spoke domains.\n   * @dev This must read information for the root from the registered AMBs.\n   */\n  function propagate(\n    address[] calldata _connectors,\n    uint256[] calldata _fees,\n    bytes[] memory _encodedData\n  ) external payable;\n\n  /**\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\n   * inbound root.\n   * @dev This must read information for the root from the registered AMBs\n   */\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\n}\n"
    },
    "contracts/shared/ProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport {IProposedOwnable} from \"./interfaces/IProposedOwnable.sol\";\n\n/**\n * @title ProposedOwnable\n * @notice Contract module which provides a basic access control mechanism,\n * where there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed via a two step process:\n * 1. Call `proposeOwner`\n * 2. Wait out the delay period\n * 3. Call `acceptOwner`\n *\n * @dev This module is used through inheritance. It will make available the\n * modifier `onlyOwner`, which can be applied to your functions to restrict\n * their use to the owner.\n *\n * @dev The majority of this code was taken from the openzeppelin Ownable\n * contract\n *\n */\nabstract contract ProposedOwnable is IProposedOwnable {\n  // ========== Custom Errors ===========\n\n  error ProposedOwnable__onlyOwner_notOwner();\n  error ProposedOwnable__onlyProposed_notProposedOwner();\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\n  error ProposedOwnable__renounceOwnership_noProposal();\n  error ProposedOwnable__renounceOwnership_invalidProposal();\n\n  // ============ Properties ============\n\n  address private _owner;\n\n  address private _proposed;\n  uint256 private _proposedOwnershipTimestamp;\n\n  uint256 private constant _delay = 7 days;\n\n  // ======== Getters =========\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposed() public view virtual returns (address) {\n    return _proposed;\n  }\n\n  /**\n   * @notice Returns the address of the proposed owner.\n   */\n  function proposedTimestamp() public view virtual returns (uint256) {\n    return _proposedOwnershipTimestamp;\n  }\n\n  /**\n   * @notice Returns the delay period before a new owner can be accepted.\n   */\n  function delay() public view virtual returns (uint256) {\n    return _delay;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the proposed owner.\n   */\n  modifier onlyProposed() {\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\n    _;\n  }\n\n  /**\n   * @notice Throws if the ownership delay has not elapsed\n   */\n  modifier ownershipDelayElapsed() {\n    // Ensure delay has elapsed\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\n    _;\n  }\n\n  /**\n   * @notice Indicates if the ownership has been renounced() by\n   * checking if current owner is address(0)\n   */\n  function renounced() public view returns (bool) {\n    return _owner == address(0);\n  }\n\n  // ======== External =========\n\n  /**\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\n   * newly proposed owner as step 1 in a 2-step process\n   */\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\n    // Contract as source of truth\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\n\n    // Sanity check: reasonable proposal\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\n\n    _setProposed(newlyProposed);\n  }\n\n  /**\n   * @notice Renounces ownership of the contract after a delay\n   */\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\n    // Ensure there has been a proposal cycle started\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\n\n    // Require proposed is set to 0\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(address(0));\n  }\n\n  /**\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\n    // is 0-d out and this check is implicitly enforced by modifier\n\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\n    // the only time this would happen is if the _proposed was never\n    // set (will fail from modifier) or if the owner == _proposed (checked\n    // above)\n\n    // Emit event, set new owner, reset timestamp\n    _setOwner(_proposed);\n  }\n\n  // ======== Internal =========\n\n  function _setOwner(address newOwner) internal {\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n    delete _proposedOwnershipTimestamp;\n    delete _proposed;\n  }\n\n  function _setProposed(address newlyProposed) private {\n    _proposedOwnershipTimestamp = block.timestamp;\n    _proposed = newlyProposed;\n    emit OwnershipProposed(newlyProposed);\n  }\n}\n"
    },
    "contracts/shared/interfaces/IProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @title IProposedOwnable\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\n * process\n */\ninterface IProposedOwnable {\n  /**\n   * @dev This emits when change in ownership of a contract is proposed.\n   */\n  event OwnershipProposed(address indexed proposedOwner);\n\n  /**\n   * @dev This emits when ownership of a contract changes.\n   */\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @notice Get the address of the owner\n   * @return owner_ The address of the owner.\n   */\n  function owner() external view returns (address owner_);\n\n  /**\n   * @notice Get the address of the proposed owner\n   * @return proposed_ The address of the proposed.\n   */\n  function proposed() external view returns (address proposed_);\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   * @param newlyProposed The proposed new owner of the contract\n   */\n  function proposeNewOwner(address newlyProposed) external;\n\n  /**\n   * @notice Set the address of the proposed owner of the contract\n   */\n  function acceptProposedOwner() external;\n}\n"
    }
  }
}}