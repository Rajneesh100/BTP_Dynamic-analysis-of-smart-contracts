{{
  "language": "Solidity",
  "sources": {
    "FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"SafeERC20.sol\";\nimport \"ITokenLocker.sol\";\nimport \"PrismaOwnable.sol\";\nimport \"SystemStart.sol\";\nimport \"DelegatedOps.sol\";\n\ncontract FeeDistributor is PrismaOwnable, SystemStart, DelegatedOps {\n    using SafeERC20 for IERC20;\n\n    ITokenLocker public immutable tokenLocker;\n\n    // fee token -> week -> total amount received that week\n    mapping(address token => uint128[65535]) public weeklyFeeAmounts;\n    // user -> fee token -> data about the active stream\n    mapping(address account => mapping(address feeToken => uint256 claimFromWeek)) public accountClaimWeek;\n\n    // array of all fee tokens that have been added\n    address[] public feeTokens;\n    // private mapping for tracking which addresses were added to `feeTokens`\n    mapping(address token => FeeTokenData) feeTokenData;\n\n    struct FeeTokenData {\n        bool isRegistered;\n        uint16 firstWeek;\n        uint16 lastWeek;\n    }\n\n    struct BoundedClaim {\n        address token;\n        uint256 claimFromWeek;\n        uint256 claimUntilWeek;\n    }\n\n    event NewFeeToken(address token);\n    event FeesReceived(address indexed caller, address indexed token, uint256 indexed week, uint256 amount);\n    event FeesClaimed(\n        address indexed account,\n        address indexed receiver,\n        address indexed token,\n        uint256 claimFromWeek,\n        uint256 claimUntilWeek,\n        uint256 amount\n    );\n\n    constructor(address _prismaCore, ITokenLocker _tokenLocker) PrismaOwnable(_prismaCore) SystemStart(_prismaCore) {\n        tokenLocker = _tokenLocker;\n    }\n\n    function feeTokensLength() external view returns (uint) {\n        return feeTokens.length;\n    }\n\n    /**\n        @notice Get an array of claimable amounts of different tokens accrued from protocol fees\n        @param account Address to query claimable amounts for\n        @param tokens List of tokens to query claimable amounts of\n     */\n    function claimable(address account, address[] calldata tokens) external view returns (uint256[] memory amounts) {\n        uint256 currentWeek = getWeek();\n        amounts = new uint256[](tokens.length);\n        if (currentWeek > 0) {\n            for (uint256 i = 0; i < tokens.length; i++) {\n                address token = tokens[i];\n                FeeTokenData memory data = feeTokenData[token];\n\n                uint256 claimFromWeek = accountClaimWeek[account][token];\n                if (claimFromWeek < data.firstWeek) claimFromWeek = data.firstWeek;\n\n                uint256 claimUntilWeek = data.lastWeek + 1;\n                if (claimUntilWeek > currentWeek) claimUntilWeek = currentWeek;\n\n                amounts[i] = _getClaimable(account, token, claimFromWeek, claimUntilWeek);\n            }\n        }\n        return amounts;\n    }\n\n    /**\n        @notice Get the current weekly claim bounds for claimable tokens for `account`\n        @dev Returned values are used as inputs in `claimWithBounds`. A response of\n             `(0, 0)` indicates the account has nothing claimable.\n        @param account Address to query claim bounds for\n        @param token Token to query claim bounds for\n     */\n    function getClaimBounds(\n        address account,\n        address token\n    ) external view returns (uint256 claimFromWeek, uint256 claimUntilWeek) {\n        uint256 currentWeek = getWeek();\n        if (currentWeek == 0) return (0, 0);\n\n        bool canClaim;\n        FeeTokenData memory data = feeTokenData[token];\n\n        claimFromWeek = accountClaimWeek[account][token];\n        if (claimFromWeek < data.firstWeek) claimFromWeek = data.firstWeek;\n\n        claimUntilWeek = data.lastWeek + 1;\n        if (claimUntilWeek > currentWeek) claimUntilWeek = currentWeek;\n\n        for (uint256 i = claimFromWeek; i < claimUntilWeek; i++) {\n            uint256 weight = tokenLocker.getAccountWeightAt(account, i);\n            if (weight == 0) continue;\n            uint256 totalWeight = tokenLocker.getTotalWeightAt(i);\n            uint256 amount = (weeklyFeeAmounts[token][i] * weight) / totalWeight;\n            if (amount > 0) {\n                claimFromWeek = i;\n                canClaim = true;\n                break;\n            }\n        }\n\n        claimUntilWeek = claimFromWeek + 1;\n        for (uint256 i = currentWeek - 1; i > claimFromWeek; i--) {\n            uint256 weight = tokenLocker.getAccountWeightAt(account, i);\n            if (weight == 0) continue;\n            uint256 totalWeight = tokenLocker.getTotalWeightAt(i);\n            uint256 amount = (weeklyFeeAmounts[token][i] * weight) / totalWeight;\n            if (amount > 0) {\n                claimUntilWeek = i + 1;\n                if (claimUntilWeek > currentWeek) claimUntilWeek = currentWeek;\n                canClaim = true;\n                break;\n            }\n        }\n\n        if (canClaim) return (claimFromWeek, claimUntilWeek);\n        else return (0, 0);\n    }\n\n    /**\n        @notice Register a new fee token to be distributed\n        @dev Only callable by the owner. Once registered, depositing new fees\n             is permissionless.\n     */\n    function registerNewFeeToken(address token) external onlyOwner returns (bool) {\n        require(!feeTokenData[token].isRegistered, \"Already registered\");\n        feeTokenData[token] = FeeTokenData({ isRegistered: true, firstWeek: uint16(getWeek()), lastWeek: 0 });\n        feeTokens.push(token);\n\n        emit NewFeeToken(token);\n        return true;\n    }\n\n    /**\n        @notice Deposit protocol fees into the contract, to be distributed to lockers\n        @dev Caller must have given approval for this contract to transfer `token`\n        @param token Token being deposited\n        @param amount Amount of the token to deposit\n     */\n    function depositFeeToken(address token, uint256 amount) external returns (bool) {\n        FeeTokenData memory data = feeTokenData[token];\n        require(data.isRegistered, \"Not a registered fee token\");\n        if (amount > 0) {\n            uint256 received = IERC20(token).balanceOf(address(this));\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n            received = IERC20(token).balanceOf(address(this)) - received;\n            uint256 week = getWeek();\n            weeklyFeeAmounts[token][week] = uint128(weeklyFeeAmounts[token][week] + received);\n            if (week > data.lastWeek) {\n                data.lastWeek = uint16(week);\n                feeTokenData[token] = data;\n            }\n            emit FeesReceived(msg.sender, token, week, amount);\n        }\n        return true;\n    }\n\n    /**\n        @notice Claim all accrued protocol fees available to the caller\n        @dev Accounts that claim frequently and maintain lock weight should claim\n             using this method.\n        @param receiver Address to transfer claimed fees to\n        @param tokens Array of tokens to claim\n        @return claimedAmounts Array of claimed amounts\n     */\n    function claim(\n        address account,\n        address receiver,\n        address[] calldata tokens\n    ) external callerOrDelegated(account) returns (uint256[] memory claimedAmounts) {\n        uint256 currentWeek = getWeek();\n        require(currentWeek > 0, \"No claims in first week\");\n\n        uint256 length = tokens.length;\n        claimedAmounts = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            address token = tokens[i];\n            FeeTokenData memory data = feeTokenData[token];\n            require(data.isRegistered, \"Not a registered fee token\");\n\n            uint256 claimFromWeek = accountClaimWeek[account][token];\n            if (claimFromWeek < data.firstWeek) claimFromWeek = data.firstWeek;\n\n            uint256 claimUntilWeek = data.lastWeek + 1;\n            if (claimUntilWeek > currentWeek) claimUntilWeek = currentWeek;\n\n            accountClaimWeek[account][token] = currentWeek;\n            uint256 amount = _getClaimable(account, token, claimFromWeek, claimUntilWeek);\n\n            if (amount > 0) {\n                claimedAmounts[i] = amount;\n                IERC20(token).safeTransfer(receiver, amount);\n                emit FeesClaimed(account, receiver, token, claimFromWeek, currentWeek, amount);\n            }\n        }\n        return claimedAmounts;\n    }\n\n    /**\n        @notice Claim accrued protocol fees within a bounded period\n        @dev Avoids excess gas usage when an account's first lock is many weeks\n             after fee distribution has started, or there is a significant period\n             without new fees being added. `claimFromWeek` and `claimUntilWeek`\n             can be obtained by calling `getClaimBounds`. Note that if `claimFromWeek`\n             is set higher than `accountClaimWeek`, any fees earned in that period\n             are forever lost.\n        @param receiver Address to transfer claimed fees to\n        @param claims Array of (token, claimFromWeek, claimUntilWeek)\n        @return claimedAmounts Array of claimed amounts\n     */\n    function claimWithBounds(\n        address account,\n        address receiver,\n        BoundedClaim[] calldata claims\n    ) external callerOrDelegated(account) returns (uint256[] memory claimedAmounts) {\n        uint256 currentWeek = getWeek();\n        claimedAmounts = new uint256[](claims.length);\n        uint256 length = claims.length;\n        for (uint i = 0; i < length; i++) {\n            address token = claims[i].token;\n            uint256 claimFromWeek = claims[i].claimFromWeek;\n            uint256 claimUntilWeek = claims[i].claimUntilWeek;\n            FeeTokenData memory data = feeTokenData[token];\n            require(data.isRegistered, \"Not a registered fee token\");\n\n            require(claimFromWeek < claimUntilWeek, \"claimFromWeek > claimUntilWeek\");\n            require(claimUntilWeek <= currentWeek, \"claimUntilWeek too high\");\n            require(accountClaimWeek[account][token] <= claimFromWeek, \"claimFromWeek too low\");\n\n            if (claimFromWeek < data.firstWeek) claimFromWeek = data.firstWeek;\n            accountClaimWeek[account][token] = claimUntilWeek;\n            uint256 amount = _getClaimable(account, token, claimFromWeek, claimUntilWeek);\n\n            if (amount > 0) {\n                claimedAmounts[i] = amount;\n                IERC20(token).safeTransfer(receiver, amount);\n                emit FeesClaimed(account, receiver, token, claimFromWeek, claimUntilWeek, amount);\n            }\n        }\n        return claimedAmounts;\n    }\n\n    function _getClaimable(\n        address account,\n        address token,\n        uint256 claimFromWeek,\n        uint256 claimUntilWeek\n    ) internal view returns (uint256 claimableAmount) {\n        uint128[65535] storage feeAmounts = weeklyFeeAmounts[token];\n        for (uint256 i = claimFromWeek; i < claimUntilWeek; i++) {\n            uint256 feeAmount = feeAmounts[i];\n            if (feeAmount == 0) continue;\n            uint256 weight = tokenLocker.getAccountWeightAt(account, i);\n            if (weight == 0) continue;\n            uint256 totalWeight = tokenLocker.getTotalWeightAt(i);\n            claimableAmount += (feeAmount * weight) / totalWeight;\n        }\n        return claimableAmount;\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"IERC20Permit.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "ITokenLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITokenLocker {\n    struct LockData {\n        uint256 amount;\n        uint256 weeksToUnlock;\n    }\n    struct ExtendLockData {\n        uint256 amount;\n        uint256 currentWeeks;\n        uint256 newWeeks;\n    }\n\n    event LockCreated(address indexed account, uint256 amount, uint256 _weeks);\n    event LockExtended(address indexed account, uint256 amount, uint256 _weeks, uint256 newWeeks);\n    event LocksCreated(address indexed account, LockData[] newLocks);\n    event LocksExtended(address indexed account, ExtendLockData[] locks);\n    event LocksFrozen(address indexed account, uint256 amount);\n    event LocksUnfrozen(address indexed account, uint256 amount);\n    event LocksWithdrawn(address indexed account, uint256 withdrawn, uint256 penalty);\n\n    function extendLock(uint256 _amount, uint256 _weeks, uint256 _newWeeks) external returns (bool);\n\n    function extendMany(ExtendLockData[] calldata newExtendLocks) external returns (bool);\n\n    function freeze() external;\n\n    function getAccountWeightWrite(address account) external returns (uint256);\n\n    function getTotalWeightWrite() external returns (uint256);\n\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\n\n    function lockMany(address _account, LockData[] calldata newLocks) external returns (bool);\n\n    function setPenaltyWithdrawalsEnabled(bool _enabled) external returns (bool);\n\n    function unfreeze(bool keepIncentivesVote) external;\n\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\n\n    function withdrawWithPenalty(uint256 amountToWithdraw) external returns (uint256);\n\n    function MAX_LOCK_WEEKS() external view returns (uint256);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function getAccountActiveLocks(\n        address account,\n        uint256 minWeeks\n    ) external view returns (LockData[] memory lockData, uint256 frozenAmount);\n\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\n\n    function getAccountWeight(address account) external view returns (uint256);\n\n    function getAccountWeightAt(address account, uint256 week) external view returns (uint256);\n\n    function getTotalWeight() external view returns (uint256);\n\n    function getTotalWeightAt(uint256 week) external view returns (uint256);\n\n    function getWeek() external view returns (uint256 week);\n\n    function getWithdrawWithPenaltyAmounts(\n        address account,\n        uint256 amountToWithdraw\n    ) external view returns (uint256 amountWithdrawn, uint256 penaltyAmountPaid);\n\n    function guardian() external view returns (address);\n\n    function incentiveVoter() external view returns (address);\n\n    function lockToTokenRatio() external view returns (uint256);\n\n    function lockToken() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function penaltyWithdrawalsEnabled() external view returns (bool);\n\n    function prismaCore() external view returns (address);\n\n    function totalDecayRate() external view returns (uint32);\n\n    function totalUpdatedWeek() external view returns (uint16);\n}\n"
    },
    "PrismaOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma Ownable\n    @notice Contracts inheriting `PrismaOwnable` have the same owner as `PrismaCore`.\n            The ownership cannot be independently modified or renounced.\n */\ncontract PrismaOwnable {\n    IPrismaCore public immutable PRISMA_CORE;\n\n    constructor(address _prismaCore) {\n        PRISMA_CORE = IPrismaCore(_prismaCore);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == PRISMA_CORE.owner(), \"Only owner\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return PRISMA_CORE.owner();\n    }\n\n    function guardian() public view returns (address) {\n        return PRISMA_CORE.guardian();\n    }\n}\n"
    },
    "IPrismaCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaCore {\n    event FeeReceiverSet(address feeReceiver);\n    event GuardianSet(address guardian);\n    event NewOwnerAccepted(address oldOwner, address owner);\n    event NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\n    event NewOwnerRevoked(address owner, address revokedOwner);\n    event Paused();\n    event PriceFeedSet(address priceFeed);\n    event Unpaused();\n\n    function acceptTransferOwnership() external;\n\n    function commitTransferOwnership(address newOwner) external;\n\n    function revokeTransferOwnership() external;\n\n    function setFeeReceiver(address _feeReceiver) external;\n\n    function setGuardian(address _guardian) external;\n\n    function setPaused(bool _paused) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\n\n    function feeReceiver() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownershipTransferDeadline() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function pendingOwner() external view returns (address);\n\n    function priceFeed() external view returns (address);\n\n    function startTime() external view returns (uint256);\n}\n"
    },
    "SystemStart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma System Start Time\n    @dev Provides a unified `startTime` and `getWeek`, used for emissions.\n */\ncontract SystemStart {\n    uint256 immutable startTime;\n\n    constructor(address prismaCore) {\n        startTime = IPrismaCore(prismaCore).startTime();\n    }\n\n    function getWeek() public view returns (uint256 week) {\n        return (block.timestamp - startTime) / 1 weeks;\n    }\n}\n"
    },
    "DelegatedOps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n/**\n    @title Prisma Delegated Operations\n    @notice Allows delegation to specific contract functionality. Useful for creating\n            wrapper contracts to bundle multiple interactions into a single call.\n\n            Functions that supports delegation should include an `account` input allowing\n            the delegated caller to indicate who they are calling on behalf of. In executing\n            the call, all internal state updates should be applied for `account` and all\n            value transfers should occur to or from the caller.\n\n            For example: a delegated call to `openTrove` should transfer collateral\n            from the caller, create the debt position for `account`, and send newly\n            minted tokens to the caller.\n */\ncontract DelegatedOps {\n    event DelegateApprovalSet(address indexed caller, address indexed delegate, bool isApproved);\n\n    mapping(address owner => mapping(address caller => bool isApproved)) public isApprovedDelegate;\n\n    modifier callerOrDelegated(address _account) {\n        require(msg.sender == _account || isApprovedDelegate[_account][msg.sender], \"Delegate not approved\");\n        _;\n    }\n\n    function setDelegateApproval(address _delegate, bool _isApproved) external {\n        isApprovedDelegate[msg.sender][_delegate] = _isApproved;\n        emit DelegateApprovalSet(msg.sender, _delegate, _isApproved);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "FeeDistributor.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}