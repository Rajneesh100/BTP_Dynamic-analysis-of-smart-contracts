{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@solvprotocol/contracts-v3-address-resolver/contracts/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAddressResolver {\n\tfunction getAddress(bytes32 name) external view returns (address);\n\tfunction getRequiredAddress(bytes32 name, string calldata reason) external view returns (address);\n}"
    },
    "@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./IAddressResolver.sol\";\n\nabstract contract ResolverCache is Initializable {\n\tIAddressResolver public resolver;\n\tmapping(bytes32 => address) private _addressCache;\n\n\tfunction __ResolverCache_init(address resolver_) internal onlyInitializing {\n\t\tresolver = IAddressResolver(resolver_);\n\t}\n\n\tfunction getAddress(bytes32 name_) public view returns (address) {\n\t\treturn _addressCache[name_];\n\t}\n\n\tfunction getRequiredAddress(bytes32 name_, string memory reason_) public view returns (address) {\n\t\taddress addr = getAddress(name_);\n\t\trequire(addr != address(0), reason_);\n\t\treturn addr;\n\t}\n\n\tfunction rebuildCache() public virtual {\n\t\tbytes32[] memory requiredAddresses = _resolverAddressesRequired();\n\t\tfor (uint256 i = 0; i < requiredAddresses.length; i++) {\n\t\t\tbytes32 name = requiredAddresses[i];\n\t\t\taddress addr = resolver.getRequiredAddress(name, \"AddressCache: address not found\");\n\t\t\t_addressCache[name] = addr;\n\t\t}\n\t}\n\n\tfunction isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = _resolverAddressesRequired();\n        for (uint256 i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != _addressCache[name] || _addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function _combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    function _resolverAddressesRequired() internal view virtual returns (bytes32[] memory addresses) {}\n\n    uint256[48] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/ISFTIssuableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISFTIssuableConcrete {\n    function createSlotOnlyDelegate(address txSender_, bytes calldata inputSlotInfo_) external returns (uint256 slot_);\n    function mintOnlyDelegate(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 tokenId_, uint256 amount_) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/ISFTIssuableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISFTIssuableDelegate {\n    function createSlotOnlyIssueMarket(address txSender, bytes calldata inputSlotInfo) external returns(uint256 slot);\n\tfunction mintOnlyIssueMarket(address txSender, address currency, address mintTo, uint256 slot, uint256 value) external payable returns(uint256 tokenId);\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/SFTIssuableDelegate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"./ISFTIssuableDelegate.sol\";\nimport \"./ISFTIssuableConcrete.sol\";\n\nabstract contract SFTIssuableDelegate is ISFTIssuableDelegate, BaseSFTDelegateUpgradeable, ResolverCache {\n\tfunction __SFTIssuableDelegate_init(address resolver_, string memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_) internal onlyInitializing {\n\t\t\t__BaseSFTDelegate_init(name_, symbol_, decimals_, concrete_, metadata_, owner_);\n\t\t\t__ResolverCache_init(resolver_);\n\t}\n\n\tfunction __SFTIssuableDelegate_init_unchained() internal onlyInitializing {\n\t}\n\n\tfunction createSlotOnlyIssueMarket(address txSender_, bytes calldata inputSlotInfo_) external virtual override nonReentrant returns(uint256 slot_) {\n\t\trequire(_msgSender() == _issueMarket(), \"SFTIssuableDelegate: only issue market\");\n\t\tslot_ = ISFTIssuableConcrete(concrete()).createSlotOnlyDelegate(txSender_, inputSlotInfo_);\n\t\trequire(!_slotExists(slot_), \"SFTIssuableDelegate: slot already exists\");\n\t\tERC3525SlotEnumerableUpgradeable._createSlot(slot_);\n\t\temit CreateSlot(slot_, txSender_, inputSlotInfo_);\n\t}\n\n\tfunction mintOnlyIssueMarket(address txSender_, address currency_, address mintTo_, uint256 slot_, uint256 value_) external payable virtual override nonReentrant returns(uint256 tokenId_) {\n\t\trequire(_msgSender() == _issueMarket(), \"SFTIssuableDelegate: only issue market\");\n\t\ttokenId_ = ERC3525Upgradeable._mint(mintTo_, slot_, value_);\n\t\tISFTIssuableConcrete(concrete()).mintOnlyDelegate(txSender_, currency_, mintTo_, slot_, tokenId_, value_);\n\t\temit MintValue(tokenId_, slot_, value_);\n\t}\t\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory) {\n\t\tbytes32[] memory existAddresses = super._resolverAddressesRequired();\n\t\tbytes32[] memory newAddresses = new bytes32[](1);\n\t\tnewAddresses[0] = Constants.CONTRACT_ISSUE_MARKET;\n\t\treturn _combineArrays(existAddresses, newAddresses);\n\t}\n\n\tfunction _issueMarket() internal view virtual returns (address) {\n\t\treturn getRequiredAddress(Constants.CONTRACT_ISSUE_MARKET, \"SFTIssuableDelegate: issueMarket not set\");\n\t}\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/multi-repayable/IMultiRepayableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMultiRepayableConcrete {\n\n    struct SlotRepayInfo {\n        uint256 initialValue;\n        uint256 totalValue;\n        uint256 repaidCurrencyAmount;\n    }\n\n    struct TokenRepayInfo {\n        uint256 initialValue;\n    }\n\n    function repayOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function repayWithBalanceOnlyDelegate(address txSender_, uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function mintOnlyDelegate(uint256 tokenId_, uint256 slot_, uint256 mintValue_) external;\n    function claimOnlyDelegate(uint256 tokenId_, uint256 slot_, address currency_, uint256 claimValue_) external returns (uint256);\n\n    function transferOnlyDelegate(uint256 fromTokenId_, uint256 toTokenId_, uint256 fromTokenBalance_, uint256 transferValue_) external;\n    \n    function slotInitialValue(uint256 slot_) external view returns (uint256);\n    function slotTotalValue(uint256 slot_) external view returns (uint256);\n    function repaidCurrencyAmount(uint256 slot_) external view returns (uint256);\n\n    function tokenInitialValue(uint256 tokenId_) external view returns (uint256);\n    function claimableValue(uint256 tokenId_) external view returns (uint256);\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/multi-repayable/IMultiRepayableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMultiRepayableDelegate {\n    event Repay(uint256 indexed slot, address indexed payer, uint256 repayCurrencyAmount);\n    event Claim(address indexed to, uint256 indexed tokenId, uint256 claimValue);\n\n    function repay(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function repayWithBalance(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable;\n    function claimTo(address to_, uint256 tokenId_, address currency_, uint256 claimValue_) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/multi-repayable/MultiRepayableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/helpers/ERC20TransferHelper.sol\";\nimport \"./IMultiRepayableDelegate.sol\";\nimport \"./IMultiRepayableConcrete.sol\";\n\nabstract contract MultiRepayableDelegate is IMultiRepayableDelegate, BaseSFTDelegateUpgradeable {\n\n    function repay(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override nonReentrant {\n        IMultiRepayableConcrete(concrete()).repayOnlyDelegate(_msgSender(), slot_, currency_, repayCurrencyAmount_);\n        ERC20TransferHelper.doTransferIn(currency_, _msgSender(), repayCurrencyAmount_);\n        emit Repay(slot_, _msgSender(), repayCurrencyAmount_);\n    }\n\n    function repayWithBalance(uint256 slot_, address currency_, uint256 repayCurrencyAmount_) external payable virtual override nonReentrant {\n        require(allowRepayWithBalance(), \"MultiRepayableDelegate: cannot repay with balance\");\n        IMultiRepayableConcrete(concrete()).repayWithBalanceOnlyDelegate(_msgSender(), slot_, currency_, repayCurrencyAmount_);\n        emit Repay(slot_, _msgSender(), repayCurrencyAmount_);\n    }\n\n    function claimTo(address to_, uint256 tokenId_, address currency_, uint256 claimValue_) external virtual override nonReentrant {\n        require(claimValue_ > 0, \"MultiRepayableDelegate: claim value is zero\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"MultiRepayableDelegate: caller is not owner nor approved\");\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        uint256 claimableValue = IMultiRepayableConcrete(concrete()).claimableValue(tokenId_);\n        require(claimValue_ <= claimableValue, \"MultiRepayableDelegate: over claim\");\n        \n        if (claimValue_ == ERC3525Upgradeable.balanceOf(tokenId_)) {\n            ERC3525Upgradeable._burn(tokenId_);\n        } else {\n            ERC3525Upgradeable._burnValue(tokenId_, claimValue_);\n        }\n        \n        uint256 claimCurrencyAmount = IMultiRepayableConcrete(concrete()).claimOnlyDelegate(tokenId_, slot, currency_, claimValue_);\n        ERC20TransferHelper.doTransferOut(currency_, payable(to_), claimCurrencyAmount);\n        emit Claim(to_, tokenId_, claimValue_);\n    }\n\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override(ERC3525SlotEnumerableUpgradeable) {\n        super._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n\n        if (from_ == address(0) && fromTokenId_ == 0) {\n            IMultiRepayableConcrete(concrete()).mintOnlyDelegate(toTokenId_, slot_, value_);\n        } \n        \n\t\tif (from_ != address(0) && fromTokenId_ != 0 && to_ != address(0) && toTokenId_ != 0) { \n            IMultiRepayableConcrete(concrete()).transferOnlyDelegate(fromTokenId_, toTokenId_, \n                ERC3525Upgradeable.balanceOf(fromTokenId_), value_);\n\t\t}\n    }\n\n    function allowRepayWithBalance() public view virtual returns (bool) {\n        return true;\n    }\n\n    uint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/ISFTValueIssuableConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../issuable/ISFTIssuableConcrete.sol\";\n\ninterface ISFTValueIssuableConcrete is ISFTIssuableConcrete {\n    function burnOnlyDelegate(uint256 tokenId, uint256 burnValue) external;\n}"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/ISFTValueIssuableDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../issuable/ISFTIssuableDelegate.sol\";\n\ninterface ISFTValueIssuableDelegate is ISFTIssuableDelegate {\n    function mintValueOnlyIssueMarket(address txSender, address currency, uint256 tokenId, uint256 mintValue) external payable;\n    function burnOnlyIssueMarket(uint256 tokenId, uint256 burnValue) external;\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableDelegate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"@solvprotocol/contracts-v3-address-resolver/contracts/ResolverCache.sol\";\nimport \"@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol\";\nimport \"./ISFTValueIssuableDelegate.sol\";\nimport \"./ISFTValueIssuableConcrete.sol\";\nimport \"../issuable/SFTIssuableDelegate.sol\";\n\nerror OnlyMarket();\n\nabstract contract SFTValueIssuableDelegate is ISFTValueIssuableDelegate, SFTIssuableDelegate {\n\n\tevent BurnValue(uint256 indexed tokenId, uint256 burnValue);\n\n\tfunction __SFTValueIssuableDelegate_init(\n\t\taddress resolver_, string memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_\n\t) internal onlyInitializing {\n\t\t__SFTIssuableDelegate_init(resolver_, name_, symbol_, decimals_, concrete_, metadata_, owner_);\n\t}\n\n\tfunction __SFTValueIssuableDelegate_init_unchained() internal onlyInitializing {\n\t}\n\n\tfunction mintValueOnlyIssueMarket(\n\t\taddress txSender_, address currency_, uint256 tokenId_, uint256 mintValue_\n\t) external payable virtual override nonReentrant {\n\t\tif (_msgSender() != _issueMarket()) {\n\t\t\trevert OnlyMarket();\n\t\t}\n\n\t\taddress owner = ERC3525Upgradeable.ownerOf(tokenId_);\n\t\tuint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n\n\t\tERC3525Upgradeable._mintValue(tokenId_, mintValue_);\n\t\tISFTIssuableConcrete(concrete()).mintOnlyDelegate(txSender_, currency_, owner, slot, tokenId_, mintValue_);\n\t\temit MintValue(tokenId_, slot, mintValue_);\n\t}\n\n\tfunction burnOnlyIssueMarket(uint256 tokenId_, uint256 burnValue_) external virtual override nonReentrant {\n\t\tif (_msgSender() != _issueMarket()) {\n\t\t\trevert OnlyMarket();\n\t\t}\n\n\t\tuint256 actualBurnValue = burnValue_ == 0 ? ERC3525Upgradeable.balanceOf(tokenId_) : burnValue_;\n\t\tISFTValueIssuableConcrete(concrete()).burnOnlyDelegate(tokenId_, actualBurnValue);\n\n\t\tif (burnValue_ == 0) {\n\t\t\tERC3525Upgradeable._burn(tokenId_);\n\t\t} else {\n\t\t\tERC3525Upgradeable._burnValue(tokenId_, burnValue_);\n\t\t}\n\t\temit BurnValue(tokenId_, actualBurnValue);\n\t}\n\n\tuint256[50] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/BaseSFTDelegateUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@solvprotocol/erc-3525/ERC3525SlotEnumerableUpgradeable.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTConcreteControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTDelegateControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol\";\nimport \"@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol\";\nimport \"./interface/IBaseSFTDelegate.sol\";\nimport \"./interface/IBaseSFTConcrete.sol\";\n\nabstract contract BaseSFTDelegateUpgradeable is IBaseSFTDelegate, ERC3525SlotEnumerableUpgradeable, \n\tOwnControl, SFTDelegateControl, ReentrancyGuardUpgradeable {\n\n\tevent CreateSlot(uint256 indexed _slot, address indexed _creator, bytes _slotInfo);\n\tevent MintValue(uint256 indexed _tokenId, uint256 indexed _slot, uint256 _value);\n\n\tfunction __BaseSFTDelegate_init(\n\t\tstring memory name_, string memory symbol_, uint8 decimals_, \n\t\taddress concrete_, address metadata_, address owner_\n\t) internal onlyInitializing {\n\t\tERC3525Upgradeable.__ERC3525_init(name_, symbol_, decimals_);\n\t\tOwnControl.__OwnControl_init(owner_);\n\t\tERC3525Upgradeable._setMetadataDescriptor(metadata_);\n\n\t\tSFTDelegateControl.__SFTDelegateControl_init(concrete_);\n\t\t__ReentrancyGuard_init();\n\n\t\t//address of concrete must be zero when initializing impletion contract avoid failed after upgrade\n\t\tif (concrete_ != Constants.ZERO_ADDRESS) {\n\t\t\tISFTConcreteControl(concrete_).setDelegate(address(this));\n\t\t}\n\t}\n\n\tfunction delegateToConcreteView(bytes calldata data) external view override returns (bytes memory) {\n\t\t(bool success, bytes memory returnData) = concrete().staticcall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize())\n            }\n        }\n        return returnData;\n\t}\n\n\tfunction contractType() external view virtual returns (string memory);\n\n\tuint256[50] private __gap;\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/interface/IBaseSFTConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBaseSFTConcrete {\n    function isSlotValid(uint256 slot_) external view returns (bool);\n} "
    },
    "@solvprotocol/contracts-v3-sft-core/contracts/interface/IBaseSFTDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBaseSFTDelegate  {\n    function delegateToConcreteView(bytes calldata data) external view returns (bytes memory);\n}\n"
    },
    "@solvprotocol/contracts-v3-sft-earn/contracts/EarnDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/issuable/SFTIssuableDelegate.sol\";\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/multi-repayable/MultiRepayableDelegate.sol\";\nimport \"./IEarnConcrete.sol\";\n\ncontract EarnDelegate is SFTIssuableDelegate, MultiRepayableDelegate {\n\n    event SetCurrency(address indexed currency, bool isAllowed);\n    event SetInterestRate(uint256 indexed slot, int32 interestRate);\n\n    bool private __allowRepayWithBalance;\n\n\tfunction initialize(\n        address resolver_, string calldata name_, string calldata symbol_, uint8 decimals_, \n\t\taddress concrete_, address descriptor_, address owner_, bool allowRepayWithBalance_\n    ) external initializer {\n\t\t__SFTIssuableDelegate_init(resolver_, name_, symbol_, decimals_, concrete_, descriptor_, owner_);\n        __allowRepayWithBalance = allowRepayWithBalance_;\n\t}\n\n\tfunction _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override(ERC3525SlotEnumerableUpgradeable, MultiRepayableDelegate) {\n        MultiRepayableDelegate._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n\n        // untransferable\n        if (from_ != address(0) && to_ != address(0)) {\n            require(IEarnConcrete(concrete()).isSlotTransferable(slot_), \"untransferable\");\n        }\n    }\n\n    function setCurrencyOnlyOwner(address currency_, bool isAllowed_) external onlyOwner {\n        IEarnConcrete(concrete()).setCurrencyOnlyDelegate(currency_, isAllowed_);\n        emit SetCurrency(currency_, isAllowed_);\n    }\n\n    function setInterestRateOnlySupervisor(uint256 slot_, int32 interestRate_) external {\n        IEarnConcrete(concrete()).setInterestRateOnlyDelegate(_msgSender(), slot_, interestRate_);\n        emit SetInterestRate(slot_, interestRate_);\n    }\n\n    function allowRepayWithBalance() public view virtual override returns (bool) {\n        return __allowRepayWithBalance;\n    }\n\n    function contractType() external view virtual override returns (string memory) {\n        return \"Closed-end Fund\";\n    }\n}"
    },
    "@solvprotocol/contracts-v3-sft-earn/contracts/IEarnConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IEarnConcrete {\n\tenum InterestType {\n\t\tFIXED,\n\t\tFLOATING\n\t}\n\n\tstruct InputSlotInfo {\n\t\taddress currency;\n\t\taddress supervisor;\n\t\tuint256 issueQuota;\n\t\tInterestType interestType;\n\t\tint32 interestRate;\n\t\tuint64 valueDate;\n\t\tuint64 maturity;\n\t\tuint64 createTime;\n\t\tbool transferable;\n\t\tstring externalURI;\n\t}\n\n\tstruct SlotBaseInfo {\n\t\taddress issuer;\n\t\taddress currency;\n\t\tuint64 valueDate;\n\t\tuint64 maturity;\n\t\tuint64 createTime;\n\t\tbool transferable;\n\t\tbool isValid;\n\t}\n\n\tstruct SlotExtInfo {\n\t\taddress supervisor;\n\t\tuint256 issueQuota;\n\t\tInterestType interestType;\n\t\tint32 interestRate;\n\t\tbool isInterestRateSet;\n\t\tstring externalURI;\n\t}\n\n\tfunction slotBaseInfo(uint256 slot_) external returns (SlotBaseInfo memory);\n\tfunction slotExtInfo(uint256 slot_) external returns (SlotExtInfo memory);\n\tfunction isSlotTransferable(uint256 slot_) external returns (bool);\n\tfunction isCurrencyAllowed(address currency_) external returns (bool);\n\n\tfunction setCurrencyOnlyDelegate(address currency_, bool isAllowed_) external;\n\tfunction setInterestRateOnlyDelegate(address txSender_, uint256 slot_, int32 interestRate_) external;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/AdminControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nabstract contract AdminControl is Initializable, ContextUpgradeable {\n\n    event NewAdmin(address oldAdmin, address newAdmin);\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    address public admin;\n    address public pendingAdmin;\n\n    modifier onlyAdmin() {\n        require(_msgSender() == admin, \"only admin\");\n        _;\n    }\n\n    function __AdminControl_init(address admin_) internal onlyInitializing {\n        __AdminControl_init_unchained(admin_);\n    }\n\n    function __AdminControl_init_unchained(address admin_) internal onlyInitializing {\n        admin = admin_;\n        emit NewAdmin(address(0), admin_);\n    }\n\n    function setPendingAdmin(address newPendingAdmin_) external virtual onlyAdmin {\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\n        pendingAdmin = newPendingAdmin_;        \n    }\n\n    function acceptAdmin() external virtual {\n        require(_msgSender() == pendingAdmin, \"only pending admin\");\n        emit NewAdmin(admin, pendingAdmin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n\tuint256[48] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTConcreteControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface ISFTConcreteControl {\n\tevent NewDelegate(address old_, address new_);\n\n\tfunction setDelegate(address newDelegate_) external;\n\tfunction delegate() external view returns (address);\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/ISFTDelegateControl.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISFTDelegateControl {\n\tevent NewConcrete(address old_, address new_);\n\n\tfunction concrete() external view returns (address);\n\tfunction setConcreteOnlyAdmin(address newConcrete_) external;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/OwnControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\n\nabstract contract OwnControl is AdminControl {\n\tevent NewOwner(address oldOwner, address newOwner);\n\n\taddress public owner;\n\n\tmodifier onlyOwner() {\n\t\trequire(owner == _msgSender(), \"only owner\");\n\t\t_;\n\t}\n\n\tfunction __OwnControl_init(address owner_) internal onlyInitializing {\n\t\t__OwnControl_init_unchained(owner_);\n\t\t__AdminControl_init_unchained(_msgSender());\n\t}\n\n\tfunction __OwnControl_init_unchained(address owner_) internal onlyInitializing {\n\t\t_setOwner(owner_);\n\t}\n\n\tfunction setOwnerOnlyAdmin(address newOwner_) public onlyAdmin {\n\t\t_setOwner(newOwner_);\n\t}\n\n\tfunction _setOwner(address newOwner_) internal {\n\t\trequire(newOwner_ != address(0), \"Owner address connot be 0\");\n\t\temit NewOwner(owner, newOwner_);\n\t\towner = newOwner_;\n\t}\n\n\tuint256[49] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/access/SFTDelegateControl.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AdminControl.sol\";\nimport \"./ISFTDelegateControl.sol\";\n\nabstract contract SFTDelegateControl is ISFTDelegateControl, AdminControl {\n    address private _concrete;\n\n    function __SFTDelegateControl_init(address concrete_) internal onlyInitializing {\n        __AdminControl_init_unchained(_msgSender());\n        __SFTDelegateControl_init_unchained(concrete_);\n    }\n\n    function __SFTDelegateControl_init_unchained(address concrete_) internal onlyInitializing {\n        _concrete = concrete_;\n    }\n\n    function concrete() public view override returns (address) {\n        return _concrete;\n    }\n\n    function setConcreteOnlyAdmin(address newConcrete_) external override onlyAdmin {\n        emit NewConcrete(_concrete, newConcrete_);\n        _concrete = newConcrete_;\n    }\n\n\tuint256[49] private __gap;\n}"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../misc/Constants.sol\";\n\ninterface ERC20Interface {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary ERC20TransferHelper {\n    function doApprove(address underlying, address spender, uint256 amount) internal {\n        require(underlying.code.length > 0, \"invalid underlying\");\n        (bool success, bytes memory data) = underlying.call(\n            abi.encodeWithSelector(\n                ERC20Interface.approve.selector,\n                spender,\n                amount\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SAF\");\n    }\n\n    function doTransferIn(address underlying, address from, uint256 amount) internal {\n        if (underlying == Constants.ETH_ADDRESS) {\n            // Sanity checks\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\n            require(msg.value >= amount, \"value mismatch\");\n        } else {\n            require(underlying.code.length > 0, \"invalid underlying\");\n            (bool success, bytes memory data) = underlying.call(\n                abi.encodeWithSelector(\n                    ERC20Interface.transferFrom.selector,\n                    from,\n                    address(this),\n                    amount\n                )\n            );\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \"STF\");\n        }\n    }\n\n    function doTransferOut(address underlying, address payable to, uint256 amount) internal {\n        if (underlying == Constants.ETH_ADDRESS) {\n            (bool success, ) = to.call{value: amount}(new bytes(0));\n            require(success, \"STE\");\n        } else {\n            require(underlying.code.length > 0, \"invalid underlying\");\n            (bool success, bytes memory data) = underlying.call(\n                abi.encodeWithSelector(\n                    ERC20Interface.transfer.selector,\n                    to,\n                    amount\n                )\n            );\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\n        }\n    }\n\n    function getCashPrior(address underlying_) internal view returns (uint256) {\n        if (underlying_ == Constants.ETH_ADDRESS) {\n            uint256 startingBalance = address(this).balance - msg.value;\n            return startingBalance;\n        } else {\n            ERC20Interface token = ERC20Interface(underlying_);\n            return token.balanceOf(address(this));\n        }\n    }\n}\n"
    },
    "@solvprotocol/contracts-v3-solidity-utils/contracts/misc/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Constants {\n    uint32 internal constant FULL_PERCENTAGE = 10000;\n\n    uint32 internal constant SECONDS_PER_YEAR = 360 * 24 * 60 * 60;\n    \n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    bytes32 internal constant CONTRACT_ISSUE_MARKET= \"IssueMarket\";\n    bytes32 internal constant CONTRACT_ISSUE_MARKET_PRICE_STRATEGY_MANAGER = \"IMPriceStrategyManager\";\n    bytes32 internal constant CONTRACT_ISSUE_MARKET_WHITELIST_STRATEGY_MANAGER = \"IMWhitelistStrategyManager\";\n\tbytes32 internal constant CONTRACT_ISSUE_MARKET_UNDERWRITER_PROFIT_TOKEN = \"IMUnderwriterProfitToken\";\n}\n"
    },
    "@solvprotocol/erc-3525/ERC3525SlotEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"./ERC3525Upgradeable.sol\";\nimport \"./extensions/IERC3525SlotEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ERC3525SlotEnumerableUpgradeable is Initializable, ContextUpgradeable, ERC3525Upgradeable, IERC3525SlotEnumerableUpgradeable {\n    function __ERC3525SlotEnumerable_init(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) internal onlyInitializing {\n        __ERC3525_init_unchained(name_, symbol_, decimals_);\n    }\n\n    function __ERC3525SlotEnumerable_init_unchained(\n        string memory,\n        string memory,\n        uint8\n    ) internal onlyInitializing {\n    }\n\n    struct SlotData {\n        uint256 slot;\n        uint256[] slotTokens;\n    }\n\n    // slot => tokenId => index\n    mapping(uint256 => mapping(uint256 => uint256)) private _slotTokensIndex;\n\n    SlotData[] private _allSlots;\n\n    // slot => index\n    mapping(uint256 => uint256) private _allSlotsIndex;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC3525Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC3525SlotEnumerableUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function slotCount() public view virtual override returns (uint256) {\n        return _allSlots.length;\n    }\n\n    function slotByIndex(uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525SlotEnumerableUpgradeable.slotCount(), \"ERC3525SlotEnumerable: slot index out of bounds\");\n        return _allSlots[index_].slot;\n    }\n\n    function _slotExists(uint256 slot_) internal view virtual returns (bool) {\n        return _allSlots.length != 0 && _allSlots[_allSlotsIndex[slot_]].slot == slot_;\n    }\n\n    function tokenSupplyInSlot(uint256 slot_) public view virtual override returns (uint256) {\n        if (!_slotExists(slot_)) {\n            return 0;\n        }\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens.length;\n    }\n\n    function tokenInSlotByIndex(uint256 slot_, uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525SlotEnumerableUpgradeable.tokenSupplyInSlot(slot_), \"ERC3525SlotEnumerable: slot token index out of bounds\");\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens[index_];\n    }\n\n    function _tokenExistsInSlot(uint256 slot_, uint256 tokenId_) private view returns (bool) {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        return slotData.slotTokens.length > 0 && slotData.slotTokens[_slotTokensIndex[slot_][tokenId_]] == tokenId_;\n    }\n\n    function _createSlot(uint256 slot_) internal virtual {\n        require(!_slotExists(slot_), \"ERC3525SlotEnumerable: slot already exists\");\n        SlotData memory slotData = SlotData({\n            slot: slot_, \n            slotTokens: new uint256[](0)\n        });\n        _addSlotToAllSlotsEnumeration(slotData);\n        emit SlotChanged(0, 0, slot_);\n    }\n\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override {\n        super._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n\n        if (from_ == address(0) && fromTokenId_ == 0 && !_slotExists(slot_)) {\n            _createSlot(slot_);\n        }\n\n        //Shh - currently unused\n        to_;\n        toTokenId_;\n        value_;\n    }\n\n    function _afterValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override {\n        if (from_ == address(0) && fromTokenId_ == 0 && !_tokenExistsInSlot(slot_, toTokenId_)) {\n            _addTokenToSlotEnumeration(slot_, toTokenId_);\n        } else if (to_ == address(0) && toTokenId_ == 0 && _tokenExistsInSlot(slot_, fromTokenId_)) {\n            _removeTokenFromSlotEnumeration(slot_, fromTokenId_);\n        }\n\n        //Shh - currently unused\n        value_;\n\n        super._afterValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n    }\n\n    function _addSlotToAllSlotsEnumeration(SlotData memory slotData) private {\n        _allSlotsIndex[slotData.slot] = _allSlots.length;\n        _allSlots.push(slotData);\n    }\n\n    function _addTokenToSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        _slotTokensIndex[slot_][tokenId_] = slotData.slotTokens.length;\n        slotData.slotTokens.push(tokenId_);\n    }\n\n    function _removeTokenFromSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\n        uint256 lastTokenIndex = slotData.slotTokens.length - 1;\n        uint256 lastTokenId = slotData.slotTokens[lastTokenIndex];\n        uint256 tokenIndex = _slotTokensIndex[slot_][tokenId_];\n\n        slotData.slotTokens[tokenIndex] = lastTokenId;\n        _slotTokensIndex[slot_][lastTokenId] = tokenIndex;\n\n        delete _slotTokensIndex[slot_][tokenId_];\n        slotData.slotTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}"
    },
    "@solvprotocol/erc-3525/ERC3525Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC3525Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./IERC3525ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721EnumerableUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"./extensions/IERC3525MetadataUpgradeable.sol\";\nimport \"./periphery/interface/IERC3525MetadataDescriptorUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ERC3525Upgradeable is Initializable, ContextUpgradeable, IERC3525MetadataUpgradeable, IERC721EnumerableUpgradeable {\n    using StringsUpgradeable for address;\n    using StringsUpgradeable for uint256;\n    using AddressUpgradeable for address;\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    event SetMetadataDescriptor(address indexed metadataDescriptor);\n\n    struct TokenData {\n        uint256 id;\n        uint256 slot;\n        uint256 balance;\n        address owner;\n        address approved;\n        address[] valueApprovals;\n    }\n\n    struct AddressData {\n        uint256[] ownedTokens;\n        mapping(uint256 => uint256) ownedTokensIndex;\n        mapping(address => bool) approvals;\n    }\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    CountersUpgradeable.Counter private _tokenIdGenerator;\n\n    // id => (approval => allowance)\n    // @dev _approvedValues cannot be defined within TokenData, cause struct containing mappings cannot be constructed.\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\n\n    TokenData[] private _allTokens;\n\n    // key: id\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    mapping(address => AddressData) private _addressData;\n\n    IERC3525MetadataDescriptorUpgradeable public metadataDescriptor;\n\n    function __ERC3525_init(string memory name_, string memory symbol_, uint8 decimals_) internal onlyInitializing {\n        __ERC3525_init_unchained(name_, symbol_, decimals_);\n    }\n\n    function __ERC3525_init_unchained(string memory name_, string memory symbol_, uint8 decimals_) internal onlyInitializing {\n         _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC165Upgradeable).interfaceId ||\n            interfaceId == type(IERC3525Upgradeable).interfaceId ||\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC3525MetadataUpgradeable).interfaceId ||\n            interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || \n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId;\n    }\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals the token uses for value.\n     */\n    function valueDecimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\n    }\n\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\n        _requireMinted(tokenId_);\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\n        require(owner_ != address(0), \"ERC3525: invalid token ID\");\n    }\n\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    function contractURI() public view virtual override returns (string memory) {\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructContractURI() :\n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, \"contract/\", StringsUpgradeable.toHexString(address(this)))) : \n                    \"\";\n    }\n\n    function slotURI(uint256 slot_) public view virtual override returns (string memory) {\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructSlotURI(slot_) : \n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, \"slot/\", slot_.toString())) : \n                    \"\";\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\n        _requireMinted(tokenId_);\n        string memory baseURI = _baseURI();\n        return \n            address(metadataDescriptor) != address(0) ? \n                metadataDescriptor.constructTokenURI(tokenId_) : \n                bytes(baseURI).length > 0 ? \n                    string(abi.encodePacked(baseURI, tokenId_.toString())) : \n                    \"\";\n    }\n\n    function approve(uint256 tokenId_, address to_, uint256 value_) public payable virtual override {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        require(to_ != owner, \"ERC3525: approval to current owner\");\n\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: approve caller is not owner nor approved\");\n\n        _approveValue(tokenId_, to_, value_);\n    }\n\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\n        _requireMinted(tokenId_);\n        return _approvedValues[tokenId_][operator_];\n    }\n\n    function transferFrom(\n        uint256 fromTokenId_,\n        address to_,\n        uint256 value_\n    ) public payable virtual override returns (uint256 newTokenId) {\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\n\n        newTokenId = _createDerivedTokenId(fromTokenId_);\n        _mint(to_, newTokenId, ERC3525Upgradeable.slotOf(fromTokenId_), 0);\n        _transferValue(fromTokenId_, newTokenId, value_);\n    }\n\n    function transferFrom(\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 value_\n    ) public payable virtual override {\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\n        _transferValue(fromTokenId_, toTokenId_, value_);\n    }\n\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\n        require(owner_ != address(0), \"ERC3525: balance query for the zero address\");\n        return _addressData[owner_].ownedTokens.length;\n    }\n\n    function transferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) public payable virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\n        _transferTokenId(from_, to_, tokenId_);\n    }\n\n    function safeTransferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) public payable virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"ERC3525: transfer caller is not owner nor approved\");\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\n    }\n\n    function safeTransferFrom(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) public payable virtual override {\n        safeTransferFrom(from_, to_, tokenId_, \"\");\n    }\n\n    function approve(address to_, uint256 tokenId_) public payable virtual override {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        require(to_ != owner, \"ERC3525: approval to current owner\");\n\n        require(\n            _msgSender() == owner || ERC3525Upgradeable.isApprovedForAll(owner, _msgSender()),\n            \"ERC3525: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to_, tokenId_);\n    }\n\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\n        _requireMinted(tokenId_);\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\n    }\n\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\n        _setApprovalForAll(_msgSender(), operator_, approved_);\n    }\n\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\n        return _addressData[owner_].approvals[operator_];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525Upgradeable.totalSupply(), \"ERC3525: global index out of bounds\");\n        return _allTokens[index_].id;\n    }\n\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\n        require(index_ < ERC3525Upgradeable.balanceOf(owner_), \"ERC3525: owner index out of bounds\");\n        return _addressData[owner_].ownedTokens[index_];\n    }\n\n    function _setApprovalForAll(\n        address owner_,\n        address operator_,\n        bool approved_\n    ) internal virtual {\n        require(owner_ != operator_, \"ERC3525: approve to caller\");\n\n        _addressData[owner_].approvals[operator_] = approved_;\n\n        emit ApprovalForAll(owner_, operator_, approved_);\n    }\n\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        return (\n            operator_ == owner ||\n            ERC3525Upgradeable.isApprovedForAll(owner, operator_) ||\n            ERC3525Upgradeable.getApproved(tokenId_) == operator_\n        );\n    }\n\n    function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual {\n        uint256 currentAllowance = ERC3525Upgradeable.allowance(tokenId_, operator_);\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\n            require(currentAllowance >= value_, \"ERC3525: insufficient allowance\");\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\n        }\n    }\n\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\n    }\n\n    function _requireMinted(uint256 tokenId_) internal view virtual {\n        require(_exists(tokenId_), \"ERC3525: invalid token ID\");\n    }\n\n    function _mint(address to_, uint256 slot_, uint256 value_) internal virtual returns (uint256 tokenId) {\n        tokenId = _createOriginalTokenId();\n        _mint(to_, tokenId, slot_, value_);  \n    }\n\n    function _mint(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual {\n        require(to_ != address(0), \"ERC3525: mint to the zero address\");\n        require(tokenId_ != 0, \"ERC3525: cannot mint zero tokenId\");\n        require(!_exists(tokenId_), \"ERC3525: token already minted\");\n\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\n        __mintToken(to_, tokenId_, slot_);\n        __mintValue(tokenId_, value_);\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\n    }\n\n    function _mintValue(uint256 tokenId_, uint256 value_) internal virtual {\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        _beforeValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\n        __mintValue(tokenId_, value_);\n        _afterValueTransfer(address(0), owner, 0, tokenId_, slot, value_);\n    }\n\n    function __mintValue(uint256 tokenId_, uint256 value_) private {\n        _allTokens[_allTokensIndex[tokenId_]].balance += value_;\n        emit TransferValue(0, tokenId_, value_);\n    }\n\n    function __mintToken(address to_, uint256 tokenId_, uint256 slot_) private {\n        TokenData memory tokenData = TokenData({\n            id: tokenId_,\n            slot: slot_,\n            balance: 0,\n            owner: to_,\n            approved: address(0),\n            valueApprovals: new address[](0)\n        });\n\n        _addTokenToAllTokensEnumeration(tokenData);\n        _addTokenToOwnerEnumeration(to_, tokenId_);\n\n        emit Transfer(address(0), to_, tokenId_);\n        emit SlotChanged(tokenId_, 0, slot_);\n    }\n\n    function _burn(uint256 tokenId_) internal virtual {\n        _requireMinted(tokenId_);\n\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        address owner = tokenData.owner;\n        uint256 slot = tokenData.slot;\n        uint256 value = tokenData.balance;\n\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\n\n        _clearApprovedValues(tokenId_);\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\n        _removeTokenFromAllTokensEnumeration(tokenId_);\n\n        emit TransferValue(tokenId_, 0, value);\n        emit SlotChanged(tokenId_, slot, 0);\n        emit Transfer(owner, address(0), tokenId_);\n\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\n    }\n\n    function _burnValue(uint256 tokenId_, uint256 burnValue_) internal virtual {\n        _requireMinted(tokenId_);\n\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        address owner = tokenData.owner;\n        uint256 slot = tokenData.slot;\n        uint256 value = tokenData.balance;\n\n        require(value >= burnValue_, \"ERC3525: burn value exceeds balance\");\n\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\n        \n        tokenData.balance -= burnValue_;\n        emit TransferValue(tokenId_, 0, burnValue_);\n        \n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, burnValue_);\n    }\n\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\n\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\n        _addressData[to_].ownedTokens.push(tokenId_);\n    }\n\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\n\n        AddressData storage ownerData = _addressData[from_];\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\n\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\n\n        delete ownerData.ownedTokensIndex[tokenId_];\n        ownerData.ownedTokens.pop();\n    }\n\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\n        _allTokens.push(tokenData_);\n    }\n\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId_];\n        _allTokens.pop();\n    }\n\n    function _approve(address to_, uint256 tokenId_) internal virtual {\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\n        emit Approval(ERC3525Upgradeable.ownerOf(tokenId_), to_, tokenId_);\n    }\n\n    function _approveValue(\n        uint256 tokenId_,\n        address to_,\n        uint256 value_\n    ) internal virtual {\n        require(to_ != address(0), \"ERC3525: approve value to the zero address\");\n        if (!_existApproveValue(to_, tokenId_)) {\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\n        }\n        _approvedValues[tokenId_][to_] = value_;\n\n        emit ApprovalValue(tokenId_, to_, value_);\n    }\n\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\n        uint256 length = tokenData.valueApprovals.length;\n        for (uint256 i = 0; i < length; i++) {\n            address approval = tokenData.valueApprovals[i];\n            delete _approvedValues[tokenId_][approval];\n        }\n        delete tokenData.valueApprovals;\n    }\n\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _transferValue(\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 value_\n    ) internal virtual {\n        require(_exists(fromTokenId_), \"ERC3525: transfer from invalid token ID\");\n        require(_exists(toTokenId_), \"ERC3525: transfer to invalid token ID\");\n\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\n\n        require(fromTokenData.balance >= value_, \"ERC3525: insufficient balance for transfer\");\n        require(fromTokenData.slot == toTokenData.slot, \"ERC3525: transfer to token with different slot\");\n\n        _beforeValueTransfer(\n            fromTokenData.owner,\n            toTokenData.owner,\n            fromTokenId_,\n            toTokenId_,\n            fromTokenData.slot,\n            value_\n        );\n\n        fromTokenData.balance -= value_;\n        toTokenData.balance += value_;\n\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\n\n        _afterValueTransfer(\n            fromTokenData.owner,\n            toTokenData.owner,\n            fromTokenId_,\n            toTokenId_,\n            fromTokenData.slot,\n            value_\n        );\n\n        require(\n            _checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \"\"),\n            \"ERC3525: transfer rejected by ERC3525Receiver\"\n        );\n    }\n\n    function _transferTokenId(\n        address from_,\n        address to_,\n        uint256 tokenId_\n    ) internal virtual {\n        require(ERC3525Upgradeable.ownerOf(tokenId_) == from_, \"ERC3525: transfer from invalid owner\");\n        require(to_ != address(0), \"ERC3525: transfer to the zero address\");\n\n        uint256 slot = ERC3525Upgradeable.slotOf(tokenId_);\n        uint256 value = ERC3525Upgradeable.balanceOf(tokenId_);\n\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\n\n        _approve(address(0), tokenId_);\n        _clearApprovedValues(tokenId_);\n\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\n        _addTokenToOwnerEnumeration(to_, tokenId_);\n\n        emit Transfer(from_, to_, tokenId_);\n\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slot, value);\n    }\n\n    function _safeTransferTokenId(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) internal virtual {\n        _transferTokenId(from_, to_, tokenId_);\n        require(\n            _checkOnERC721Received(from_, to_, tokenId_, data_),\n            \"ERC3525: transfer to non ERC721Receiver\"\n        );\n    }\n\n    function _checkOnERC3525Received( \n        uint256 fromTokenId_, \n        uint256 toTokenId_, \n        uint256 value_, \n        bytes memory data_\n    ) internal virtual returns (bool) {\n        address to = ERC3525Upgradeable.ownerOf(toTokenId_);\n        if (to.isContract()) {\n            try IERC165Upgradeable(to).supportsInterface(type(IERC3525ReceiverUpgradeable).interfaceId) returns (bool retval) {\n                if (retval) {\n                    bytes4 receivedVal = IERC3525ReceiverUpgradeable(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_);\n                    return receivedVal == IERC3525ReceiverUpgradeable.onERC3525Received.selector;\n                } else {\n                    return true;\n                }\n            } catch (bytes memory /** reason */) {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from_ address representing the previous owner of the given token ID\n     * @param to_ target address that will receive the tokens\n     * @param tokenId_ uint256 ID of the token to be transferred\n     * @param data_ bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from_,\n        address to_,\n        uint256 tokenId_,\n        bytes memory data_\n    ) private returns (bool) {\n        if (to_.isContract()) {\n            try \n                IERC721ReceiverUpgradeable(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /* solhint-disable */\n    function _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual {}\n\n    function _afterValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual {}\n    /* solhint-enable */\n\n    function _setMetadataDescriptor(address metadataDescriptor_) internal virtual {\n        metadataDescriptor = IERC3525MetadataDescriptorUpgradeable(metadataDescriptor_);\n        emit SetMetadataDescriptor(metadataDescriptor_);\n    }\n\n    function _createOriginalTokenId() internal virtual returns (uint256) {\n         _tokenIdGenerator.increment();\n        return _tokenIdGenerator.current();\n    }\n\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\n        fromTokenId_;\n        return _createOriginalTokenId();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n\n"
    },
    "@solvprotocol/erc-3525/IERC3525ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\n/**\n * @title EIP-3525 token receiver interface\n * @dev Interface for a smart contract that wants to be informed by EIP-3525 contracts when \n *  receiving values from ANY addresses or EIP-3525 tokens.\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\n */\ninterface IERC3525ReceiverUpgradeable {\n    /**\n     * @notice Handle the receipt of an EIP-3525 token value.\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the \n     *  recipient contract, if the recipient contract implements this function, the EIP-3525 \n     *  contract MUST call this function after a value transfer (i.e. `transferFrom(uint256,\n     *  uint256,uint256,bytes)`).\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\n     *  uint256,bytes)'))`) if the transfer is accepted.\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\n     * @param _operator The address which triggered the transfer\n     * @param _fromTokenId The token id to transfer value from\n     * @param _toTokenId The token id to transfer value to\n     * @param _value The transferred value\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))` \n     *  unless the transfer is rejected.\n     */\n    function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes calldata _data) external returns (bytes4);\n\n}"
    },
    "@solvprotocol/erc-3525/IERC3525Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-3525 Semi-Fungible Token Standard\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0xd5358140.\n */\ninterface IERC3525Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\n    /**\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\n     * @param _fromTokenId The token id to transfer value from\n     * @param _toTokenId The token id to transfer value to\n     * @param _value The transferred value\n     */\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\n\n    /**\n     * @dev MUST emits when the approval value of a token is set or changed.\n     * @param _tokenId The token to approve\n     * @param _operator The operator to approve for\n     * @param _value The maximum value that `_operator` is allowed to manage\n     */\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\n\n    /**\n     * @dev MUST emit when the slot of a token is set or changed.\n     * @param _tokenId The token of which slot is set or changed\n     * @param _oldSlot The previous slot of the token\n     * @param _newSlot The updated slot of the token\n     */ \n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\n\n    /**\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\n     *  Considering the compatibility with third-party wallets, this function is defined as\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.\n     * @return The number of decimals for value\n     */\n    function valueDecimals() external view returns (uint8);\n\n    /**\n     * @notice Get the value of a token.\n     * @param _tokenId The token for which to query the balance\n     * @return The value of `_tokenId`\n     */\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     * @notice Get the slot of a token.\n     * @param _tokenId The identifier for a token\n     * @return The slot of the token\n     */\n    function slotOf(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     * @notice Allow an operator to manage the value of a token, up to the `_value` amount.\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\n     *  address for `_tokenId`.\n     *  MUST emit ApprovalValue event.\n     * @param _tokenId The token to approve\n     * @param _operator The operator to be approved\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\n     */\n    function approve(\n        uint256 _tokenId,\n        address _operator,\n        uint256 _value\n    ) external payable;\n\n    /**\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\n     * @param _tokenId The token for which to query the allowance\n     * @param _operator The address of an operator\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\n     */\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\n\n    /**\n     * @notice Transfer value from a specified token to another specified token with the same slot.\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\n     *  approved the whole `_fromTokenId` or part of it.\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\n     *  operator.\n     *  MUST emit `TransferValue` event.\n     * @param _fromTokenId The token to transfer value from\n     * @param _toTokenId The token to transfer value to\n     * @param _value The transferred value\n     */\n    function transferFrom(\n        uint256 _fromTokenId,\n        uint256 _toTokenId,\n        uint256 _value\n    ) external payable;\n\n    /**\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\n     *  `_to` is capable of receiving ERC3525 tokens.\n     * @dev This function MUST create a new ERC3525 token with the same slot for `_to` to receive\n     *  the transferred value.\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\n     *  MUST revert if `_to` is zero address.\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\n     *  operator.\n     *  MUST emit `Transfer` and `TransferValue` events.\n     * @param _fromTokenId The token to transfer value from\n     * @param _to The address to transfer value to\n     * @param _value The transferred value\n     * @return ID of the new token created for `_to` which receives the transferred value\n     */\n    function transferFrom(\n        uint256 _fromTokenId,\n        address _to,\n        uint256 _value\n    ) external payable returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\n *  Note: the ERC-165 identifier for this interface is 0x150b7a02.\n */\ninterface IERC721ReceiverUpgradeable {\n    /** \n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. Return of other than the magic value MUST result in the\n     *  transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _operator The address which called `safeTransferFrom` function\n     * @param _from The address which previously owned the token\n     * @param _tokenId The NFT identifier which is being transferred\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onERC721Received(\n        address _operator, \n        address _from, \n        uint256 _tokenId, \n        bytes calldata _data\n    ) external returns(bytes4);\n}\n"
    },
    "@solvprotocol/erc-3525/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/** \n * @title ERC-721 Non-Fungible Token Standard\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /** \n     * @dev This emits when ownership of any NFT changes by any mechanism.\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\n     *  may be created and assigned without emitting Transfer. At the time of\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when the approved address for an NFT is changed or\n     *  reaffirmed. The zero address indicates there is no approved address.\n     *  When a Transfer event emits, this also indicates that the approved\n     *  address for that NFT (if any) is reset to none.\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when an operator is enabled or disabled for an owner.\n     *  The operator can manage all NFTs of the owner.\n     */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * @notice Count all NFTs assigned to an owner\n     * @dev NFTs assigned to the zero address are considered invalid, and this\n     *  function throws for queries about the zero address.\n     * @param _owner An address for whom to query the balance\n     * @return The number of NFTs owned by `_owner`, possibly zero\n     */\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Find the owner of an NFT\n     * @dev NFTs assigned to zero address are considered invalid, and queries\n     *  about them do throw.\n     * @param _tokenId The identifier for an NFT\n     * @return The address of the owner of the NFT\n     */\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\n     *  `onERC721Received` on `_to` and throws if the return value is not\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     * @param data Additional data with no specified format, sent in call to `_to`\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev This works identically to the other function with an extra data parameter,\n     *  except this function just sets data to \"\".\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n     *  THEY MAY BE PERMANENTLY LOST\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Change or reaffirm the approved address for an NFT\n     * @dev The zero address indicates there is no approved address.\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\n     *  operator of the current owner.\n     * @param _approved The new approved NFT controller\n     * @param _tokenId The NFT to approve\n     */\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage\n     *  all of `msg.sender`'s assets\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\n     *  multiple operators per owner.\n     * @param _operator Address to add to the set of authorized operators\n     * @param _approved True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice Get the approved address for a single NFT\n     * @dev Throws if `_tokenId` is not a valid NFT.\n     * @param _tokenId The NFT to find the approved address for\n     * @return The approved address for this NFT, or the zero address if there is none\n     */\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice Query if an address is an authorized operator for another address\n     * @param _owner The address that owns the NFTs\n     * @param _operator The address that acts on behalf of the owner\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\n     */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC3525MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC3525Upgradeable.sol\";\nimport \"./IERC721MetadataUpgradeable.sol\";\n\n/**\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\n *  (URI) for the ERC3525 contract as well as a specified slot.\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\n *  to any resource stored in a centralized system.\n *  See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\n */\ninterface IERC3525MetadataUpgradeable is IERC3525Upgradeable, IERC721MetadataUpgradeable {\n    /**\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\n     *  header `data:application/json;`.\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\n     * @return The JSON formatted URI of the current ERC3525 contract\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\n     *  `data:application/json;`.\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\n     * @return The JSON formatted URI of `_slot`\n     */\n    function slotURI(uint256 _slot) external view returns (string memory);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC3525SlotEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC3525Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\n/**\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for slot enumeration\n * @dev Interfaces for any contract that wants to support enumeration of slots as well as tokens \n *  with the same slot.\n *  See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0x3b741b9e.\n */\ninterface IERC3525SlotEnumerableUpgradeable is IERC3525Upgradeable, IERC721EnumerableUpgradeable {\n\n    /**\n     * @notice Get the total amount of slots stored by the contract.\n     * @return The total amount of slots\n     */\n    function slotCount() external view returns (uint256);\n\n    /**\n     * @notice Get the slot at the specified index of all slots stored by the contract.\n     * @param _index The index in the slot list\n     * @return The slot at `index` of all slots.\n     */\n    function slotByIndex(uint256 _index) external view returns (uint256);\n\n    /**\n     * @notice Get the total amount of tokens with the same slot.\n     * @param _slot The slot to query token supply for\n     * @return The total amount of tokens with the specified `_slot`\n     */\n    function tokenSupplyInSlot(uint256 _slot) external view returns (uint256);\n\n    /**\n     * @notice Get the token at the specified index of all tokens with the same slot.\n     * @param _slot The slot to query tokens with\n     * @param _index The index in the token list of the slot\n     * @return The token ID at `_index` of all tokens with `_slot`\n     */\n    function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /** \n     * @notice Count NFTs tracked by this contract\n     * @return A count of valid NFTs tracked by this contract, where each one of\n     *  them has an assigned and queryable owner not equal to the zero address\n     */\n    function totalSupply() external view returns (uint256);\n\n    /** \n     * @notice Enumerate valid NFTs\n     * @dev Throws if `_index` >= `totalSupply()`.\n     * @param _index A counter less than `totalSupply()`\n     * @return The token identifier for the `_index`th NFT,\n     *  (sort order not specified)\n     */\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /** \n     * @notice Enumerate NFTs assigned to an owner\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n     *  `_owner` is the zero address, representing invalid NFTs.\n     * @param _owner An address where we are interested in NFTs owned by them\n     * @param _index A counter less than `balanceOf(_owner)`\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\n     *  (sort order not specified)\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
    },
    "@solvprotocol/erc-3525/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @notice A descriptive name for a collection of NFTs in this contract\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice An abbreviated name for NFTs in this contract\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n     *  Metadata JSON Schema\".\n     */\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n"
    },
    "@solvprotocol/erc-3525/periphery/interface/IERC3525MetadataDescriptorUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC3525MetadataDescriptorUpgradeable {\n\n    function constructContractURI() external view returns (string memory);\n\n    function constructSlotURI(uint256 slot) external view returns (string memory);\n    \n    function constructTokenURI(uint256 tokenId) external view returns (string memory);\n\n}"
    },
    "contracts/open-fund-shares/IOpenFundShareConcrete.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-earn/contracts/IEarnConcrete.sol\";\n\ninterface IOpenFundShareConcrete is IEarnConcrete {\n}"
    },
    "contracts/open-fund-shares/IOpenFundShareDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IOpenFundShareDelegate {\n\t\n}"
    },
    "contracts/open-fund-shares/OpenFundShareDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@solvprotocol/contracts-v3-sft-earn/contracts/EarnDelegate.sol\";\nimport \"@solvprotocol/contracts-v3-sft-abilities/contracts/value-issuable/SFTValueIssuableDelegate.sol\";\nimport \"./IOpenFundShareDelegate.sol\";\nimport \"./IOpenFundShareConcrete.sol\";\n\ncontract OpenFundShareDelegate is IOpenFundShareDelegate, EarnDelegate, SFTValueIssuableDelegate {\n\n\tbytes32 internal constant CONTRACT_OPEN_FUND_MARKET = \"OpenFundMarket\"; \n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() { \n        _disableInitializers();\n    }\n\n\tfunction _beforeValueTransfer(\n        address from_,\n        address to_,\n        uint256 fromTokenId_,\n        uint256 toTokenId_,\n        uint256 slot_,\n        uint256 value_\n    ) internal virtual override(ERC3525SlotEnumerableUpgradeable, EarnDelegate) {\n        EarnDelegate._beforeValueTransfer(from_, to_, fromTokenId_, toTokenId_, slot_, value_);\n    }\n\n\tfunction _resolverAddressesRequired() internal view virtual override returns (bytes32[] memory addressNames) {\n\t\taddressNames = new bytes32[](1);\n\t\taddressNames[0] = CONTRACT_OPEN_FUND_MARKET;\n\t}\n\n\tfunction _issueMarket() internal view virtual override returns (address) {\n\t\treturn getRequiredAddress(CONTRACT_OPEN_FUND_MARKET, \"OFSD: Market not set\");\n\t}\n\n\tfunction contractType() external view virtual override(BaseSFTDelegateUpgradeable, EarnDelegate) returns (string memory) {\n        return \"Open Fund Shares\";\n    }\n}"
    }
  }
}}