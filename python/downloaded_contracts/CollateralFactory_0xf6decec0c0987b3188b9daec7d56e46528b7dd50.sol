{{
  "language": "Solidity",
  "sources": {
    "src/CollateralFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma experimental ABIEncoderV2;\npragma solidity 0.6.7;\n\nabstract contract FactoryLike {\n    function deploy(\n        address,\n        bytes32,\n        address,\n        address\n    ) external virtual returns (address);\n\n    function deploy(address, address) external virtual returns (address);\n\n    function deploy(\n        address,\n        address,\n        bytes32,\n        address\n    ) external virtual returns (address);\n\n    function deploy(\n        address,\n        address,\n        address,\n        bytes32[3] calldata,\n        uint256,\n        uint256,\n        address,\n        address,\n        uint256,\n        address\n    ) external virtual returns (address);\n}\n\nabstract contract Setter {\n    function collateralType() external view virtual returns (bytes32);\n\n    function addAuthorization(address) external virtual;\n\n    function modifyParameters(bytes32, address) external virtual;\n\n    function modifyParameters(bytes32, uint256) external virtual;\n\n    function modifyParameters(bytes32, bytes32, address) external virtual;\n\n    function modifyParameters(bytes32, bytes32, uint256) external virtual;\n\n    function initializeCollateralType(bytes32) external virtual;\n\n    function updateCollateralPrice(bytes32) external virtual;\n\n    function setPerBlockAllowance(address, uint) external virtual;\n\n    function setTotalAllowance(address, uint) external virtual;\n}\n\n// @dev This is just a proxy action, meant to be used by a GEB system and called through DS-Pause (it assumes the caller, DS-Proxy, owns all contracts it touches)\n// @dev Direct calls to this contract will revert.\ncontract CollateralFactory {\n    address public immutable pauseProxy;\n    Setter public immutable safeEngine;\n    Setter public immutable taxCollector;\n    Setter public immutable liquidationEngine;\n    Setter public immutable oracleRelayer;\n    Setter public immutable globalSettlement;\n    Setter public immutable stabilityFeeTreasury;\n    FactoryLike public immutable osmFactory;\n    FactoryLike public immutable joinFactory;\n    FactoryLike public immutable auctionHouseFactory;\n    FactoryLike public immutable keeperIncentivesFactory;\n\n    event contractDeployed(string, address);\n\n    constructor(\n        address pauseProxy_,\n        address safeEngine_,\n        address liquidationEngine_,\n        address oracleRelayer_,\n        address globalSettlement_,\n        address taxCollector_,\n        address stabilityFeeTreasury_,\n        address osmFactory_,\n        address joinFactory_,\n        address auctionHouseFactory_,\n        address keeperIncentivesFactory_\n    ) public {\n        pauseProxy = pauseProxy_;\n        safeEngine = Setter(safeEngine_);\n        liquidationEngine = Setter(liquidationEngine_);\n        oracleRelayer = Setter(oracleRelayer_);\n        globalSettlement = Setter(globalSettlement_);\n        taxCollector = Setter(taxCollector_);\n        stabilityFeeTreasury = Setter(stabilityFeeTreasury_);\n        osmFactory = FactoryLike(osmFactory_);\n        joinFactory = FactoryLike(joinFactory_);\n        auctionHouseFactory = FactoryLike(auctionHouseFactory_);\n        keeperIncentivesFactory = FactoryLike(keeperIncentivesFactory_);\n    }\n\n    function deployJoin(\n        bytes32 collateralType,\n        address token\n    ) internal returns (address) {\n        return\n            joinFactory.deploy(\n                address(safeEngine),\n                collateralType,\n                token,\n                pauseProxy\n            );\n    }\n\n    function deployAuctionHouse(\n        bytes32 collateralType\n    ) internal returns (address) {\n        return\n            auctionHouseFactory.deploy(\n                address(safeEngine),\n                address(liquidationEngine),\n                collateralType,\n                pauseProxy\n            );\n    }\n\n    function deployOSM(address priceFeed) internal returns (address) {\n        return osmFactory.deploy(priceFeed, pauseProxy);\n    }\n\n    function deployKeeperIncentives(\n        address osm,\n        bytes32 collateralType,\n        address coinOracle,\n        address ethOracle,\n        uint256 acceptedDeviation\n    ) internal returns (address) {\n        return\n            keeperIncentivesFactory.deploy(\n                address(stabilityFeeTreasury),\n                osm,\n                address(oracleRelayer),\n                [collateralType, bytes32(0), bytes32(0)],\n                5 * 10 ** 18,\n                0,\n                coinOracle,\n                ethOracle,\n                acceptedDeviation,\n                pauseProxy\n            );\n    }\n\n    // notice: this function can be called by anyone, it will deploy a set of contracts needed for a new collateral (no impact on the system until they are attached)\n    function deployCollateralSpecificContracts(\n        bytes32 collateralType,\n        address token,\n        address priceFeed,\n        address coinOracle,\n        address ethOracle,\n        uint256 acceptedDeviation\n    )\n        external\n        returns (\n            address join,\n            address auctionHouse,\n            address osm,\n            address keeperIncentives\n        )\n    {\n        join = deployJoin(collateralType, token);\n        emit contractDeployed(\"JOIN\", join);\n\n        auctionHouse = deployAuctionHouse(collateralType);\n        emit contractDeployed(\"AUCTION_HOUSE\", auctionHouse);\n\n        osm = deployOSM(priceFeed);\n        emit contractDeployed(\"OSM\", osm);\n\n        keeperIncentives = deployKeeperIncentives(\n            osm,\n            collateralType,\n            coinOracle,\n            ethOracle,\n            acceptedDeviation\n        );\n        emit contractDeployed(\"KEEPER_INCENTIVES\", keeperIncentives);\n    }\n\n    // notice: this function should be called by ds-pause, passing the addresses of the collateral specific contracts previously deployed\n    // calling it direclty will fail, it should be delegatecalled into by ds-pause\n    function deployCollateralType(\n        address joinAddress,\n        address osmAddress,\n        address auctionHouseAddress,\n        address keeperIncentivesAddress,\n        uint256 cRatio,\n        uint256 debtCeiling,\n        uint256 debtFloor,\n        uint256 stabilityFee,\n        uint256 liquidationPenalty\n    ) external {\n        Setter join = Setter(joinAddress);\n        Setter auctionHouse = Setter(auctionHouseAddress);\n\n        bytes32 collateralType = auctionHouse.collateralType();\n\n        safeEngine.addAuthorization(address(join));\n\n        liquidationEngine.modifyParameters(\n            collateralType,\n            \"collateralAuctionHouse\",\n            address(auctionHouse)\n        );\n        liquidationEngine.modifyParameters(\n            collateralType,\n            \"liquidationPenalty\",\n            liquidationPenalty\n        );\n        liquidationEngine.modifyParameters(\n            collateralType,\n            \"liquidationQuantity\",\n            uint256(-1)\n        );\n\n        liquidationEngine.addAuthorization(address(auctionHouse));\n        auctionHouse.addAuthorization(address(liquidationEngine));\n        auctionHouse.addAuthorization(address(globalSettlement));\n\n        oracleRelayer.modifyParameters(collateralType, \"orcl\", osmAddress);\n        oracleRelayer.modifyParameters(collateralType, \"safetyCRatio\", cRatio);\n        oracleRelayer.modifyParameters(\n            collateralType,\n            \"liquidationCRatio\",\n            cRatio\n        );\n\n        safeEngine.initializeCollateralType(collateralType);\n        safeEngine.modifyParameters(collateralType, \"debtCeiling\", debtCeiling);\n        safeEngine.modifyParameters(collateralType, \"debtFloor\", debtFloor);\n\n        taxCollector.initializeCollateralType(collateralType);\n        taxCollector.modifyParameters(\n            collateralType,\n            \"stabilityFee\",\n            stabilityFee\n        );\n\n        auctionHouse.modifyParameters(\"oracleRelayer\", address(oracleRelayer));\n        auctionHouse.modifyParameters(\"collateralFSM\", osmAddress);\n        auctionHouse.modifyParameters(\"minimumBid\", 0);\n        auctionHouse.modifyParameters(\n            \"perSecondDiscountUpdateRate\",\n            999999410259856537771597932\n        );\n        auctionHouse.modifyParameters(\"minDiscount\", 0.99E18);\n        auctionHouse.modifyParameters(\"maxDiscount\", 0.70E18);\n        auctionHouse.modifyParameters(\"maxDiscountUpdateRateTimeline\", 7 days);\n        auctionHouse.modifyParameters(\n            \"lowerCollateralMedianDeviation\",\n            0.70E18\n        );\n        auctionHouse.modifyParameters(\n            \"upperCollateralMedianDeviation\",\n            0.90E18\n        );\n\n        oracleRelayer.updateCollateralPrice(collateralType);\n\n        stabilityFeeTreasury.setPerBlockAllowance(\n            keeperIncentivesAddress,\n            100 * 10 ** 18\n        );\n        stabilityFeeTreasury.setTotalAllowance(\n            keeperIncentivesAddress,\n            uint(-1)\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-auth/=lib/geb-fsm/lib/ds-stop/lib/ds-auth/src/",
      "ds-math/=lib/geb-fsm/lib/ds-token/lib/ds-math/src/",
      "ds-note/=lib/geb-fsm/lib/ds-stop/lib/ds-note/src/",
      "ds-stop/=lib/geb-fsm/lib/ds-stop/src/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "ds-thing/=lib/geb-fsm/lib/ds-value/lib/ds-thing/src/",
      "ds-token/=lib/geb-fsm/lib/ds-token/src/",
      "ds-value/=lib/geb-fsm/lib/ds-value/src/",
      "erc20/=lib/geb-fsm/lib/ds-token/lib/erc20/src/",
      "forge-std/=lib/forge-std/src/",
      "geb-fsm/=lib/geb-fsm/src/",
      "geb-treasury-reimbursement/=lib/geb-fsm/lib/geb-treasury-reimbursement/src/",
      "geb/=lib/geb/src/",
      "mgl-keeper-incentives/=lib/mgl-keeper-incentives/src/",
      "solmate/=lib/mgl-keeper-incentives/lib/solmate/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "evmVersion": "istanbul",
    "libraries": {}
  }
}}