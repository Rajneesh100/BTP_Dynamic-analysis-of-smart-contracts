{"Dependencies.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    // function toHexString(uint256 value) internal pure returns (string memory) {\n    //     if (value == 0) {\n    //         return \"0x00\";\n    //     }\n    //     uint256 temp = value;\n    //     uint256 length = 0;\n    //     while (temp != 0) {\n    //         length++;\n    //         temp \u003e\u003e= 8;\n    //     }\n    //     return toHexString(value, length);\n    // }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    // function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n    //     bytes memory buffer = new bytes(2 * length + 2);\n    //     buffer[0] = \"0\";\n    //     buffer[1] = \"x\";\n    //     for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n    //         buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n    //         value \u003e\u003e= 4;\n    //     }\n    //     require(value == 0, \"Strings: hex length insufficient\");\n    //     return string(buffer);\n    // }\n}\n\n\n\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos \u003cbrecht@loopring.org\u003e\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 =\u003e address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    // function _safeMint(address to, uint256 tokenId) internal virtual {\n    //     _safeMint(to, tokenId, \"\");\n    // }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    // function _safeMint(\n    //     address to,\n    //     uint256 tokenId,\n    //     bytes memory _data\n    // ) internal virtual {\n    //     _mint(to, tokenId);\n    //     require(\n    //         _checkOnERC721Received(address(0), to, tokenId, _data),\n    //         \"ERC721: transfer to non ERC721Receiver implementer\"\n    //     );\n    // }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        // _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        // _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        // _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    // function _beforeTokenTransfer(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) internal virtual {}\n}\n\n\n\n\n\n\n"},"Free33.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$   /$$$$$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$ /$$__  $$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$|__/  \\ $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$            /$$$$$/   /$$$$$/\n| $$__/   | $$__  $$| $$__/   | $$__/           |___  $$  |___  $$\n| $$      | $$  \\ $$| $$      | $$             /$$  \\ $$ /$$  \\ $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      |  $$$$$$/|  $$$$$$/\n|__/      |__/  |__/|________/|________/       \\______/  \\______/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\nimport \"./ThreeBallsGrid.sol\";\n\ninterface GrailsV {\n  function ownerOf(uint256 tokenId) external returns (address owner);\n}\n\n\ncontract Free33 is FreeChecker {\n  ThreeBallsGrid public threeBallsGrid;\n  GrailsV public grailsV = GrailsV(0x92A50Fe6eDE411BD26e171B97472e24D245349B8);\n  mapping(uint256 =\u003e bool) public THREE_BALLS;\n\n  mapping(uint256 =\u003e uint256) public ballX;\n  mapping(uint256 =\u003e uint256) public ballY;\n\n  constructor() {\n    THREE_BALLS[12] = true;\n    THREE_BALLS[30] = true;\n    THREE_BALLS[36] = true;\n    THREE_BALLS[37] = true;\n    THREE_BALLS[38] = true;\n    THREE_BALLS[39] = true;\n    THREE_BALLS[40] = true;\n    THREE_BALLS[42] = true;\n    THREE_BALLS[46] = true;\n    THREE_BALLS[52] = true;\n    THREE_BALLS[54] = true;\n    THREE_BALLS[56] = true;\n    THREE_BALLS[57] = true;\n    THREE_BALLS[58] = true;\n    THREE_BALLS[59] = true;\n    THREE_BALLS[60] = true;\n    THREE_BALLS[64] = true;\n    THREE_BALLS[65] = true;\n    THREE_BALLS[66] = true;\n    THREE_BALLS[69] = true;\n    THREE_BALLS[70] = true;\n    THREE_BALLS[72] = true;\n    THREE_BALLS[77] = true;\n    THREE_BALLS[79] = true;\n    THREE_BALLS[80] = true;\n    THREE_BALLS[81] = true;\n    THREE_BALLS[86] = true;\n    THREE_BALLS[87] = true;\n    THREE_BALLS[90] = true;\n    THREE_BALLS[91] = true;\n    THREE_BALLS[94] = true;\n    THREE_BALLS[95] = true;\n    THREE_BALLS[98] = true;\n    THREE_BALLS[99] = true;\n    THREE_BALLS[101] = true;\n    THREE_BALLS[102] = true;\n\n    threeBallsGrid = new ThreeBallsGrid(msg.sender);\n  }\n\n  function ballCoords(uint256 tokenId) external view returns (uint256 x, uint256 y) {\n    return (ballX[tokenId], ballY[tokenId]);\n  }\n\n  function throwBall(uint256 grailsVTokenId) external {\n    require(grailsV.ownerOf(grailsVTokenId) == msg.sender, \u0027Only owner can throw\u0027);\n    require(THREE_BALLS[grailsVTokenId], \u0027Can only throw a ball\u0027);\n\n    uint256 hash = uint256(keccak256(abi.encodePacked(\n      block.prevrandao, block.gaslimit, grailsVTokenId\n    )));\n\n    ballX[grailsVTokenId] = 1 + hash % 6;\n    ballY[grailsVTokenId] = 1 + (hash / 100000) % 6;\n    threeBallsGrid.update();\n  }\n\n  function isLine(\n    int[2] memory ball_a,\n    int[2] memory ball_b,\n    int[2] memory ball_c\n  ) public pure returns (bool) {\n    return _isLine(ball_a, ball_b, ball_c) \u0026\u0026 _isLine(ball_b, ball_c, ball_a);\n  }\n\n  function isOutOfBounds(int[2] memory ball) external pure returns (bool) {\n    return _outOfBounds(ball[0]) || _outOfBounds(ball[1]);\n  }\n\n  function _outOfBounds(int n) internal pure returns (bool) {\n    return 1 \u003e n || n \u003e 6;\n  }\n\n  function _isLine(\n    int[2] memory ball_a,\n    int[2] memory ball_b,\n    int[2] memory ball_c\n  ) internal pure returns (bool) {\n    int ax = ball_a[0];\n    int ay = ball_a[1];\n\n    int bx = ball_b[0];\n    int by = ball_b[1];\n\n    int cx = ball_c[0];\n    int cy = ball_c[1];\n\n    if (\n      _outOfBounds(ax) ||\n      _outOfBounds(ay) ||\n      _outOfBounds(bx) ||\n      _outOfBounds(by) ||\n      _outOfBounds(cx) ||\n      _outOfBounds(cy)\n    ) return false;\n\n\n    int a_b_YDiff = by - ay;\n    int a_c_YDiff = cy - ay;\n\n    int a_b_XDiff = bx - ax;\n    int a_c_XDiff = cx - ax;\n\n    if (a_b_YDiff == 0 \u0026\u0026 a_c_YDiff == 0) return true;\n    if (a_b_YDiff == 0) return a_b_XDiff == 0;\n    if (a_c_YDiff == 0) return a_c_XDiff == 0;\n\n    return (\n      (a_b_XDiff * 60) / a_b_YDiff\n      ==\n      (a_c_XDiff * 60) / a_c_YDiff\n    );\n  }\n\n  function claim(\n    uint256 free0TokenId,\n    uint256 ownedBallTokenId,\n    uint256 supportingBallTokenId1,\n    uint256 supportingBallTokenId2\n  ) external {\n    preCheck(free0TokenId, \u002733\u0027);\n\n    require(grailsV.ownerOf(ownedBallTokenId) == msg.sender, \u0027Not owner of ball\u0027);\n    require(\n      ownedBallTokenId != supportingBallTokenId1 \u0026\u0026\n      ownedBallTokenId != supportingBallTokenId2 \u0026\u0026\n      supportingBallTokenId1 != supportingBallTokenId2,\n      \u0027Invalid supporting balls\u0027\n    );\n\n    require(isLine(\n        [int(ballX[ownedBallTokenId]), int(ballY[ownedBallTokenId])],\n        [int(ballX[supportingBallTokenId1]), int(ballY[supportingBallTokenId1])],\n        [int(ballX[supportingBallTokenId2]), int(ballY[supportingBallTokenId2])]\n      ),\n      \u0027Balls not thrown in a straight line\u0027\n    );\n\n    ballX[ownedBallTokenId] = 0;\n    ballY[ownedBallTokenId] = 0;\n\n    postCheck(free0TokenId, 33, \u002733\u0027);\n  }\n}"},"FreeChecker.sol":{"content":"\n// SPDX-License-Identifier: CC0\n\n\n/*\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\ninterface IFree {\n  function totalSupply() external  view returns (uint256);\n  function balanceOf(address) external  view returns (uint256);\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n  function collectionSupply(uint256 collectionId) external view returns (uint256);\n  function collectionIdToMinter(uint256 collectionId) external view returns (address);\n  function mint(uint256 collectionId, address to) external;\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\nabstract contract FreeChecker {\n  mapping(uint256 =\u003e bool) public free0TokenIdUsed;\n  IFree public immutable free = IFree(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function preCheck(uint256 free0TokenId, string memory freeStr) internal view {\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[free0TokenId],\n      string(abi.encodePacked(\u0027This Free0 has already been used to mint a Free\u0027, freeStr))\n    );\n    require(free.ownerOf(free0TokenId) == msg.sender, \u0027You must be the owner of this Free0\u0027);\n\n  }\n\n  function postCheck(uint256 free0TokenId, uint256 freeNumber, string memory freeStr) internal {\n    free0TokenIdUsed[free0TokenId] = true;\n    free.appendAttributeToToken(free0TokenId,\n      string(abi.encodePacked(\u0027Used For Free\u0027, freeStr, \u0027 Mint\u0027)),\n      \u0027true\u0027\n    );\n    free.mint(freeNumber, msg.sender);\n  }\n\n  function checkFreeToken(uint256 freeTokenId, uint256 collectionId) internal view {\n    require(free.ownerOf(freeTokenId) == msg.sender, \u0027Not owner of token\u0027);\n    require(free.tokenIdToCollectionId(freeTokenId) == collectionId, \u0027Token collection mismatch\u0027);\n  }\n}"},"ThreeBallsGrid.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n████████ ██   ██ ██████  ███████ ███████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ███████ ██████  █████   █████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ██   ██ ██   ██ ███████ ███████\n\n\n██████   █████  ██      ██      ███████\n██   ██ ██   ██ ██      ██      ██\n██████  ███████ ██      ██      ███████\n██   ██ ██   ██ ██      ██           ██\n██████  ██   ██ ███████ ███████ ███████\n\n\n ██████  ██████  ██ ██████\n██       ██   ██ ██ ██   ██\n██   ███ ██████  ██ ██   ██\n██    ██ ██   ██ ██ ██   ██\n ██████  ██   ██ ██ ██████\n\n\n\nCC0 2023 - steviep.eth\n*/\n\n\nimport \"./Dependencies.sol\";\nimport \"./Free33.sol\";\nimport \"./ThreeBallsGridURI.sol\";\nimport \"./ThreeBallsGridMinter.sol\";\n\n\npragma solidity ^0.8.23;\n\ncontract ThreeBallsGrid is ERC721, Ownable {\n  uint256 public maxSupply = 333;\n  uint256 public totalSupply;\n\n  address public free33;\n\n  ThreeBallsGridURI public tokenURIContract;\n  ThreeBallsGridMinter public minter;\n\n  struct Balls {\n    uint256 a;\n    uint256 b;\n    uint256 c;\n  }\n\n  mapping(uint256 =\u003e Balls) public tokenIdToBalls;\n  mapping(uint256 =\u003e bool) public isLight;\n\n  event MetadataUpdate(uint256 _tokenId);\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n\n  constructor(address newOwner) ERC721(\u0027Three Balls Grid\u0027, \u00273BG\u0027) {\n    minter = new ThreeBallsGridMinter();\n    tokenURIContract = new ThreeBallsGridURI(msg.sender);\n\n    free33 = msg.sender;\n    transferOwnership(newOwner);\n    _mint(newOwner, totalSupply++);\n  }\n\n  function exists(uint256 tokenId) external view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  function mint(address recipient) public {\n    require(address(minter) == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(totalSupply \u003c maxSupply, \u0027Cannot exceed 333\u0027);\n\n    _mint(recipient, totalSupply++);\n  }\n\n  function update() external {\n    require(msg.sender == free33);\n    emit BatchMetadataUpdate(0, totalSupply);\n  }\n\n  function setMinter(address newMinter) external onlyOwner {\n    minter = ThreeBallsGridMinter(newMinter);\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    return tokenURIContract.tokenURI(tokenId);\n  }\n\n  function setURIContract(address _uriContract) external onlyOwner {\n    tokenURIContract = ThreeBallsGridURI(_uriContract);\n    emit BatchMetadataUpdate(0, totalSupply);\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n    return (\n      interfaceId == bytes4(0x49064906) ||\n      super.supportsInterface(interfaceId)\n    );\n  }\n\n  function setBalls(uint256 tokenId, uint256 a, uint256 b, uint256 c) external {\n    require(ownerOf(tokenId) == msg.sender, \u0027Must own token\u0027);\n    tokenIdToBalls[tokenId].a = a;\n    tokenIdToBalls[tokenId].b = b;\n    tokenIdToBalls[tokenId].c = c;\n\n    emit MetadataUpdate(tokenId);\n  }\n\n  function setLightMode(uint256 tokenId, bool _isLight) external {\n    require(ownerOf(tokenId) == msg.sender, \u0027Must own token\u0027);\n    isLight[tokenId] = _isLight;\n    emit MetadataUpdate(tokenId);\n  }\n}\n\n\n\n\n\n\n\n"},"ThreeBallsGridMinter.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n████████ ██   ██ ██████  ███████ ███████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ███████ ██████  █████   █████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ██   ██ ██   ██ ███████ ███████\n\n\n██████   █████  ██      ██      ███████\n██   ██ ██   ██ ██      ██      ██\n██████  ███████ ██      ██      ███████\n██   ██ ██   ██ ██      ██           ██\n██████  ██   ██ ███████ ███████ ███████\n\n\n ██████  ██████  ██ ██████\n██       ██   ██ ██ ██   ██\n██   ███ ██████  ██ ██   ██\n██    ██ ██   ██ ██ ██   ██\n ██████  ██   ██ ██ ██████\n\n\n\nCC0 2023 - steviep.eth\n*/\n\n\nimport \"./ThreeBallsGrid.sol\";\n\n\npragma solidity ^0.8.23;\n\ninterface IFree19 {\n  function lastAssigned() external view returns (uint256);\n  function claimer() external view returns (address);\n}\n\ncontract ThreeBallsGridMinter {\n  IFree19 public free19 = IFree19(0xaBCeF3a4aDC27A6c962b4fC17181F47E62244EF0);\n  address public baseContract;\n  mapping(address =\u003e uint256) public minterToTimestamp;\n\n\n  constructor() {\n    baseContract = msg.sender;\n  }\n\n  function mint() external {\n    require(free19.claimer() == msg.sender, \u0027Must be Free19 contract claimer\u0027);\n    require(free19.lastAssigned() + 30 minutes \u003c block.timestamp, \u0027Must be Free19 contract claimer for \u003e 30 minutes\u0027);\n    require(minterToTimestamp[msg.sender] + 15 minutes \u003c block.timestamp, \u0027Must wait at least 15 minutes between mints\u0027);\n\n    minterToTimestamp[msg.sender] = block.timestamp;\n    ThreeBallsGrid(baseContract).mint(msg.sender);\n  }\n}"},"ThreeBallsGridURI.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n████████ ██   ██ ██████  ███████ ███████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ███████ ██████  █████   █████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ██   ██ ██   ██ ███████ ███████\n\n\n██████   █████  ██      ██      ███████\n██   ██ ██   ██ ██      ██      ██\n██████  ███████ ██      ██      ███████\n██   ██ ██   ██ ██      ██           ██\n██████  ██   ██ ███████ ███████ ███████\n\n\n ██████  ██████  ██ ██████\n██       ██   ██ ██ ██   ██\n██   ███ ██████  ██ ██   ██\n██    ██ ██   ██ ██ ██   ██\n ██████  ██   ██ ██ ██████\n\n\n\nCC0 2023 - steviep.eth\n*/\n\nimport \"./Dependencies.sol\";\n\npragma solidity ^0.8.23;\n\ninterface IThreeBallsGrid {\n  function owner() external view returns (address);\n  function tokenIdToBalls(uint256) external view returns (uint256 a, uint256 b, uint256 c);\n  function isLight(uint256) external view returns (bool);\n}\n\ninterface IFree33 {\n  function THREE_BALLS(uint256) external view returns (bool);\n  function ballCoords(uint256) external view returns (uint256 x, uint256 y);\n  function isLine(\n    int[2] memory ball_a,\n    int[2] memory ball_b,\n    int[2] memory ball_c\n  ) external view returns (bool);\n}\n\ncontract ThreeBallsGridURI {\n  using Strings for uint256;\n\n  IThreeBallsGrid public baseContract;\n  IFree33 public free33;\n  string public description = \u0027A visualizer for Free33. Call `setBalls(uint256 tokenId, uint256 a, uint256 b, uint256 c)` to display the position of balls A, B, and C. Call `isLight(uint256 tokenId, bool val)` to display in Light Mode.\u0027;\n  string public externalUrl = \u0027https://steviep.xyz/three-balls\u0027;\n  string public license = \u0027CC0\u0027;\n\n  constructor(address free33Addr) {\n    baseContract = IThreeBallsGrid(msg.sender);\n    free33 = IFree33(free33Addr);\n  }\n\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    bytes memory json = abi.encodePacked(\n      \u0027data:application/json;utf8,\u0027,\n      \u0027{\"name\": \"Three Balls Grid\",\u0027\n      \u0027\"description\": \"\u0027, description, \u0027\",\u0027\n      \u0027\"license\": \"\u0027, license, \u0027\",\u0027\n      \u0027\"external_url\": \"\u0027, externalUrl, \u0027\",\u0027\n      \u0027\"attributes\": \u0027, attrs(tokenId),\u0027,\u0027\n      \u0027\"image\": \"\u0027, encodedSVG(tokenId),\n      \u0027\"}\u0027\n    );\n    return string(json);\n  }\n\n  function encodedSVG(uint256 tokenId) public view returns (string memory) {\n    return string(abi.encodePacked(\n      \u0027data:image/svg+xml;base64,\u0027,\n      Base64.encode(rawSVG(tokenId))\n    ));\n  }\n\n  function attrs(uint256 tokenId) public view returns (bytes memory) {\n    (uint256 a, uint256 b, uint256 c) = baseContract.tokenIdToBalls(tokenId);\n\n    (uint256 ax, uint256 ay) = free33.ballCoords(a);\n    (uint256 bx, uint256 by) = free33.ballCoords(b);\n    (uint256 cx, uint256 cy) = free33.ballCoords(c);\n\n    bool isLine = free33.isLine([int(ax), int(ay)], [int(bx), int(by)], [int(cx), int(cy)]);\n    bool isLight = baseContract.isLight(tokenId);\n\n    return abi.encodePacked(\n      \u0027[{\"trait_type\": \"Ball A\", \"value\": \"\u0027,a.toString(),\u0027\"},\u0027,\n      \u0027{\"trait_type\": \"Ball B\", \"value\": \"\u0027,b.toString(),\u0027\"},\u0027,\n      \u0027{\"trait_type\": \"Ball C\", \"value\": \"\u0027,c.toString(),\u0027\"},\u0027,\n      \u0027{\"trait_type\": \"Is Line\", \"value\": \"\u0027,isLine ? \u0027true\u0027 : \u0027false\u0027,\u0027\"},\u0027,\n      \u0027{\"trait_type\": \"Light Mode\", \"value\": \"\u0027,isLight ? \u0027true\u0027 : \u0027false\u0027,\u0027\"}]\u0027\n    );\n  }\n\n  function genStyle(uint256 tokenId) internal view returns (bytes memory) {\n    bool isLight = baseContract.isLight(tokenId);\n    string memory colorA = isLight ? \u0027#d12c00\u0027 : \u0027#ff005b\u0027;\n    string memory colorB = isLight ? \u0027#2800ff\u0027 : \u0027#0079ff\u0027;\n    string memory colorC = isLight ? \u0027#04b700\u0027 : \u0027#dbec49\u0027;\n    string memory colorLight = isLight ? \u0027#000\u0027 : \u0027#fff\u0027;\n    string memory colorDark = isLight ? \u0027#fff\u0027 : \u0027#000\u0027;\n\n    bytes memory colorStrokes = abi.encodePacked(\u0027.strokeA{stroke:\u0027,colorA,\u0027}.strokeB{stroke:\u0027,colorB,\u0027}.strokeC{stroke:\u0027,colorC,\u0027}\u0027);\n    bytes memory colorFills = abi.encodePacked(\u0027.fillA{fill:\u0027,colorA,\u0027}.fillB{fill:\u0027,colorB,\u0027}.fillC{fill:\u0027,colorC,\u0027}\u0027);\n    bytes memory bw = abi.encodePacked(\u0027.strokeLight{stroke:\u0027,colorLight,\u0027}.fillLight{fill:\u0027,colorLight,\u0027}.fillDark{fill:\u0027,colorDark,\u0027}\u0027);\n\n    return abi.encodePacked(\n      \u0027\u003cstyle\u003e\u0027,\n      colorStrokes,\n      colorFills,\n      bw,\n      \u0027.g{font-size:15}.isline{stroke-width:2.5}line{stroke-dasharray:4}circle{stroke-width:2}text{text-anchor:middle;dominant-baseline:middle}text{font:12px monospace}\u003c/style\u003e\u0027\n    );\n  }\n\n  function rawSVG(uint256 tokenId) public view returns (bytes memory) {\n    (uint256 a, uint256 b, uint256 c) = baseContract.tokenIdToBalls(tokenId);\n    (uint256 ax, uint256 ay) = free33.ballCoords(a);\n    (uint256 bx, uint256 by) = free33.ballCoords(b);\n    (uint256 cx, uint256 cy) = free33.ballCoords(c);\n\n    bool isLine = free33.isLine([int(ax), int(ay)], [int(bx), int(by)], [int(cx), int(cy)]);\n\n    bytes memory svg = abi.encodePacked(\n      \u0027\u003csvg viewBox=\"0 0 420 420\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u0027,\n      genStyle(tokenId),\n      \u0027\u003crect class=\"fillDark\" x=\"0\" y=\"0\" width=\"420\" height=\"420\" /\u003e\u003crect x=\"30\" y=\"30\" width=\"360\" height=\"360\" class=\"strokeLight\" fill=\"none\"/\u003e\u0027\n    );\n\n    for (uint256 i; i \u003c 6; ++i) {\n      uint256 p = 30 + i * 60;\n      if (i \u003e 0) svg = abi.encodePacked(\n        svg,\n        \u0027\u003cline class=\"strokeLight\" y1=\"30\" y2=\"390\" x1=\"\u0027,\n        p.toString(),\n        \u0027\" x2=\"\u0027,\n        p.toString(),\n        \u0027\"\u003e\u003c/line\u003e\u003cline class=\"strokeLight\" x1=\"30\" x2=\"390\" y1=\"\u0027,\n        p.toString(),\n        \u0027\" y2=\"\u0027,\n        p.toString(),\n        \u0027\"\u003e\u003c/line\u003e\u0027\n      );\n\n      svg = abi.encodePacked(\n        svg,\n        \u0027\u003ctext class=\"fillLight\" x=\"\u0027,(p+30).toString(),\u0027\" y=\"15\"\u003e\u0027,(i+1).toString(),\u0027\u003c/text\u003e\u0027,\n        \u0027\u003ctext class=\"fillLight\" y=\"\u0027,(p+30).toString(),\u0027\" x=\"15\"\u003e\u0027,(i+1).toString(),\u0027\u003c/text\u003e\u0027\n      );\n    }\n\n    if (isLine) {\n      svg = abi.encodePacked(\n        svg,\n        \u0027\u003cpath class=\"isline strokeLight\" d=\"M \u0027,\n        (60 + (ax-1)*60).toString(),\n        \u0027 \u0027,\n        (60 + (ay-1)*60).toString(),\n        \u0027 L\u0027,\n        (60 + (bx-1)*60).toString(),\n        \u0027 \u0027,\n        (60 + (by-1)*60).toString(),\n        \u0027 \u0027,\n        (60 + (cx-1)*60).toString(),\n        \u0027 \u0027,\n        (60 + (cy-1)*60).toString(),\n        \u0027\" /\u003e\u0027\n      );\n    }\n\n    for (uint256 x = 1; x \u003c 7; ++x) {\n      for (uint256 y = 1; y \u003c 7; ++y) {\n        uint256 r = 20;\n        uint256 _cx = 60 + (x-1) * 60;\n        uint256 _cy = 60 + (y-1) * 60;\n\n        if (x == ax \u0026\u0026 y == ay) {\n          svg = abi.encodePacked(\n            svg,\n            \u0027\u003ccircle class=\"strokeA fillDark\" cx=\"\u0027, _cx.toString(),\u0027\" cy=\"\u0027, _cy.toString(),\u0027\" r=\"\u0027, r.toString(),\u0027\"/\u003e\u0027\n          );\n          r -= 8;\n        }\n\n        if (x == bx \u0026\u0026 y == by) {\n          svg = abi.encodePacked(\n            svg,\n            \u0027\u003ccircle class=\"strokeB fillDark\" cx=\"\u0027, _cx.toString(),\u0027\" cy=\"\u0027, _cy.toString(),\u0027\" r=\"\u0027, r.toString(),\u0027\"/\u003e\u0027\n          );\n          r -= 8;\n        }\n\n        if (x == cx \u0026\u0026 y == cy) {\n          svg = abi.encodePacked(\n            svg,\n            \u0027\u003ccircle class=\"strokeC fillDark\" cx=\"\u0027, _cx.toString(),\u0027\" cy=\"\u0027, _cy.toString(),\u0027\" r=\"\u0027, r.toString(),\u0027\"/\u003e\u0027\n          );\n        }\n      }\n    }\n\n    bytes memory aId = abi.encodePacked(\u0027\u003ctext x=\"150\" y=\"405\" class=\"g fillA\"\u003e\u0027, (free33.THREE_BALLS(a) ? a.toString() : \u0027\u0027), \u0027\u003c/text\u003e\u0027);\n    bytes memory bId = abi.encodePacked(\u0027\u003ctext x=\"210\" y=\"405\" class=\"g fillB\"\u003e\u0027, (free33.THREE_BALLS(b) ? b.toString() : \u0027\u0027), \u0027\u003c/text\u003e\u0027);\n    bytes memory cId = abi.encodePacked(\u0027\u003ctext x=\"270\" y=\"405\" class=\"g fillC\"\u003e\u0027, (free33.THREE_BALLS(c) ? c.toString() : \u0027\u0027), \u0027\u003c/text\u003e\u0027);\n    svg = abi.encodePacked(\n      svg,\n      aId,\n      bId,\n      cId\n    );\n\n    return abi.encodePacked(svg, \u0027\u003c/svg\u003e\u0027);\n  }\n\n  function updateMetadata(string calldata _externalUrl, string calldata _description, string calldata _license) external {\n    require(msg.sender == baseContract.owner(), \u0027Ownable: caller is not the owner\u0027);\n    externalUrl = _externalUrl;\n    description = _description;\n    license = _license;\n  }\n}\n"}}