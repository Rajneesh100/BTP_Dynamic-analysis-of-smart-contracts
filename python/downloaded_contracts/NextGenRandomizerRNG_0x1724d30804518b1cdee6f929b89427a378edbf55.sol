{"ArrngConsumer.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *\n * @title ArrngConsumer.sol. Use arrng\n *\n * @author arrng https://arrng.io/\n *\n */\n\nimport {IArrngConsumer} from \"./IArrngConsumer.sol\";\nimport {IArrngController} from \"./IArrngController.sol\";\n\npragma solidity 0.8.19;\n\nabstract contract ArrngConsumer is IArrngConsumer {\n  IArrngController public immutable arrngController;\n\n  /**\n   * @dev constructor\n   */\n  constructor(address arrngController_) {\n    arrngController = IArrngController(arrngController_);\n  }\n\n  /**\n   *\n   * @dev fulfillRandomWords: Do something with the randomness\n   *\n   * @param requestId: unique ID for this request\n   * @param randomWords: array of random integers requested\n   *\n   */\n  function fulfillRandomWords(\n    uint256 requestId,\n    uint256[] memory randomWords\n  ) internal virtual;\n\n  /**\n   *\n   * @dev receiveRandomness: receive RNG\n   *\n   * @param arrngRequestId_: unique ID for this request\n   * @param randomNumbers_: array of random integers requested\n   *\n   */\n  function receiveRandomness(\n    uint256 arrngRequestId_,\n    uint256[] calldata randomNumbers_\n  ) external payable {\n    require(msg.sender == address(arrngController), \"arrng controller only\");\n    fulfillRandomWords(arrngRequestId_, randomNumbers_);\n  }\n}"},"IArrngConsumer.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *\n * @title IArrngConsumer.sol. Use arrng\n *\n * @author arrng https://arrng.io/\n *\n */\n\npragma solidity 0.8.19;\n\ninterface IArrngConsumer {\n  /**\n   *\n   * @dev receiveRandomness: receive randomness\n   *\n   * @param arrngRequestId_: unique ID for this request\n   * @param randomNumbers_: array of random integers requested\n   *\n   */\n  function receiveRandomness(\n    uint256 arrngRequestId_,\n    uint256[] calldata randomNumbers_\n  ) external payable;\n}"},"IArrngController.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *\n * @title IArrngController.sol. Interface for the arrngController.\n *\n * @author arrng https://arrng.io/\n *\n */\n\npragma solidity 0.8.19;\n\ninterface IArrngController {\n  event ENSReverseRegistrarSet(address newENSReverseRegistrar);\n  event ENSNameSet(string ensName, bytes32 ensNameHash);\n  event MinimumNativeTokenSet(uint256 minimumNativeToken);\n  event MaximumNumberOfNumbersSet(uint256 newNumberLimited);\n  event OracleAddressSet(address oracle);\n  event TreasuryAddressSet(address treasury);\n  event ArrngRequest(\n    address indexed caller,\n    uint64 indexed requestId,\n    uint32 method,\n    uint64 numberOfNumbers,\n    uint64 minValue,\n    uint64 maxvalue,\n    uint64 ethValue,\n    address refundAddress\n  );\n  event ArrngResponse(bytes32 requestTxnHash);\n  event ArrngServed(\n    uint128 indexed requestId,\n    uint128 feeCharged,\n    uint256[] randomNumbers,\n    string apiResponse,\n    string apiSignature\n  );\n  event ArrngRefundInsufficientTokenForGas(\n    address indexed caller,\n    uint256 requestId\n  );\n\n  /**\n   * -------------------------------------------------------------\n   * @dev ADMINISTRATION\n   * -------------------------------------------------------------\n   */\n\n  /**\n   *\n   * @dev setENSReverseRegistrar: set the ENS register address\n   *\n   * @param ensRegistrar_: ENS Reverse Registrar address\n   *\n   */\n  function setENSReverseRegistrar(address ensRegistrar_) external;\n\n  /**\n   *\n   * @dev setENSName: used to set reverse record so interactions with this contract\n   * are easy to identify\n   *\n   * @param ensName_: string ENS name\n   *\n   */\n  function setENSName(string memory ensName_) external;\n\n  /**\n   *\n   * @dev setMinimumNativeToken: set a new value of required native token for gas\n   *\n   * @param minNativeToken_: the new minimum native token per call\n   *\n   */\n  function setMinimumNativeToken(uint176 minNativeToken_) external;\n\n  /**\n   *\n   * @dev setMaximumNumberOfNumbers: set a new max number of numbers\n   *\n   * @param maxNumbersPerTxn_: the new max requested numbers\n   *\n   */\n  function setMaximumNumberOfNumbers(uint16 maxNumbersPerTxn_) external;\n\n  /**\n   *\n   * @dev setOracleAddress: set a new oracle address\n   *\n   * @param oracle_: the new oracle address\n   *\n   */\n  function setOracleAddress(address payable oracle_) external;\n\n  /**\n   *\n   * @dev setTreasuryAddress: set a new treasury address\n   *\n   * @param treasury_: the new treasury address\n   *\n   */\n  function setTreasuryAddress(address payable treasury_) external;\n\n  /**\n   *\n   * @dev withdrawNativeToken: pull native token to the treasuryAddress\n   *\n   * @param amount_: amount to withdraw\n   *\n   */\n  function withdrawNativeToken(uint256 amount_) external;\n\n  /**\n   *\n   * @dev withdrawERC20: pull ERC20 tokens to the treasuryAddress\n   *\n   * @param erc20Address_: the contract address for the token\n   * @param amount_: amount to withdraw\n   *\n   */\n  function withdrawERC20(address erc20Address_, uint256 amount_) external;\n\n  /**\n   *\n   * @dev withdrawERC721: Pull ERC721s (likely only the ENS\n   * associated with this contract) to the treasuryAddress.\n   *\n   * @param erc721Address_: The token contract for the withdrawal\n   * @param tokenIDs_: the list of tokenIDs for the withdrawal\n   *\n   */\n  function withdrawERC721(\n    address erc721Address_,\n    uint256[] memory tokenIDs_\n  ) external;\n\n  /**\n   * -------------------------------------------------------------\n   * @dev PROCESS REQUESTS\n   * -------------------------------------------------------------\n   */\n\n  /**\n   *\n   * @dev requestRandomWords: request 1 to n uint256 integers\n   * requestRandomWords is overloaded. In this instance you can\n   * call it without explicitly declaring a refund address, with the\n   * refund being paid to the tx.origin for this call.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n  function requestRandomWords(\n    uint256 numberOfNumbers_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev requestRandomWords: request 1 to n uint256 integers\n   * requestRandomWords is overloaded. In this instance you must\n   * specify the refund address for unused native token.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   * @param refundAddress_: the address for refund of native token\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n  function requestRandomWords(\n    uint256 numberOfNumbers_,\n    address refundAddress_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev requestRandomNumbersInRange: request 1 to n integers within\n   * a given range (e.g. 1 to 10,000)\n   * requestRandomNumbersInRange is overloaded. In this instance you can\n   * call it without explicitly declaring a refund address, with the\n   * refund being paid to the tx.origin for this call.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   * @param minValue_: the min of the range\n   * @param maxValue_: the max of the range\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n  function requestRandomNumbersInRange(\n    uint256 numberOfNumbers_,\n    uint256 minValue_,\n    uint256 maxValue_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev requestRandomNumbersInRange: request 1 to n integers within\n   * a given range (e.g. 1 to 10,000)\n   * requestRandomNumbersInRange is overloaded. In this instance you must\n   * specify the refund address for unused native token.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   * @param minValue_: the min of the range\n   * @param maxValue_: the max of the range\n   * @param refundAddress_: the address for refund of native token\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n\n  function requestRandomNumbersInRange(\n    uint256 numberOfNumbers_,\n    uint256 minValue_,\n    uint256 maxValue_,\n    address refundAddress_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev requestWithMethod: public method to allow calls specifying the\n   * arrng method, allowing functionality to be extensible without\n   * requiring a new controller contract.\n   * requestWithMethod is overloaded. In this instance you can\n   * call it without explicitly declaring a refund address, with the\n   * refund being paid to the tx.origin for this call.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   * @param minValue_: the min of the range\n   * @param maxValue_: the max of the range\n   * @param method_: the arrng method to call\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n  function requestWithMethod(\n    uint256 numberOfNumbers_,\n    uint256 minValue_,\n    uint256 maxValue_,\n    uint32 method_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev requestWithMethod: public method to allow calls specifying the\n   * arrng method, allowing functionality to be extensible without\n   * requiring a new controller contract.\n   * requestWithMethod is overloaded. In this instance you must\n   * specify the refund address for unused native token.\n   *\n   * @param numberOfNumbers_: the amount of numbers to request\n   * @param minValue_: the min of the range\n   * @param maxValue_: the max of the range\n   * @param refundAddress_: the address for refund of native token\n   * @param method_: the arrng method to call\n   *\n   * @return uniqueID_ : unique ID for this request\n   */\n  function requestWithMethod(\n    uint256 numberOfNumbers_,\n    uint256 minValue_,\n    uint256 maxValue_,\n    address refundAddress_,\n    uint32 method_\n  ) external payable returns (uint256 uniqueID_);\n\n  /**\n   *\n   * @dev serveRandomness: serve result of the call\n   *\n   * @param arrngRequestId_: unique request ID\n   * @param callingAddress_: the contract to call\n   * @param requestTxnHash_: the txn hash of the original request\n   * @param responseCode_: 0 is success, !0 = failure\n   * @param randomNumbers_: the array of random integers\n   * @param refundAddress_: the address for refund of native token not used for gas\n   * @param apiResponse_: the response from the off-chain rng provider\n   * @param apiSignature_: signature for the rng response\n   * @param feeCharged_: the fee for this rng\n   *\n   */\n  function serveRandomness(\n    uint256 arrngRequestId_,\n    address callingAddress_,\n    bytes32 requestTxnHash_,\n    uint256 responseCode_,\n    uint256[] calldata randomNumbers_,\n    address refundAddress_,\n    string calldata apiResponse_,\n    string calldata apiSignature_,\n    uint256 feeCharged_\n  ) external payable;\n}"},"INextGenAdmins.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface INextGenAdmins {\n\n    // retrieve global admin\n    function retrieveGlobalAdmin(address _address) external view returns(bool);\n\n    // retrieve function admin\n    function retrieveFunctionAdmin(address _address, bytes4 _selector) external view returns(bool);\n\n    // retrieve collection admin\n    function retrieveCollectionAdmin(address _address, uint256 _collectionID) external view returns(bool);\n\n    // retrieve if the contract is admin contract\n    function isAdminContract() external view returns (bool);\n\n    // retrieve owner\n    function owner() external view returns (address);\n\n}"},"INextGenCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface INextGenCore {\n\n    function retrievewereDataAdded(uint256 _collectionID) external view returns(bool);\n\n    function viewTokensIndexMin(uint256 _collectionID) external view returns (uint256);\n\n    function viewTokensIndexMax(uint256 _collectionID) external view returns (uint256);\n\n    function viewCirSupply(uint256 _collectionID) external view returns (uint256);\n\n    function airDropTokens(uint256 mintIndex, address _recipient, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID) external;\n\n    function mint(uint256 mintIndex, address _mintingAddress , address _mintTo, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID, uint256 phase) external;\n\n    function collectionFreezeStatus(uint256 _collectionID) external view returns(bool);\n\n    function viewMaxAllowance(uint256 _collectionID) external view returns (uint256);\n\n    function retrieveTokensMintedALPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\n\n    function retrieveTokensMintedPublicPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\n\n    function viewColIDforTokenID(uint256 _tokenid) external view returns (uint256);\n\n    function burnToMint(uint256 mintIndex, uint256 _burnCollectionID, uint256 _tokenId, uint256 _mintCollectionID, uint256 _saltfun_o, address burner) external;\n\n    function retrieveArtistAddress(uint256 _collectionID) external view returns(address);\n\n    function setTokenHash(uint256 _collectionID, uint256 _mintIndex, bytes32 _hash) external;\n\n    function retrieveTokenHash(uint256 _tokenid) external view returns(bytes32);\n\n}"},"RandomizerRNG.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *\n *  @title: NextGen 6529 - RNG Randomizer Contract\n *  @date: 20-December-2023\n *  @version: 1.8\n *  @author: 6529 team\n */\n\npragma solidity ^0.8.19;\n\nimport \"./ArrngConsumer.sol\";\nimport \"./INextGenCore.sol\";\nimport \"./INextGenAdmins.sol\";\n\ncontract NextGenRandomizerRNG is ArrngConsumer {\n\n    mapping(uint256 =\u003e uint256) public requestToToken;\n    address gencore;\n    INextGenCore public gencoreContract;\n    INextGenAdmins private adminsContract;\n    event Withdraw(address indexed _add, bool status, uint256 indexed funds);\n    uint256 ethRequired;\n    mapping(uint256 =\u003e uint256) public tokenToRequest;\n    mapping(uint256 =\u003e uint256) public tokenIdToCollection;\n\n    constructor(address _gencore, address _adminsContract, address _arRNG) ArrngConsumer(_arRNG) {\n        gencore = _gencore;\n        gencoreContract = INextGenCore(_gencore);\n        adminsContract = INextGenAdmins(_adminsContract);\n    }\n\n    modifier FunctionAdminRequired(bytes4 _selector) {\n        require(adminsContract.retrieveFunctionAdmin(msg.sender, _selector) == true || adminsContract.retrieveGlobalAdmin(msg.sender) == true, \"Not allowed\");\n        _;\n    }\n\n    function requestRandomWords(uint256 tokenid, uint256 _ethRequired) public payable {\n        require(msg.sender == gencore);\n        uint256 requestId = arrngController.requestRandomWords{value: _ethRequired}(1, (address(this)));\n        tokenToRequest[tokenid] = requestId;\n        requestToToken[requestId] = tokenid;\n\n    }\n\n    function fulfillRandomWords(uint256 id, uint256[] memory numbers) internal override {\n        gencoreContract.setTokenHash(tokenIdToCollection[requestToToken[id]], requestToToken[id], keccak256(abi.encodePacked(numbers,requestToToken[id])));\n    }\n\n    // function that calculates the random hash and returns it to the gencore contract\n    function calculateTokenHash(uint256 _collectionID, uint256 _mintIndex, uint256 _saltfun_o) public {\n        require(msg.sender == gencore);\n        tokenIdToCollection[_mintIndex] = _collectionID;\n        requestRandomWords(_mintIndex, ethRequired);\n    }\n\n    // function to update contracts\n\n    function updateAdminContract(address _newadminsContract) public FunctionAdminRequired(this.updateAdminContract.selector) {\n        require(INextGenAdmins(_newadminsContract).isAdminContract() == true, \"Contract is not Admin\");\n        adminsContract = INextGenAdmins(_newadminsContract);\n    }\n\n    function updateCoreContract(address _gencore) public FunctionAdminRequired(this.updateCoreContract.selector) { \n        gencore = _gencore;\n        gencoreContract = INextGenCore(_gencore);\n    }\n\n    // function to update cost\n\n    function updateRNGCost(uint256 _ethRequired) public FunctionAdminRequired(this.updateRNGCost.selector) {\n        ethRequired = _ethRequired;\n    }\n\n    // function to withdraw any balance from the smart contract\n\n    function emergencyWithdraw() public FunctionAdminRequired(this.emergencyWithdraw.selector) {\n        uint balance = address(this).balance;\n        address admin = adminsContract.owner();\n        (bool success, ) = payable(admin).call{value: balance}(\"\");\n        require(success, \"ETH failed\");\n        emit Withdraw(msg.sender, success, balance);\n    }\n\n    receive() external payable {}\n\n    // get randomizer contract status\n    function isRandomizerContract() external view returns (bool) {\n        return true;\n    }\n}"}}