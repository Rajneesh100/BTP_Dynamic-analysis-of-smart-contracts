{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/nft-staking/NFTStakingAggregator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.18;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\nimport '@openzeppelin/contracts/proxy/Clones.sol';\n\nimport './NFTStakingPool.sol';\n\n/**\n * @title NFTStakingAggregator\n * @author gotbit\n * @notice Contract is an aggregator for staking pools. It is responsible for creating, initializing and freezing staking pools.\n */\ncontract NFTStakingAggregator is AccessControlEnumerable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 public constant ADMIN_ROLE =\n        keccak256(abi.encodePacked('ADMIN_ROLE'));\n\n    address payable[] public pools;\n\n    address payable public immutable baseImplementation;\n\n    // name => pool\n    mapping(string => address) public poolByName;\n\n    modifier onlySupportedPool(uint256 poolIndex) {\n        require(poolIndex < pools.length, 'Pool not supported');\n        _;\n    }\n\n    modifier onlyFundsManager(uint256 poolIndex) {\n        address pool = pools[poolIndex];\n        require(hasRole(roleForPool(pool), msg.sender), 'Not funds manager');\n        _;\n    }\n\n    /// @notice Creates a new contract\n    /// @param impl - NFT StakingPool base implementation address\n    constructor(address payable impl) {\n        require(impl != address(0), 'Impl 0x0');\n        baseImplementation = impl;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @notice Creates a role for each pool contract\n    /// @param poolAddr - NFTStakingPool address\n    /// @return role - bytes32 role hash(\"FUNDS_MANAGER_ROLE\" + poolAddr)\n    function roleForPool(address poolAddr) public pure returns (bytes32) {\n        string memory role = 'FUNDS_MANAGER_ROLE';\n        string memory roleStr = string.concat(\n            role,\n            string(abi.encodePacked(poolAddr))\n        );\n        return keccak256(abi.encode(roleStr));\n    }\n\n    /// @notice Adds bonus tokens to a pool\n    /// @param poolIndex - NFTStakingPool index\n    /// @param from - token holder\n    /// @param amount - token amount\n    function addBonusForPool(\n        uint256 poolIndex,\n        address from,\n        uint256 amount\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(poolIndex) {\n        NFTStakingPool(pools[poolIndex]).addBonus(from, amount);\n    }\n\n    /// @notice Creates a new pool\n    /// @param rewardToken_ - reward token address\n    /// @param nftConfigs_ - NFTConfig struct array\n    /// @param periods_ - array of structs with stakingPeriods, APRs\n    /// @param unstakeData_ - struct with instant / early unstake fees and instant / liquidation delays\n    /// @param bonusToken_ - bonus token address\n    /// @param bonusQuoteForUnstake_ - amount of a bonus quote which is given to a user after unstake\n    function createPool(\n        IERC20 rewardToken_,\n        NFTStakingPool.NFTConfig[] calldata nftConfigs_,\n        NFTStakingPool.Period[] calldata periods_,\n        NFTStakingPool.UnstakeData calldata unstakeData_,\n        IERC20 bonusToken_,\n        uint256 bonusQuoteForUnstake_\n    ) external onlyRole(ADMIN_ROLE) {\n        address pool = Clones.clone(baseImplementation);\n\n        NFTStakingPool(payable(pool)).initialize(\n            rewardToken_,\n            nftConfigs_,\n            periods_,\n            unstakeData_,\n            bonusToken_,\n            bonusQuoteForUnstake_\n        );\n\n        pools.push(payable(pool));\n    }\n\n    /// @notice Sets new name and image link for the pool contract\n    /// @param pool - staking pool index in pools array\n    /// @param name_ New name string\n    /// @param imageLink_ New image link string\n    function setNameAndLink(\n        uint256 pool,\n        string calldata name_,\n        string calldata imageLink_\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(pool) {\n        address payable poolAddr = pools[pool];\n        require(poolByName[name_] == address(0), 'Name is already taken');\n        // remove previous name\n        string memory oldName = NFTStakingPool(poolAddr).name();\n        if ((bytes(oldName)).length != 0) {\n            // remove only if name has been set\n            poolByName[oldName] = address(0);\n        }\n        // set the new name\n        poolByName[name_] = poolAddr;\n        NFTStakingPool(poolAddr).setNameAndLink(name_, imageLink_);\n    }\n\n    /// @notice Sets new whitelist for a certain nft in a pool\n    /// @param pool - staking pool index in pools array\n    /// @param nftIndex - nft index in pool\n    /// @param whitelist_ New whitelist\n    function setWhitelistForNFT(\n        uint256 pool,\n        uint256 nftIndex,\n        NFTStakingPool.Range[] memory whitelist_\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(pool) {\n        NFTStakingPool(pools[pool]).setWhitelist(nftIndex, whitelist_);\n    }\n\n    /// @notice Allows owner to liquidate stake position\n    /// @param pool - staking pool index in pools array\n    /// @param id Stake id\n    /// @param transferFunds Flag (true if transfer principal and rewards to recepient address, else if leave funds on contract address)\n    /// @param recepient Fees receiver address\n    function liquidate(\n        uint256 pool,\n        uint256 id,\n        bool transferFunds,\n        address payable recepient\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(pool) {\n        NFTStakingPool(pools[pool]).liquidate(id, transferFunds, recepient);\n    }\n\n    /// @notice Can withdraw extra funds from the pool contract (can be called by the owner only)\n    /// @param pool - staking pool index in pools array\n    /// @param recepient - recepient address\n    /// @param amount - bonus amount\n    function withdrawAvailableRewards(\n        uint256 pool,\n        address payable recepient,\n        uint256 amount\n    ) external onlySupportedPool(pool) onlyFundsManager(pool) {\n        NFTStakingPool(pools[pool]).emergencyWithdrawFunds(recepient, amount);\n    }\n\n    /// @notice Can withdraw extra bonus tokens from the pool contract (can be called by the owner only)\n    /// @param pool - staking pool index in pools array\n    /// @param recepient - recepient address\n    /// @param amount - bonus amount\n    function withdrawAvailableBonus(\n        uint256 pool,\n        address recepient,\n        uint256 amount\n    ) external onlySupportedPool(pool) onlyFundsManager(pool) {\n        NFTStakingPool(pools[pool]).emergencyWithdrawBonus(recepient, amount);\n    }\n\n    /// @notice Locks a specific staking pool\n    /// @param pool - staking pool index in pools array\n    function lockPool(\n        uint256 pool\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(pool) {\n        require(!NFTStakingPool(pools[pool]).paused(), 'Paused');\n        NFTStakingPool(pools[pool]).setPaused(true);\n    }\n\n    /// @notice Unlocks a specific staking pool\n    /// @param pool - staking pool index in pools array\n    function unlockPool(\n        uint256 pool\n    ) external onlyRole(ADMIN_ROLE) onlySupportedPool(pool) {\n        require(NFTStakingPool(pools[pool]).paused(), 'Unpaused');\n        NFTStakingPool(pools[pool]).setPaused(false);\n    }\n\n    /// @notice Allows to get a slice of pools array\n    /// @param offset Starting index in user ids array\n    /// @param length return array length\n    /// @return Array-slice of pools\n    function getPoolsSlice(\n        uint256 offset,\n        uint256 length\n    ) external view returns (address[] memory) {\n        address[] memory res = new address[](length);\n        for (uint256 i; i < length; ) {\n            res[i] = pools[i + offset];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return res;\n    }\n\n    /// @notice Allows to get a length of pools array\n    /// @return Length of user pools array\n    function getPoolsLength() external view returns (uint256) {\n        return pools.length;\n    }\n}\n"
    },
    "contracts/nft-staking/NFTStakingPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.18;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\nimport '@openzeppelin/contracts/interfaces/IERC1155.sol';\nimport '@openzeppelin/contracts/interfaces/IERC1155Receiver.sol';\nimport '@openzeppelin/contracts/interfaces/IERC721Receiver.sol';\n\n/**\n * @title StakingPool\n * @author gotbit\n * @notice Contract represents aт NFT staking pool. It is created as a proxy clone. Contract can accept ERC20 tokens or native currency as a reward token. It accepts 1 / 2 ERC721 / ERC1155 NFTs as staking asset.\n */\ncontract NFTStakingPool is ERC165 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    enum NFTType {\n        ERC721,\n        ERC1155\n    }\n\n    struct Stake {\n        address owner;\n        uint256[] ids;\n        uint256[] amounts;\n        uint32 lastClaimTimestamp;\n        uint32 periodIndex;\n        uint32 timestamp;\n        uint32 unstakedAtBlockTimestamp;\n    }\n\n    struct Range {\n        uint256 lowerId; // included into range\n        uint256 upperId; // included into range\n        uint256[] blackListedIds; // excluded from range (blacklistedIds must be in range)\n    }\n\n    struct Period {\n        uint128 duration;\n        uint128 aprNumerator;\n    }\n\n    struct UnstakeData {\n        uint64 instantUnstakeDelay; // <= Min stake period\n        uint64 liquidationDelay; // >= MIN_LIQUIDATION_DELAY\n        uint64 instantUnstakePenalty; // nominated in percents multiplied by ACCURACY\n        uint64 earlyUnstakePenalty; // nominated in percents multiplied by ACCURACY\n    }\n\n    struct NFTConfig {\n        address nft;\n        NFTType nftType;\n        Range[] whitelist;\n        uint256 basePrice;\n        uint256 copyLimit;\n    }\n\n    // CONSTANTS ----------------------------------------------------------------------\n\n    uint256 public constant ACCURACY = 10 ** 3;\n    uint256 public constant YEAR = 365 days; // one year in seconds\n    uint256 public constant MIN_STAKE_PERIOD = 1 days + 1; // due to technical reasons add 1 sec for early unstake after instant unstake\n    uint256 public constant MAX_STAKE_PERIOD = 5 * YEAR;\n    uint256 public constant MAX_COPY_AMOUNT = 10 ** 18;\n    uint256 public constant MAX_BASE_PRICE = 10 ** 55; // 10 ** 55 * MAX COPY AMOUNT * aprNumerator < 10**77\n    uint256 public constant MIN_BASE_PRICE = 10 ** 3;\n    uint256 public constant STAKING_PERIODS_LIMIT = 10; // max staking periods count\n    uint256 public constant ONE_HUNDRED = 100; // 100%\n    uint256 public constant MAX_APR_NUMERATOR = ACCURACY * 10000; // max apr = 10_000%\n    uint256 public constant MIN_LIQUIDATION_DELAY = 7 days;\n    uint256 public constant NFT_RANGES_LIMIT = 10; // limit of ids ranges for NFT WL\n    uint256 public constant BLACKLIST_LIMIT = 10; // max blacklisted nfts count\n    uint256 public constant LIMIT_IDS = 500; // 500 IDs per each contract\n    uint256 public constant NFTS_LIMIT = 10;\n    uint256 public constant MAX_FEE = 300 * ACCURACY; // 300%\n    uint256 public constant MULTIPLE_STAKES_IDS_LIMIT = 1;\n    uint256 public constant REWARDS_ACCUMULATE_THRESHOLD = 5 minutes;\n\n    // IMMUTABLE ----------------------------------------------------------------------\n\n    address public owner;\n    Period[] public stakingPeriods;\n\n    NFTConfig[] public nftConfigs;\n\n    // token if != 0x0, else native currency\n    IERC20 public rewardToken;\n    // token != 0x0\n    IERC20 public bonusToken;\n    uint256 public bonusQuoteForUnstake;\n\n    UnstakeData public unstakeInfo;\n\n    // MUTABLE ----------------------------------------------------------------------\n\n    // id => stake\n    mapping(uint256 => Stake) public stakes;\n    // user => ids array\n    mapping(address => uint256[]) public idsByUser;\n    // user => acive ids set\n    mapping(address => EnumerableSet.UintSet) private activeIdsByUser;\n    EnumerableSet.UintSet private activeStakeIds;\n    // user => received status\n    mapping(uint256 => bool) public receivedBonus;\n    // NFT => bool\n    mapping(address => bool) public isNFT;\n    // max potential reward debt\n    uint256 public maxPotentialDebt;\n    // bonus token balance (if reward token != bonus token)\n    uint256 public bonusBalance;\n\n    string public name;\n    string public link;\n    uint256 public globalId;\n\n    bool public paused;\n\n    // EVENTS ----------------------------------------------------------------------\n\n    event Staked(\n        address indexed user,\n        uint256 indexed id,\n        uint256[] ids,\n        uint256[] amounts,\n        uint256 stakingPeriodIndex\n    );\n    event Withdrawn(address indexed user, uint256 indexed id);\n    event Claimed(address indexed user, uint256 indexed id, uint256 rewards);\n    event Received(address indexed from, uint256 amount);\n    event Liquidated(address indexed user, uint256 indexed id);\n\n    // ERRORS ----------------------------------------------------------------------\n\n    error ContractInit();\n    error IndexOutOfBounds();\n    error NotSupportedID();\n    error NotSet();\n    error AlreadySet();\n    error NotReceiveETH();\n    error NotOwner();\n    error MaxPotentialDebtExceeded();\n    error PaymentFailure();\n    error Duplicate();\n    error EmptyStr();\n    error WrongRange();\n    error Paused();\n    error ZeroAddress();\n\n    error ValueTooHigh(string message);\n    error ValueTooLow(string message);\n    error ValueZero(string message);\n    error InvalidLength(string message);\n    error IntervalsCrossover(string message);\n    error InterfaceNotSupported(string message);\n    error InvalidState(string message);\n\n    // MODIFIERS ----------------------------------------------------------------------\n\n    modifier whenBonusSet() {\n        if (address(bonusToken) == address(0)) revert NotSet();\n        _;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert NotOwner();\n        _;\n    }\n\n    modifier onlySupportedId(uint256 id) {\n        if (id > globalId || globalId == 0) revert IndexOutOfBounds();\n        _;\n    }\n\n    // EXTERNAL WRITE ----------------------------------------------------------------------\n\n    /// @notice default receive payable function to accept ether\n    receive() external payable {\n        if (address(rewardToken) != address(0)) revert NotReceiveETH();\n        emit Received(msg.sender, msg.value);\n    }\n\n    /// @notice Adds new bonus amount to contract\n    /// @param from Token holder\n    /// @param amount Bonus token amount\n    function addBonus(\n        address from,\n        uint256 amount\n    ) external onlyOwner whenBonusSet {\n        if (amount == 0) revert ValueZero('amount');\n\n        bonusBalance += amount;\n        bonusToken.safeTransferFrom(from, address(this), amount);\n    }\n\n    /// @notice Inutializes contract\n    /// @dev Is called by the staking aggregator\n    /// @param rewardToken_ - reward token address\n    /// @param nftConfigs_ - NFTConfig struct array\n    /// @param periods_ - array of structs with stakingPeriods, APRs\n    /// @param unstakeData_ - struct with instant / early unstake fees and instant / liquidation delays\n    /// @param bonusToken_ - bonus token address\n    /// @param bonusQuoteForUnstake_ - amount of a bonus quote which is given to a user after unstake\n    function initialize(\n        IERC20 rewardToken_,\n        NFTConfig[] calldata nftConfigs_,\n        Period[] calldata periods_,\n        UnstakeData calldata unstakeData_,\n        IERC20 bonusToken_,\n        uint256 bonusQuoteForUnstake_\n    ) external {\n        if (nftConfigs.length != 0) revert ContractInit();\n\n        if (nftConfigs_.length == 0 || nftConfigs_.length > NFTS_LIMIT)\n            revert InvalidLength('nft config');\n        if (periods_.length == 0 || periods_.length > STAKING_PERIODS_LIMIT)\n            revert InvalidLength('periods');\n\n        if (unstakeData_.instantUnstakeDelay >= MIN_STAKE_PERIOD)\n            revert ValueTooHigh('instant delay');\n        if (unstakeData_.liquidationDelay < MIN_LIQUIDATION_DELAY)\n            revert ValueTooLow('liquidation delay');\n\n        if (unstakeData_.instantUnstakePenalty > MAX_FEE)\n            revert ValueTooHigh('instant penalty');\n        if (unstakeData_.earlyUnstakePenalty > MAX_FEE)\n            revert ValueTooHigh('early penalty');\n\n        owner = msg.sender;\n        unstakeInfo = unstakeData_;\n        rewardToken = rewardToken_;\n\n        if (address(bonusToken_) != address(0) && bonusQuoteForUnstake_ != 0) {\n            bonusToken = bonusToken_;\n            bonusQuoteForUnstake = bonusQuoteForUnstake_;\n        }\n\n        // CHECK STAKING PERIODS + APRs\n        _checkPeriod(periods_[0]);\n        stakingPeriods.push(periods_[0]);\n        for (uint256 i = 1; i < periods_.length; ) {\n            // make sure that periods are sorted and unique\n            if (periods_[i].duration <= periods_[i - 1].duration)\n                revert IntervalsCrossover('periods');\n\n            _checkPeriod(periods_[i]);\n\n            // add the new Period\n            stakingPeriods.push(periods_[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        // added periods\n\n        // CHECK NFTs + WL + BL + BASE PRICE + COPY LIMIT\n        for (uint256 i; i < nftConfigs_.length; ) {\n            NFTConfig memory config = nftConfigs_[i];\n            if (config.nft == address(0)) revert ZeroAddress();\n            // check for NFT duplicate\n            if (isNFT[config.nft]) revert Duplicate();\n            // remember nft address\n            isNFT[config.nft] = true;\n\n            if (config.nftType == NFTType.ERC1155) {\n                if (\n                    !IERC1155(config.nft).supportsInterface(\n                        type(IERC1155).interfaceId\n                    )\n                ) revert InterfaceNotSupported('ERC1155');\n            } else {\n                if (\n                    !IERC721(config.nft).supportsInterface(\n                        type(IERC721).interfaceId\n                    )\n                ) revert InterfaceNotSupported('ERC721');\n            }\n\n            // check whitelist + blacklist + allowd id limit\n            _checkWhitelist(config.whitelist);\n\n            // check base price\n            if (config.basePrice > MAX_BASE_PRICE)\n                revert ValueTooHigh('base price');\n            if (config.basePrice < MIN_BASE_PRICE)\n                revert ValueTooLow('base price');\n\n            // check copy amount\n\n            // not allowed empty stake positions\n            if (config.copyLimit == 0) revert ValueZero('copy limit');\n\n            if (config.nftType == NFTType.ERC721) {\n                // ERC721 can not have copies\n                if (config.copyLimit > 1) revert ValueTooHigh('copy limit');\n            } else {\n                // ERC1155\n\n                if (nftConfigs_.length == 1) {\n                    // Single staking => copy limit <= MAX COPY LIMIT\n                    if (config.copyLimit > MAX_COPY_AMOUNT)\n                        revert ValueTooHigh('copy limit');\n                } else {\n                    // Multiple staking => only 1 NFT\n                    // if MULTIPLE_STAKES_IDS_LIMIT == 1 => only 1 is allowed\n                    if (config.copyLimit > MULTIPLE_STAKES_IDS_LIMIT)\n                        revert ValueTooHigh('copy limit');\n                }\n            }\n\n            // add new config\n            nftConfigs.push(nftConfigs_[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n        // added configs\n    }\n\n    /// @notice Allows users to stake their NFTs in order to earn rewards\n    /// @param ids - an array of ids (one for each NFT collection)\n    /// @param amounts - an array of amounts (one for each NFT collection and id)\n    /// @param stakingPeriodIndex - index of a desired staking period (duration / apr)\n    function stake(\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 stakingPeriodIndex\n    ) external {\n        if (paused) revert Paused();\n        // check lengths\n        uint256 nftCount = nftConfigs.length;\n        NFTConfig[] memory configs = nftConfigs;\n\n        if (ids.length != nftCount) revert InvalidLength('ids');\n        if (amounts.length != nftCount) revert InvalidLength('amounts');\n\n        // check if a staking period with a given index exists\n        if (stakingPeriodIndex >= stakingPeriods.length)\n            revert IndexOutOfBounds();\n\n        for (uint256 i; i < ids.length; ) {\n            if (!inWhitelist(i, ids[i])) revert NotSupportedID();\n            if (amounts[i] == 0) revert ValueZero('amount');\n            if (amounts[i] > configs[i].copyLimit)\n                revert ValueTooHigh('amount');\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // increase max potential debt\n\n        Period memory period = stakingPeriods[stakingPeriodIndex];\n\n        maxPotentialDebt += _calculateRewardsForDurationAndStakingPeriod(\n            amounts,\n            period.aprNumerator,\n            period.duration\n        );\n\n        uint256 balance = contractBalance();\n\n        // ETH is transferred instantly, ERC20 is transferred manually in the end of tx\n        address rewardTokenAddress = address(rewardToken);\n        address bonusTokenAddress = address(bonusToken);\n\n        if (rewardTokenAddress != address(0)) {\n            // ERC20 => possible bonusToken == stakingToken\n            uint256 bonusBalanceLocal = bonusBalance;\n            if (\n                bonusTokenAddress == rewardTokenAddress &&\n                bonusBalanceLocal != 0\n            ) {\n                // reserve a part of contract balance for rewards\n                balance -= bonusBalanceLocal;\n            }\n        }\n\n        // else\n        // ETH => impossible bonusToken == stakingToken\n        // bonus token not set => no reserved balance\n        // bonus token set and != staking token => no receved balance\n\n        // min debt exceeds current balance => revert\n        if (maxPotentialDebt > balance) revert MaxPotentialDebtExceeded();\n\n        // increase global id\n        uint256 id = ++globalId;\n\n        // add stake\n        stakes[id] = Stake({\n            owner: msg.sender,\n            ids: ids,\n            amounts: amounts,\n            lastClaimTimestamp: uint32(block.timestamp), // no claim yet\n            periodIndex: uint32(stakingPeriodIndex),\n            timestamp: uint32(block.timestamp),\n            unstakedAtBlockTimestamp: 0\n        });\n\n        idsByUser[msg.sender].push(id);\n        activeIdsByUser[msg.sender].add(id);\n        activeStakeIds.add(id);\n\n        emit Staked(msg.sender, id, ids, amounts, stakingPeriodIndex);\n\n        // receive funds\n        _transferNFT(\n            nftCount,\n            configs,\n            msg.sender,\n            address(this),\n            ids,\n            amounts\n        );\n    }\n\n    /// @notice Allows user to withdraw staked NFTs + claim earned rewards - penalties\n    /// @param id Stake id\n    function withdraw(uint256 id) external payable onlySupportedId(id) {\n        Stake storage _stake = stakes[id];\n        // check if already unstaked\n        if (_stake.unstakedAtBlockTimestamp != 0)\n            revert InvalidState('unstaked');\n\n        // check if can be unstaked by user (NOT liquidation)\n\n        Period memory period = stakingPeriods[_stake.periodIndex];\n        if (\n            block.timestamp >\n            _stake.timestamp + period.duration + unstakeInfo.liquidationDelay\n        ) revert InvalidState('liquidated');\n\n        // check if stake owner unstakes position\n        if (_stake.owner != msg.sender) revert NotOwner();\n\n        // strict < (because real duration < stake period => early unstake)\n        if (block.timestamp < _stake.timestamp + period.duration) {\n            // EARLY UNSTAKE\n            (, uint256 earnedAmount, uint256 claimedAmount) = _internalClaim(\n                id,\n                _stake,\n                period,\n                false,\n                true\n            );\n\n            // early / instant unstake => pay fees to unstake\n            uint256 actualStakingTime = block.timestamp - _stake.timestamp;\n            UnstakeData memory unstakeDataLocal = unstakeInfo;\n            uint256 fee;\n            if (actualStakingTime < unstakeDataLocal.instantUnstakeDelay) {\n                // INSTANT UNSTAKE\n                fee = unstakeDataLocal.instantUnstakePenalty;\n            } else {\n                // EARLY UNSTAKE\n                fee = unstakeDataLocal.earlyUnstakePenalty;\n            }\n\n            // the goal is: contract holds all earned reward + fees\n            // target amount = earned * (100% + fee)\n            uint256 rewardPenalty = (earnedAmount * fee) /\n                (ONE_HUNDRED * ACCURACY);\n\n            // user has to payback all claimed rewards + reward fee\n            uint256 rewardToContract = claimedAmount + rewardPenalty;\n\n            // update stake struct\n            stakes[id].lastClaimTimestamp = _stake.timestamp;\n\n            _deactivateStake(id, msg.sender);\n\n            // request fees + claimed rewards\n            _accept(msg.sender, rewardToContract);\n        } else {\n            // late unstake => pay left rewards\n            (uint256 reward, , ) = _internalClaim(\n                id,\n                _stake,\n                period,\n                false,\n                false\n            );\n\n            // update stake struct\n            stakes[id].lastClaimTimestamp = uint32(block.timestamp);\n\n            // NO LIQUIDATION HERE, THE RETURN STATEMENT FOR LIQUIDATION IS ABOVE\n            // unstake in time => if bonus not set => no ability to receive bonus => make bonus inactive\n            if (address(bonusToken) == address(0))\n                _deactivateStake(id, _stake.owner);\n\n            // pay left rewards\n            if (reward != 0) _pay(msg.sender, reward);\n        }\n\n        emit Withdrawn(msg.sender, id);\n\n        // transfer principal NFT back\n        _transferNFT(\n            _stake.ids.length,\n            nftConfigs,\n            address(this),\n            msg.sender,\n            _stake.ids,\n            _stake.amounts\n        );\n    }\n\n    /// @notice Allows owner to liquidate stake position\n    /// @param id Stake id\n    /// @param transferFunds Flag (true if transfer principal and rewards to recepient address, else if leave funds on contract address)\n    /// @param recepient Fees receiver address\n    function liquidate(\n        uint256 id,\n        bool transferFunds,\n        address recepient\n    ) external onlyOwner onlySupportedId(id) {\n        Stake storage _stake = stakes[id];\n        if (_stake.unstakedAtBlockTimestamp != 0)\n            revert InvalidState('unstaked');\n        // check if can be unstaked by user (NOT liquidation)\n        Period storage period = stakingPeriods[_stake.periodIndex];\n        if (\n            block.timestamp <=\n            _stake.timestamp + period.duration + unstakeInfo.liquidationDelay\n        ) revert InvalidState('only withdraw');\n\n        (uint256 reward, , ) = _internalClaim(id, _stake, period, false, false);\n\n        _deactivateStake(id, _stake.owner);\n\n        if (recepient == address(0)) revert ZeroAddress();\n\n        emit Liquidated(msg.sender, id);\n\n        // pay rewards if needed\n        if (transferFunds) {\n            if (reward != 0) _pay(recepient, reward);\n        }\n\n        // transfer principal NFT to recepient\n        _transferNFT(\n            _stake.ids.length,\n            nftConfigs,\n            address(this),\n            recepient,\n            _stake.ids,\n            _stake.amounts\n        );\n    }\n\n    /// @notice Internal withdraw / claim / liquidate logic\n    /// @param id - stake id\n    /// @param stakeData - stake struct instance\n    /// @param period - period struct instance\n    /// @param isClaim - flag showing if set stake to unstaked or not\n    /// @param useRewardAccumulateThreshold - flag showing if earned amount should be calculated not continuously by with a certain step\n    /// @return reward - current reward accumulated,  earnedAmount - total reward accumulated,  claimedAmount - previously claimed reward\n    function _internalClaim(\n        uint256 id,\n        Stake memory stakeData,\n        Period memory period,\n        bool isClaim,\n        bool useRewardAccumulateThreshold\n    )\n        private\n        returns (uint256 reward, uint256 earnedAmount, uint256 claimedAmount)\n    {\n        uint256 claimDuration = stakeData.lastClaimTimestamp -\n            stakeData.timestamp;\n        claimedAmount = _calculateRewardsForDurationAndStakingPeriod(\n            stakeData.amounts,\n            period.aprNumerator,\n            claimDuration\n        );\n\n        uint256 stakeDuration = getStakeRealDuration(id);\n        reward =\n            _calculateRewardsForDurationAndStakingPeriod(\n                stakeData.amounts,\n                period.aprNumerator,\n                stakeDuration\n            ) -\n            claimedAmount; // total earned reward - claimed reward\n\n        if (useRewardAccumulateThreshold) {\n            // duration accumulates each REWARDS_ACCUMULATE_THRESHOLD seconds (not continuously)\n            stakeDuration -= stakeDuration % REWARDS_ACCUMULATE_THRESHOLD;\n        }\n\n        earnedAmount = _calculateRewardsForDurationAndStakingPeriod(\n            stakeData.amounts,\n            period.aprNumerator,\n            stakeDuration\n        );\n\n        if (isClaim) {\n            if (reward == 0) revert ValueZero('reward'); // reward = 0, claim => revert\n            maxPotentialDebt -= reward;\n            stakes[id].lastClaimTimestamp = uint32(block.timestamp);\n        } else {\n            // substract the max potential debt\n            maxPotentialDebt -= _calculateRewardsForDurationAndStakingPeriod(\n                stakeData.amounts,\n                period.aprNumerator,\n                period.duration - claimDuration // substract only unclaimed reward\n            );\n            stakes[id].unstakedAtBlockTimestamp = uint32(block.timestamp);\n        }\n    }\n\n    /// @notice Allows to claim all currently earned reward without unstaking the principal\n    /// @param id Stake id\n    function claim(uint256 id) external onlySupportedId(id) {\n        Stake storage _stake = stakes[id];\n        if (_stake.unstakedAtBlockTimestamp != 0)\n            revert InvalidState('unstaked');\n        if (_stake.owner != msg.sender) revert NotOwner();\n        // check if stake is in progress\n        Period storage period = stakingPeriods[_stake.periodIndex];\n        if (block.timestamp > _stake.timestamp + period.duration)\n            revert InvalidState('period ended');\n\n        (uint256 reward, , ) = _internalClaim(id, _stake, period, true, false);\n\n        // ALL TRANSFERS -------------------------------------------------------\n\n        emit Claimed(msg.sender, id, reward);\n\n        // reward != 0 here\n        _pay(msg.sender, reward);\n    }\n\n    /// @notice Allows user to receive bonus if stake was unstaked safely (not early / instant unstake, not liquidation)\n    /// @param id Stake id\n    function receiveBonus(\n        uint256 id\n    ) external whenBonusSet onlySupportedId(id) {\n        Stake storage _stake = stakes[id];\n        if (receivedBonus[id]) revert InvalidState('received');\n\n        // stake must be withdrawn\n        if (_stake.unstakedAtBlockTimestamp == 0)\n            revert InvalidState('not unstaked');\n        if (_stake.owner != msg.sender) revert NotOwner();\n\n        Period storage period = stakingPeriods[_stake.periodIndex];\n\n        // unstake timestamp != 0 && unstake timestamp > stake timestamp\n        uint256 holdTime = _stake.unstakedAtBlockTimestamp - _stake.timestamp;\n        if (holdTime > period.duration + unstakeInfo.liquidationDelay)\n            revert InvalidState('liquidated');\n        if (holdTime < period.duration) revert InvalidState('early withdraw');\n\n        // prevent from double spend\n        receivedBonus[id] = true;\n\n        _deactivateStake(id, msg.sender);\n\n        // check bonus balance is sufficient, works even if reward token = bonus token\n        if (bonusBalance < bonusQuoteForUnstake)\n            revert ValueTooLow('bonus balance');\n\n        bonusBalance -= bonusQuoteForUnstake;\n\n        bonusToken.safeTransfer(_stake.owner, bonusQuoteForUnstake);\n    }\n\n    /// @notice Sets paused state for the contract (can be called by the owner only)\n    /// @param paused_ paused flag\n    function setPaused(bool paused_) external onlyOwner {\n        paused = paused_;\n    }\n\n    /// @notice Can withdraw extra bonus tokens from the pool contract (can be called by the owner only)\n    /// @param recepient - recepient address\n    /// @param amount - bonus amount\n    function emergencyWithdrawBonus(\n        address recepient,\n        uint256 amount\n    ) external onlyOwner whenBonusSet {\n        if (recepient == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ValueZero('amount');\n        if (amount > bonusBalance) revert ValueTooHigh('amount');\n\n        bonusBalance -= amount;\n\n        bonusToken.safeTransfer(recepient, amount);\n    }\n\n    /// @notice Can withdraw extra funds from the pool contract (can be called by the owner only)\n    /// @param recepient - recepient address\n    /// @param amount - funds amount\n    function emergencyWithdrawFunds(\n        address payable recepient,\n        uint256 amount\n    ) external onlyOwner {\n        if (recepient == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ValueZero('amount');\n        if (amount > getRewardsAvailable()) revert ValueTooHigh('amount');\n        _pay(recepient, amount);\n    }\n\n    /// @notice Sets new name and image link for the pool contract\n    /// @param name_ New name string\n    /// @param link_ New image link string\n    function setNameAndLink(\n        string calldata name_,\n        string calldata link_\n    ) external onlyOwner {\n        if ((bytes(name_)).length == 0) revert EmptyStr();\n        if ((bytes(link_)).length == 0) revert EmptyStr();\n        name = name_;\n        link = link_;\n    }\n\n    /// @notice Sets new whitelist for a given NFT collection\n    /// @param nftIndex nft collection index in nftConfigs array\n    /// @param whitelist_ new whitelist\n    function setWhitelist(\n        uint256 nftIndex,\n        Range[] memory whitelist_\n    ) external onlyOwner {\n        if (nftIndex >= nftConfigs.length) revert IndexOutOfBounds();\n        _checkWhitelist(whitelist_);\n\n        uint256 len = whitelist_.length;\n        delete nftConfigs[nftIndex].whitelist;\n        for (uint256 i; i < len; ) {\n            nftConfigs[nftIndex].whitelist.push(whitelist_[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice ERC165 function supportsInterface, in this case it detects that a contract is IERC1155 / IERC721 Receiver\n    /// @return interfaceId - the corresponding bytes representation of interface id\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @notice ERC1155 function onERC1155Received\n    /// @return selector - the corresponding bytes representation of this function signature\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) external virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /// @notice ERC1155 function onERC1155BatchReceived\n    /// @return selector - the corresponding bytes representation of this function signature\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) external virtual returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /// @notice ERC721 function onERC721Received\n    /// @return selector - the corresponding bytes representation of this function signature\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) external virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    // PUBLIC VIEW ----------------------------------------------------------------------\n\n    /// @notice Checks if a certain ID is allowed by the corresponding whitelist\n    /// @dev Uses max O(M + N), where M - WL length (M <= 10), N - sum of BL`s lengths (N <= 10)\n    /// @param nftIndex - NFTs index in protocol\n    /// @param id - NFT id\n    /// @return true - if id is allowed for the NFT WL, else - false\n    function inWhitelist(\n        uint256 nftIndex,\n        uint256 id\n    ) public view returns (bool) {\n        if (nftIndex >= nftConfigs.length) revert IndexOutOfBounds();\n        NFTConfig memory config = nftConfigs[nftIndex];\n\n        for (uint256 rangeIndex; rangeIndex < config.whitelist.length; ) {\n            Range memory range = config.whitelist[rangeIndex];\n            // check if id is in range\n            if (id >= range.lowerId && id <= range.upperId) {\n                // check if id is not blacklisted\n                for (\n                    uint256 blacklistId;\n                    blacklistId < range.blackListedIds.length;\n\n                ) {\n                    // return False if id is in BL\n                    if (id == range.blackListedIds[blacklistId]) return false;\n\n                    unchecked {\n                        ++blacklistId;\n                    }\n                }\n\n                // ID in range and is not blacklisted => ID is allowed\n                return true;\n            }\n\n            // Continue => check the next range\n            unchecked {\n                ++rangeIndex;\n            }\n        }\n\n        // all rounds are checked => ID is not included into rounds\n        return false;\n    }\n\n    /// @notice Allows to view staking token contract balance\n    /// @return balance of staking token contract balance\n    function contractBalance() public view returns (uint256) {\n        if (address(rewardToken) != address(0))\n            return rewardToken.balanceOf(address(this));\n        else return address(this).balance;\n    }\n\n    /// @notice Returns rewards which can be distributed to new users\n    /// @return Max reward available at the moment\n    function getRewardsAvailable() public view returns (uint256) {\n        // maxPotentialDebt = sum of principal + sum of max potential reward\n        uint256 balance = contractBalance();\n        // can not withdraw bonus here\n        uint256 debt;\n        if (address(bonusToken) == address(rewardToken))\n            debt = maxPotentialDebt + bonusBalance;\n        else debt = maxPotentialDebt;\n\n        return (balance > debt) ? balance - debt : 0;\n    }\n\n    /// @notice Allows to view current user earned rewards\n    /// @param id to view rewards\n    /// @return earned - Amount of rewards for the selected user stake\n    function earned(uint256 id) external view returns (uint256) {\n        Stake storage _stake = stakes[id];\n        if (_stake.unstakedAtBlockTimestamp == 0) {\n            // ACTIVE STAKE => calculate amount + increase reward per token\n            // amountForDuration >= amount\n            Period storage period = stakingPeriods[_stake.periodIndex];\n            return\n                _calculateRewardsForDurationAndStakingPeriod(\n                    _stake.amounts,\n                    period.aprNumerator,\n                    getStakeRealDuration(id)\n                );\n        }\n\n        // INACTIVE STAKE\n        return 0;\n    }\n\n    /// @notice Returns the stake exact hold time\n    /// @param id stake id\n    /// @return duration - stake exact hold time\n    function getStakeRealDuration(\n        uint256 id\n    ) internal view returns (uint256 duration) {\n        Stake storage _stake = stakes[id];\n        Period storage period = stakingPeriods[_stake.periodIndex];\n        uint256 holdTime = block.timestamp - _stake.timestamp;\n        uint256 stakingPeriod = period.duration;\n        duration = holdTime > stakingPeriod ? stakingPeriod : holdTime;\n    }\n\n    /// @notice Returns all available staking periods\n    /// @return periods - an array of Period structs\n    function getStakePeriods() external view returns (Period[] memory) {\n        return stakingPeriods;\n    }\n\n    /// @notice Returns all available nft configs\n    /// @return configs - an array of NFTConfig structs\n    function getNFTConfigs() external view returns (NFTConfig[] memory) {\n        return nftConfigs;\n    }\n\n    /// @notice Returns a stake struct with a given id\n    /// @return stake - Stake struct instance\n    function getStake(uint256 id) external view returns (Stake memory) {\n        return stakes[id];\n    }\n\n    /// @notice Allows to get a slice of user stake ids array\n    /// @param user user account\n    /// @param offset Starting index in user ids array\n    /// @param length return array length\n    /// @return Array-slice of user stake ids\n    function getUserStakesIdsSlice(\n        address user,\n        uint256 offset,\n        uint256 length\n    ) external view returns (uint256[] memory) {\n        uint256[] memory res = new uint256[](length);\n        for (uint256 i; i < length; ) {\n            res[i] = idsByUser[user][i + offset];\n            unchecked {\n                ++i;\n            }\n        }\n        return res;\n    }\n\n    /// @notice Allows to get a slice of current active stake ids array\n    /// @param offset Starting index in ids array\n    /// @param length return array length\n    /// @return Array-slice of active stake ids\n    function getActiveStakesIdsSlice(\n        uint256 offset,\n        uint256 length\n    ) external view returns (uint256[] memory) {\n        uint256[] memory res = new uint256[](length);\n        for (uint256 i; i < length; ) {\n            res[i] = activeStakeIds.at(i + offset);\n            unchecked {\n                ++i;\n            }\n        }\n        return res;\n    }\n\n    /// @notice Allows to get a slice of current active user`s stake ids array\n    /// @param user - staker address\n    /// @param offset Starting index in user ids array\n    /// @param length return array length\n    /// @return Array-slice of user active stake ids\n    function getUserActiveStakesIdsSlice(\n        address user,\n        uint256 offset,\n        uint256 length\n    ) external view returns (uint256[] memory) {\n        uint256[] memory res = new uint256[](length);\n        for (uint256 i; i < length; ) {\n            res[i] = activeIdsByUser[user].at(i + offset);\n            unchecked {\n                ++i;\n            }\n        }\n        return res;\n    }\n\n    /// @notice Allows to get a length of current active user`s stake ids array\n    /// @param user - staker address\n    /// @return Length of user active stake ids array\n    function getUserActiveStakesIdsLength(\n        address user\n    ) external view returns (uint256) {\n        return activeIdsByUser[user].length();\n    }\n\n    /// @notice Allows to get a length of current active stake ids array\n    /// @return Length of active stake ids array\n    function getActiveStakesIdsLength() external view returns (uint256) {\n        return activeStakeIds.length();\n    }\n\n    /// @notice Allows to get a length of user`s stake ids array\n    /// @param user - staker address\n    /// @return Length of user stake ids array\n    function getUserStakesLength(address user) external view returns (uint256) {\n        return idsByUser[user].length;\n    }\n\n    // PRIVATE ----------------------------------------------------------------------\n\n    /// @notice Calculates the max potential reward after unstake for a stake (without substracting penalties)\n    /// @param amounts - staked NFT`s copy amounts\n    /// @param aprNumerator - APR numerator\n    /// @param duration - stake hold period\n    /// @return reward potential unstaked reward\n    function _calculateRewardsForDurationAndStakingPeriod(\n        uint256[] memory amounts,\n        uint256 aprNumerator,\n        uint256 duration\n    ) private view returns (uint256) {\n        uint256 rewardNumerator;\n        uint256 len = nftConfigs.length;\n        for (uint256 nftIndex; nftIndex < len; ) {\n            // only one storage accessing here\n            rewardNumerator +=\n                nftConfigs[nftIndex].basePrice *\n                amounts[nftIndex];\n            unchecked {\n                ++nftIndex;\n            }\n        }\n\n        return\n            (rewardNumerator * aprNumerator * duration) /\n            (YEAR * ONE_HUNDRED * ACCURACY);\n    }\n\n    /// @notice Checks if a period is correcty set\n    /// @param period - Period struct instance\n    function _checkPeriod(Period memory period) private pure {\n        if (period.duration < MIN_STAKE_PERIOD) revert ValueTooLow('duration');\n        if (period.duration > MAX_STAKE_PERIOD) revert ValueTooHigh('duration');\n\n        if (period.aprNumerator > MAX_APR_NUMERATOR) revert ValueTooHigh('apr');\n    }\n\n    /// @notice Checks if a whitelist is correcty set\n    /// @param whitelist - Range[] struct instance array, the new whitelist\n    function _checkWhitelist(Range[] memory whitelist) private pure {\n        if (whitelist.length == 0 || whitelist.length > NFT_RANGES_LIMIT)\n            revert InvalidLength('ranges');\n        // check if total IDS number is <= 500\n        uint256 totalIdsCount = _checkWhitelistRange(whitelist[0]);\n        uint256 totalBlackListLength = whitelist[0].blackListedIds.length;\n\n        // max LIMIT_IDS allowed for each whitelist\n        if (totalIdsCount > LIMIT_IDS) revert ValueTooHigh('ids count');\n        // max BLACKLIST_LIMIT allowed for blacklist in total\n        if (totalBlackListLength > BLACKLIST_LIMIT) revert ValueTooHigh('bl');\n\n        for (uint256 i = 1; i < whitelist.length; ) {\n            Range memory range = whitelist[i];\n            totalIdsCount += _checkWhitelistRange(range);\n            totalBlackListLength += whitelist[i].blackListedIds.length;\n\n            // max LIMIT_IDS allowed for each whitelist\n            if (totalIdsCount > LIMIT_IDS) revert ValueTooHigh('ids count');\n            // max BLACKLIST_LIMIT allowed for blacklist in total\n            if (totalBlackListLength > BLACKLIST_LIMIT)\n                revert ValueTooHigh('bl');\n\n            // check ranges not overlap and are sorted\n            if (range.lowerId <= whitelist[i - 1].upperId)\n                revert IntervalsCrossover('ranges');\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Checks if a range is correcty set\n    /// @param range - Range struct instance\n    function _checkWhitelistRange(\n        Range memory range\n    ) private pure returns (uint256 length) {\n        /*\n            1) check lowerId <= upperId\n            2) check all blacklistedIds in range (>= lowerId && <= upperId)\n            3) check range allows at least id (blacklist.len < rangeLen)\n        */\n        if (range.lowerId > range.upperId) revert WrongRange();\n\n        uint256 rangeLen = range.upperId - range.lowerId + 1;\n        uint256 blLength = range.blackListedIds.length;\n\n        if (rangeLen <= blLength) revert InvalidLength('bl > range');\n\n        for (uint256 j; j < blLength; ) {\n            if (\n                range.blackListedIds[j] < range.lowerId ||\n                range.blackListedIds[j] > range.upperId\n            ) revert IndexOutOfBounds();\n            unchecked {\n                ++j;\n            }\n        }\n\n        return rangeLen - blLength;\n    }\n\n    /// @notice Internal function to transfer ERC721 and ERC1155 NFTs\n    /// @param nftCount - NFT collections count\n    /// @param configs - NFT configs\n    /// @param from - NFT holder\n    /// @param to - NFT receiver\n    /// @param ids - an array of ids (one for each NFT collection)\n    /// @param amounts - an array of amounts (one for each NFT collection and id)\n    function _transferNFT(\n        uint256 nftCount,\n        NFTConfig[] memory configs,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) private {\n        for (uint256 i; i < nftCount; ) {\n            if (NFTType.ERC1155 == configs[i].nftType) {\n                IERC1155(configs[i].nft).safeTransferFrom(\n                    from,\n                    to,\n                    ids[i],\n                    amounts[i],\n                    ''\n                );\n            } else {\n                IERC721(configs[i].nft).safeTransferFrom(from, to, ids[i]);\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Transfers ETH or ERC20 tokens to recepient\n    /// @param to - token recepient\n    /// @param amount - token amount\n    function _pay(address to, uint256 amount) private {\n        if (address(rewardToken) == address(0)) {\n            // pay ether\n            (bool success, ) = payable(to).call{value: amount}('');\n            if (!success) revert PaymentFailure();\n        } else {\n            // transfer ERC20\n            rewardToken.safeTransfer(to, amount);\n        }\n    }\n\n    /// @notice Receives ETH or ERC20 tokens from account\n    /// @param from - token holder\n    /// @param amount - token amount\n    function _accept(address from, uint256 amount) private {\n        if (address(rewardToken) == address(0)) {\n            // pay ether\n            if (msg.value < amount) revert ValueTooLow('amount');\n        } else {\n            // transfer ERC20\n            rewardToken.safeTransferFrom(from, address(this), amount);\n        }\n    }\n\n    /// @notice Removes stake from active list\n    /// @param id - stake id\n    function _deactivateStake(uint256 id, address stakeOwner) private {\n        activeIdsByUser[stakeOwner].remove(id);\n        activeStakeIds.remove(id);\n    }\n}\n"
    }
  }
}}