{{
  "language": "Solidity",
  "sources": {
    "src/OnchainDinos.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { ERC721A } from \"@erc721a/ERC721A.sol\";\nimport { NFTEventsAndErrors } from \"./NFTEventsAndErrors.sol\";\nimport { Utils } from \"./utils/Utils.sol\";\nimport { Constants } from \"./utils/Constants.sol\";\nimport { LibString } from \"./utils/LibString.sol\";\nimport { LibPRNG } from \"./LibPRNG.sol\";\nimport { SVG } from \"./utils/SVG.sol\";\n\n/// @title onchain dinos\n/// @notice onchain dinos is an onchain generative dino NFT inspired by tiny dinos. rawr.\ncontract OnchainDinos is ERC721A, NFTEventsAndErrors, Constants {\n    using LibString for uint256;\n    using LibString for uint8;\n    using LibPRNG for LibPRNG.PRNG;\n\n    address private immutable _deployer;\n    bytes32[MAX_DINOS + 1] internal _tokenToSeed;\n\n    uint8[39] internal colors = [\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        5,\n        2,\n        2,\n        2,\n        2,\n        2,\n        1,\n        2,\n        1,\n        2,\n        5,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        4,\n        4,\n        2,\n        5,\n        2,\n        2,\n        4,\n        2,\n        2,\n        2,\n        4,\n        4,\n        2,\n        2\n    ];\n    uint8[39] internal x = [\n        6,\n        10,\n        7,\n        8,\n        6,\n        7,\n        8,\n        9,\n        5,\n        6,\n        7,\n        8,\n        9,\n        6,\n        7,\n        8,\n        9,\n        10,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        6,\n        7,\n        8,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        5,\n        6,\n        7,\n        8,\n        6,\n        8\n    ];\n    uint8[39] internal y = [\n        3,\n        4,\n        3,\n        3,\n        4,\n        4,\n        4,\n        4,\n        5,\n        5,\n        5,\n        5,\n        5,\n        6,\n        6,\n        6,\n        6,\n        6,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        8,\n        8,\n        8,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        10,\n        10,\n        10,\n        10,\n        11,\n        11\n    ];\n\n    constructor() ERC721A(\"onchain dinos\", \"DINO\") {\n        _deployer = msg.sender;\n    }\n\n    /// @notice Mint tokens.\n    /// @param amount amount of tokens to mint\n    function mint(uint8 amount) external payable {\n        // Checks\n        unchecked {\n            if (amount * PRICE != msg.value) {\n                // Check payment by sender is correct\n                revert IncorrectPayment();\n            }\n\n            uint256 nextTokenId = _nextTokenId();\n\n            if (MAX_DINOS + 1 < nextTokenId + amount) {\n                // Check max supply not exceeded\n                revert MaxSupplyReached();\n            }\n\n            // Effects\n            for (uint256 i = nextTokenId; i < nextTokenId + amount;) {\n                _tokenToSeed[i] = keccak256(abi.encodePacked(block.prevrandao, i));\n                ++i;\n            }\n        }\n\n        _mint(msg.sender, amount);\n    }\n\n    function _startTokenId() internal pure override returns (uint256) {\n        return 1;\n    }\n\n    /// @notice Withdraw all ETH from the contract.\n    function withdraw() external {\n        (bool success,) = _deployer.call{ value: address(this).balance }(\"\");\n        require(success);\n    }\n\n    function getColors(uint256 tokenId)\n        public\n        view\n        returns (string memory dinoColor, string memory prevDinoColor, string memory backgroundColor)\n    {\n        LibPRNG.PRNG memory dinoPrng;\n        dinoPrng.seed(_tokenToSeed[tokenId]);\n        uint256 dinoHue = dinoPrng.uniform(360);\n        dinoColor = Utils.hslaString(dinoHue, 25 + dinoPrng.uniform(70), 65 + dinoPrng.uniform(15));\n\n        if (tokenId > 1) {\n            LibPRNG.PRNG memory prevDinoPrng;\n            prevDinoPrng.seed(_tokenToSeed[tokenId - 1]);\n            prevDinoColor = Utils.hslaString(\n                prevDinoPrng.uniform(360), 25 + prevDinoPrng.uniform(70), 65 + prevDinoPrng.uniform(15)\n            );\n        } else {\n            prevDinoColor = \"#FFF\";\n        }\n\n        backgroundColor = Utils.hslaString((dinoHue + 180) % 360, 60, 80);\n    }\n\n    function art(uint256 tokenId) public view returns (string memory) {\n        (string memory bodyColor, string memory hatColor, string memory backgroundColor) = getColors(tokenId);\n\n        string memory dino = \"\";\n        unchecked {\n            for (uint8 i; i < x.length; ++i) {\n                string memory color = colors[i] == 1\n                    ? \"#FFF\"\n                    : colors[i] == 2\n                        ? bodyColor\n                        : colors[i] == 3 ? hatColor : colors[i] == 4 ? \"#DBDBDB\" : colors[i] == 5 ? \"#EDEDED\" : \"\";\n                dino = string.concat(\n                    dino,\n                    SVG.rect(\n                        string.concat(\n                            SVG.prop(\"fill\", color),\n                            SVG.prop(\"x\", x[i].toString()),\n                            SVG.prop(\"y\", y[i].toString()),\n                            i == 0 ? SVG.prop(\"id\", \"a\") : i == 1 ? SVG.prop(\"id\", \"b\") : \"\"\n                        )\n                    )\n                );\n            }\n        }\n\n        return string.concat(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" shape-rendering=\"crispEdges\" viewBox=\"0 0 16 16\" style=\"background-color: ',\n            backgroundColor,\n            '\">',\n            dino,\n            \"</svg>\"\n        );\n    }\n\n    /// @notice Get token uri for token.\n    /// @param tokenId token id\n    /// @return tokenURI\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert URIQueryForNonexistentToken();\n        }\n\n        string memory artSvg = art(tokenId);\n\n        return Utils.formatTokenURI(\n            tokenId,\n            Utils.svgToURI(artSvg),\n            string.concat(\n                \"data:text/html;base64,\",\n                Utils.encodeBase64(\n                    bytes(\n                        string.concat(\n                            '<html style=\"overflow:hidden\"><body style=\"margin:0\">',\n                            artSvg,\n                            '<script>document.body.addEventListener(\"click\",()=>{let t,e;\"6\"===document.getElementById(\"a\").getAttribute(\"x\")?(t=\"9\",e=\"5\"):(t=\"6\",e=\"10\"),document.getElementById(\"a\").setAttribute(\"x\",t),document.getElementById(\"b\").setAttribute(\"x\",e)});</script></body></html>'\n                        )\n                    )\n                )\n            ),\n            string.concat(\"[\", Utils.getTrait(\"metadata\", \"onchain\", true), Utils.getTrait(\"dino\", \"rawr\", false), \"]\")\n        );\n    }\n}\n"
    },
    "lib/ERC721A/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721A.sol\";\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    )\n        external\n        returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return interfaceId == 0x01ffc9a7 // ERC165 interface ID for ERC165.\n            || interfaceId == 0x80ac58cd // ERC165 interface ID for ERC721.\n            || interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256) public view virtual override returns (string memory) {\n        return \"\";\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr) {\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner) {\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n        }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex // If within bounds,\n            && _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    )\n        private\n        pure\n        returns (bool result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _packOwnershipData(to, _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked));\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0) {\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual { }\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual { }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        private\n        returns (bool)\n    {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _packOwnershipData(to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0));\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, OnchainDinos with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for { let tokenId := add(startTokenId, 1) } iszero(eq(tokenId, end)) { tokenId := add(tokenId, 1) } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _packOwnershipData(to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0));\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, \"\");\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n            }\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(address from, address to, uint24 previousExtraData) internal view virtual returns (uint24) { }\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(address from, address to, uint256 prevOwnershipPacked) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 { } {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "src/NFTEventsAndErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ninterface NFTEventsAndErrors {\n    error MaxSupplyReached();\n    error IncorrectPayment();\n}\n"
    },
    "src/utils/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { LibPRNG } from \"./LibPRNG.sol\";\nimport { LibString } from \"./LibString.sol\";\n\nlibrary Utils {\n    using LibPRNG for LibPRNG.PRNG;\n    using LibString for uint256;\n\n    string internal constant _BASE64_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function svgToURI(string memory _source) internal pure returns (string memory) {\n        return string.concat(\"data:image/svg+xml;base64,\", encodeBase64(bytes(_source)));\n    }\n\n    function formatTokenURI(\n        uint256 _tokenId,\n        string memory _imageURI,\n        string memory _animationURI,\n        string memory _properties\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\n            \"data:application/json;base64,\",\n            encodeBase64(\n                bytes(\n                    string.concat(\n                        '{\"name\":\"onchain dino #',\n                        _tokenId.toString(),\n                        '\",\"description\":\"onchain dinos are generative onchain dinos inspired by tiny dinos. the hat each onchain dino is wearing was made by the previous onchain dino.\",\"attributes\":',\n                        _properties,\n                        ',\"image\":\"',\n                        _imageURI,\n                        '\",\"animation_url\":\"',\n                        _animationURI,\n                        '\"}'\n                    )\n                )\n            )\n        );\n    }\n\n    function getTrait(\n        string memory traitType,\n        string memory value,\n        bool includeTrailingComma\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('{\"trait_type\":\"', traitType, '\",\"value\":\"', value, '\"}', includeTrailingComma ? \",\" : \"\");\n    }\n\n    // Encode some bytes in base64\n    // https://gist.github.com/mbvissers/8ba9ac1eca9ed0ef6973bd49b3c999ba\n    function encodeBase64(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = _BASE64_TABLE;\n\n        unchecked {\n            // multiply by 4/3 rounded up\n            uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n            // add some extra buffer at the end required for the writing\n            string memory result = new string(encodedLen + 32);\n\n            assembly {\n                // set the actual output length\n                mstore(result, encodedLen)\n\n                // prepare the lookup table\n                let tablePtr := add(table, 1)\n\n                // input ptr\n                let dataPtr := data\n                let endPtr := add(dataPtr, mload(data))\n\n                // result ptr, jump over length\n                let resultPtr := add(result, 32)\n\n                // run over the input, 3 bytes at a time\n                for { } lt(dataPtr, endPtr) { } {\n                    dataPtr := add(dataPtr, 3)\n\n                    // read 3 bytes\n                    let input := mload(dataPtr)\n\n                    // write 4 characters\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                }\n\n                // padding with '='\n                switch mod(mload(data), 3)\n                case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n                case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n            }\n\n            return result;\n        }\n    }\n\n    function hslaString(uint256 hue, uint256 saturation, uint256 lightness) internal pure returns (string memory) {\n        return string.concat(\"hsla(\", hue.toString(), \",\", saturation.toString(), \"%,\", lightness.toString(), \"%,100%)\");\n    }\n}\n"
    },
    "src/utils/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ncontract Constants {\n    uint256 public constant PRICE = 0.005 ether;\n    uint256 internal constant MAX_DINOS = 1111;\n}\n"
    },
    "src/utils/LibString.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for converting numbers into strings and other string operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\nlibrary LibString {\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                        CUSTOM ERRORS                       */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev The `length` of the output is too small to contain all the hex digits.\n  error HexLengthInsufficient();\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                         CONSTANTS                          */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev The constant returned when the `search` is not found in the string.\n  uint256 internal constant NOT_FOUND = type(uint256).max;\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                     DECIMAL OPERATIONS                     */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the base 10 decimal representation of `value`.\n  function toString(uint256 value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\n      // and 3 words for a maximum of 78 digits.\n      str := add(mload(0x40), 0x80)\n      // Update the free memory pointer to allocate.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end of the memory to calculate the length later.\n      let end := str\n\n      let w := not(0) // Tsk.\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let temp := value\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 1)`.\n        // Write the character to the pointer.\n        // The ASCII index of the '0' character is 48.\n        mstore8(str, add(48, mod(temp, 10)))\n        // Keep dividing `temp` until zero.\n        temp := div(temp, 10)\n        if iszero(temp) {\n          break\n        }\n      }\n\n      let length := sub(end, str)\n      // Move the pointer 32 bytes leftwards to make room for the length.\n      str := sub(str, 0x20)\n      // Store the length.\n      mstore(str, length)\n    }\n  }\n\n  /// @dev Returns the base 10 decimal representation of `value`.\n  function toString(int256 value) internal pure returns (string memory str) {\n    if (value >= 0) {\n      return toString(uint256(value));\n    }\n    unchecked {\n      str = toString(uint256(-value));\n    }\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We still have some spare memory space on the left,\n      // as we have allocated 3 words (96 bytes) for up to 78 digits.\n      let length := mload(str) // Load the string length.\n      mstore(str, 0x2d) // Store the '-' character.\n      str := sub(str, 1) // Move back the string pointer by a byte.\n      mstore(str, add(length, 1)) // Update the string length.\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   HEXADECIMAL OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the hexadecimal representation of `value`,\n  /// left-padded to an input length of `length` bytes.\n  /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n  /// giving a total length of `length * 2 + 2` bytes.\n  /// Reverts if `length` is too small for the output to contain all the digits.\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value, length);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`,\n  /// left-padded to an input length of `length` bytes.\n  /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n  /// giving a total length of `length * 2` bytes.\n  /// Reverts if `length` is too small for the output to contain all the digits.\n  function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\n      // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\n      // We add 0x20 to the total and round down to a multiple of 0x20.\n      // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\n      str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\n      // Allocate the memory.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end to calculate the length later.\n      let end := str\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let start := sub(str, add(length, length))\n      let w := not(1) // Tsk.\n      let temp := value\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 2)`.\n        mstore8(add(str, 1), mload(and(temp, 15)))\n        mstore8(str, mload(and(shr(4, temp), 15)))\n        temp := shr(8, temp)\n        if iszero(xor(str, start)) {\n          break\n        }\n      }\n\n      if temp {\n        // Store the function selector of `HexLengthInsufficient()`.\n        mstore(0x00, 0x2194895a)\n        // Revert with (offset, size).\n        revert(0x1c, 0x04)\n      }\n\n      // Compute the string's length.\n      let strLength := sub(end, str)\n      // Move the pointer and write the length.\n      str := sub(str, 0x20)\n      mstore(str, strLength)\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n  /// As address are 20 bytes long, the output will left-padded to have\n  /// a length of `20 * 2 + 2` bytes.\n  function toHexString(uint256 value) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  /// As address are 20 bytes long, the output will left-padded to have\n  /// a length of `20 * 2` bytes.\n  function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n      // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\n      // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\n      str := add(mload(0x40), 0x80)\n      // Allocate the memory.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end to calculate the length later.\n      let end := str\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let w := not(1) // Tsk.\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let temp := value\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 2)`.\n        mstore8(add(str, 1), mload(and(temp, 15)))\n        mstore8(str, mload(and(shr(4, temp), 15)))\n        temp := shr(8, temp)\n        if iszero(temp) {\n          break\n        }\n      }\n\n      // Compute the string's length.\n      let strLength := sub(end, str)\n      // Move the pointer and write the length.\n      str := sub(str, 0x20)\n      mstore(str, strLength)\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\n  /// and the alphabets are capitalized conditionally according to\n  /// https://eips.ethereum.org/EIPS/eip-55\n  function toHexStringChecksumed(address value) internal pure returns (string memory str) {\n    str = toHexString(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\n      let o := add(str, 0x22)\n      let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\n      let t := shl(240, 136) // `0b10001000 << 240`\n      for {\n        let i := 0\n      } 1 {\n\n      } {\n        mstore(add(i, i), mul(t, byte(i, hashed)))\n        i := add(i, 1)\n        if eq(i, 20) {\n          break\n        }\n      }\n      mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\n      o := add(o, 0x20)\n      mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n  function toHexString(address value) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      str := mload(0x40)\n\n      // Allocate the memory.\n      // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n      // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\n      // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\n      mstore(0x40, add(str, 0x80))\n\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      str := add(str, 2)\n      mstore(str, 40)\n\n      let o := add(str, 0x20)\n      mstore(add(o, 40), 0)\n\n      value := shl(96, value)\n\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let i := 0\n      } 1 {\n\n      } {\n        let p := add(o, add(i, i))\n        let temp := byte(i, value)\n        mstore8(add(p, 1), mload(and(temp, 15)))\n        mstore8(p, mload(shr(4, temp)))\n        i := add(i, 1)\n        if eq(i, 20) {\n          break\n        }\n      }\n    }\n  }\n\n  /// @dev Returns the hex encoded string from the raw bytes.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexString(bytes memory raw) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(raw);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hex encoded string from the raw bytes.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let length := mload(raw)\n      str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\n      mstore(str, add(length, length)) // Store the length of the output.\n\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let o := add(str, 0x20)\n      let end := add(raw, length)\n\n      for {\n\n      } iszero(eq(raw, end)) {\n\n      } {\n        raw := add(raw, 1)\n        mstore8(add(o, 1), mload(and(mload(raw), 15)))\n        mstore8(o, mload(and(shr(4, mload(raw)), 15)))\n        o := add(o, 2)\n      }\n      mstore(o, 0) // Zeroize the slot after the string.\n      mstore(0x40, and(add(o, 31), not(31))) // Allocate the memory.\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   RUNE STRING OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the number of UTF characters in the string.\n  function runeCount(string memory s) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      if mload(s) {\n        mstore(0x00, div(not(0), 255))\n        mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\n        let o := add(s, 0x20)\n        let end := add(o, mload(s))\n        for {\n          result := 1\n        } 1 {\n          result := add(result, 1)\n        } {\n          o := add(o, byte(0, mload(shr(250, mload(o)))))\n          if iszero(lt(o, end)) {\n            break\n          }\n        }\n      }\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   BYTE STRING OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  // For performance and bytecode compactness, all indices of the following operations\n  // are byte (ASCII) offsets, not UTF character offsets.\n\n  /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\n  function replace(\n    string memory subject,\n    string memory search,\n    string memory replacement\n  ) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      let searchLength := mload(search)\n      let replacementLength := mload(replacement)\n\n      subject := add(subject, 0x20)\n      search := add(search, 0x20)\n      replacement := add(replacement, 0x20)\n      result := add(mload(0x40), 0x20)\n\n      let subjectEnd := add(subject, subjectLength)\n      if iszero(gt(searchLength, subjectLength)) {\n        let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\n        let h := 0\n        if iszero(lt(searchLength, 32)) {\n          h := keccak256(search, searchLength)\n        }\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(search)\n        for {\n\n        } 1 {\n\n        } {\n          let t := mload(subject)\n          // Whether the first `searchLength % 32` bytes of\n          // `subject` and `search` matches.\n          if iszero(shr(m, xor(t, s))) {\n            if h {\n              if iszero(eq(keccak256(subject, searchLength), h)) {\n                mstore(result, t)\n                result := add(result, 1)\n                subject := add(subject, 1)\n                if iszero(lt(subject, subjectSearchEnd)) {\n                  break\n                }\n                continue\n              }\n            }\n            // Copy the `replacement` one word at a time.\n            for {\n              let o := 0\n            } 1 {\n\n            } {\n              mstore(add(result, o), mload(add(replacement, o)))\n              o := add(o, 0x20)\n              if iszero(lt(o, replacementLength)) {\n                break\n              }\n            }\n            result := add(result, replacementLength)\n            subject := add(subject, searchLength)\n            if searchLength {\n              if iszero(lt(subject, subjectSearchEnd)) {\n                break\n              }\n              continue\n            }\n          }\n          mstore(result, t)\n          result := add(result, 1)\n          subject := add(subject, 1)\n          if iszero(lt(subject, subjectSearchEnd)) {\n            break\n          }\n        }\n      }\n\n      let resultRemainder := result\n      result := add(mload(0x40), 0x20)\n      let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\n      // Copy the rest of the string one word at a time.\n      for {\n\n      } lt(subject, subjectEnd) {\n\n      } {\n        mstore(resultRemainder, mload(subject))\n        resultRemainder := add(resultRemainder, 0x20)\n        subject := add(subject, 0x20)\n      }\n      result := sub(result, 0x20)\n      // Zeroize the slot after the string.\n      let last := add(add(result, 0x20), k)\n      mstore(last, 0)\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n      // Store the length of the result.\n      mstore(result, k)\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from left to right, starting from `from`.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function indexOf(string memory subject, string memory search, uint256 from) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let subjectLength := mload(subject)\n      } 1 {\n\n      } {\n        if iszero(mload(search)) {\n          if iszero(gt(from, subjectLength)) {\n            result := from\n            break\n          }\n          result := subjectLength\n          break\n        }\n        let searchLength := mload(search)\n        let subjectStart := add(subject, 0x20)\n\n        result := not(0) // Initialize to `NOT_FOUND`.\n\n        subject := add(subjectStart, from)\n        let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\n\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(add(search, 0x20))\n\n        if iszero(and(lt(subject, end), lt(from, subjectLength))) {\n          break\n        }\n\n        if iszero(lt(searchLength, 32)) {\n          for {\n            let h := keccak256(add(search, 0x20), searchLength)\n          } 1 {\n\n          } {\n            if iszero(shr(m, xor(mload(subject), s))) {\n              if eq(keccak256(subject, searchLength), h) {\n                result := sub(subject, subjectStart)\n                break\n              }\n            }\n            subject := add(subject, 1)\n            if iszero(lt(subject, end)) {\n              break\n            }\n          }\n          break\n        }\n        for {\n\n        } 1 {\n\n        } {\n          if iszero(shr(m, xor(mload(subject), s))) {\n            result := sub(subject, subjectStart)\n            break\n          }\n          subject := add(subject, 1)\n          if iszero(lt(subject, end)) {\n            break\n          }\n        }\n        break\n      }\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from left to right.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function indexOf(string memory subject, string memory search) internal pure returns (uint256 result) {\n    result = indexOf(subject, search, 0);\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from right to left, starting from `from`.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function lastIndexOf(\n    string memory subject,\n    string memory search,\n    uint256 from\n  ) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n\n      } 1 {\n\n      } {\n        result := not(0) // Initialize to `NOT_FOUND`.\n        let searchLength := mload(search)\n        if gt(searchLength, mload(subject)) {\n          break\n        }\n        let w := result\n\n        let fromMax := sub(mload(subject), searchLength)\n        if iszero(gt(fromMax, from)) {\n          from := fromMax\n        }\n\n        let end := add(add(subject, 0x20), w)\n        subject := add(add(subject, 0x20), from)\n        if iszero(gt(subject, end)) {\n          break\n        }\n        // As this function is not too often used,\n        // we shall simply use keccak256 for smaller bytecode size.\n        for {\n          let h := keccak256(add(search, 0x20), searchLength)\n        } 1 {\n\n        } {\n          if eq(keccak256(subject, searchLength), h) {\n            result := sub(subject, add(end, 1))\n            break\n          }\n          subject := add(subject, w) // `sub(subject, 1)`.\n          if iszero(gt(subject, end)) {\n            break\n          }\n        }\n        break\n      }\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from right to left.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function lastIndexOf(string memory subject, string memory search) internal pure returns (uint256 result) {\n    result = lastIndexOf(subject, search, uint256(int256(-1)));\n  }\n\n  /// @dev Returns whether `subject` starts with `search`.\n  function startsWith(string memory subject, string memory search) internal pure returns (bool result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let searchLength := mload(search)\n      // Just using keccak256 directly is actually cheaper.\n      // forgefmt: disable-next-item\n      result := and(\n        iszero(gt(searchLength, mload(subject))),\n        eq(keccak256(add(subject, 0x20), searchLength), keccak256(add(search, 0x20), searchLength))\n      )\n    }\n  }\n\n  /// @dev Returns whether `subject` ends with `search`.\n  function endsWith(string memory subject, string memory search) internal pure returns (bool result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let searchLength := mload(search)\n      let subjectLength := mload(subject)\n      // Whether `search` is not longer than `subject`.\n      let withinRange := iszero(gt(searchLength, subjectLength))\n      // Just using keccak256 directly is actually cheaper.\n      // forgefmt: disable-next-item\n      result := and(\n        withinRange,\n        eq(\n          keccak256(\n            // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\n            add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\n            searchLength\n          ),\n          keccak256(add(search, 0x20), searchLength)\n        )\n      )\n    }\n  }\n\n  /// @dev Returns `subject` repeated `times`.\n  function repeat(string memory subject, uint256 times) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      if iszero(or(iszero(times), iszero(subjectLength))) {\n        subject := add(subject, 0x20)\n        result := mload(0x40)\n        let output := add(result, 0x20)\n        for {\n\n        } 1 {\n\n        } {\n          // Copy the `subject` one word at a time.\n          for {\n            let o := 0\n          } 1 {\n\n          } {\n            mstore(add(output, o), mload(add(subject, o)))\n            o := add(o, 0x20)\n            if iszero(lt(o, subjectLength)) {\n              break\n            }\n          }\n          output := add(output, subjectLength)\n          times := sub(times, 1)\n          if iszero(times) {\n            break\n          }\n        }\n        // Zeroize the slot after the string.\n        mstore(output, 0)\n        // Store the length.\n        let resultLength := sub(output, add(result, 0x20))\n        mstore(result, resultLength)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, add(result, and(add(resultLength, 63), not(31))))\n      }\n    }\n  }\n\n  /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n  /// `start` and `end` are byte offsets.\n  function slice(string memory subject, uint256 start, uint256 end) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      if iszero(gt(subjectLength, end)) {\n        end := subjectLength\n      }\n      if iszero(gt(subjectLength, start)) {\n        start := subjectLength\n      }\n      if lt(start, end) {\n        result := mload(0x40)\n        let resultLength := sub(end, start)\n        mstore(result, resultLength)\n        subject := add(subject, start)\n        let w := not(31)\n        // Copy the `subject` one word at a time, backwards.\n        for {\n          let o := and(add(resultLength, 31), w)\n        } 1 {\n\n        } {\n          mstore(add(result, o), mload(add(subject, o)))\n          o := add(o, w) // `sub(o, 0x20)`.\n          if iszero(o) {\n            break\n          }\n        }\n        // Zeroize the slot after the string.\n        mstore(add(add(result, 0x20), resultLength), 0)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, add(result, and(add(resultLength, 63), w)))\n      }\n    }\n  }\n\n  /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\n  /// `start` is a byte offset.\n  function slice(string memory subject, uint256 start) internal pure returns (string memory result) {\n    result = slice(subject, start, uint256(int256(-1)));\n  }\n\n  /// @dev Returns all the indices of `search` in `subject`.\n  /// The indices are byte offsets.\n  function indicesOf(string memory subject, string memory search) internal pure returns (uint256[] memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      let searchLength := mload(search)\n\n      if iszero(gt(searchLength, subjectLength)) {\n        subject := add(subject, 0x20)\n        search := add(search, 0x20)\n        result := add(mload(0x40), 0x20)\n\n        let subjectStart := subject\n        let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\n        let h := 0\n        if iszero(lt(searchLength, 32)) {\n          h := keccak256(search, searchLength)\n        }\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(search)\n        for {\n\n        } 1 {\n\n        } {\n          let t := mload(subject)\n          // Whether the first `searchLength % 32` bytes of\n          // `subject` and `search` matches.\n          if iszero(shr(m, xor(t, s))) {\n            if h {\n              if iszero(eq(keccak256(subject, searchLength), h)) {\n                subject := add(subject, 1)\n                if iszero(lt(subject, subjectSearchEnd)) {\n                  break\n                }\n                continue\n              }\n            }\n            // Append to `result`.\n            mstore(result, sub(subject, subjectStart))\n            result := add(result, 0x20)\n            // Advance `subject` by `searchLength`.\n            subject := add(subject, searchLength)\n            if searchLength {\n              if iszero(lt(subject, subjectSearchEnd)) {\n                break\n              }\n              continue\n            }\n          }\n          subject := add(subject, 1)\n          if iszero(lt(subject, subjectSearchEnd)) {\n            break\n          }\n        }\n        let resultEnd := result\n        // Assign `result` to the free memory pointer.\n        result := mload(0x40)\n        // Store the length of `result`.\n        mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\n        // Allocate memory for result.\n        // We allocate one more word, so this array can be recycled for {split}.\n        mstore(0x40, add(resultEnd, 0x20))\n      }\n    }\n  }\n\n  /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\n  function split(string memory subject, string memory delimiter) internal pure returns (string[] memory result) {\n    uint256[] memory indices = indicesOf(subject, delimiter);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let w := not(31)\n      let indexPtr := add(indices, 0x20)\n      let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n      mstore(add(indicesEnd, w), mload(subject))\n      mstore(indices, add(mload(indices), 1))\n      let prevIndex := 0\n      for {\n\n      } 1 {\n\n      } {\n        let index := mload(indexPtr)\n        mstore(indexPtr, 0x60)\n        if iszero(eq(index, prevIndex)) {\n          let element := mload(0x40)\n          let elementLength := sub(index, prevIndex)\n          mstore(element, elementLength)\n          // Copy the `subject` one word at a time, backwards.\n          for {\n            let o := and(add(elementLength, 31), w)\n          } 1 {\n\n          } {\n            mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n            o := add(o, w) // `sub(o, 0x20)`.\n            if iszero(o) {\n              break\n            }\n          }\n          // Zeroize the slot after the string.\n          mstore(add(add(element, 0x20), elementLength), 0)\n          // Allocate memory for the length and the bytes,\n          // rounded up to a multiple of 32.\n          mstore(0x40, add(element, and(add(elementLength, 63), w)))\n          // Store the `element` into the array.\n          mstore(indexPtr, element)\n        }\n        prevIndex := add(index, mload(delimiter))\n        indexPtr := add(indexPtr, 0x20)\n        if iszero(lt(indexPtr, indicesEnd)) {\n          break\n        }\n      }\n      result := indices\n      if iszero(mload(delimiter)) {\n        result := add(indices, 0x20)\n        mstore(result, sub(mload(indices), 2))\n      }\n    }\n  }\n\n  /// @dev Returns a concatenated string of `a` and `b`.\n  /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\n  function concat(string memory a, string memory b) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let w := not(31)\n      result := mload(0x40)\n      let aLength := mload(a)\n      // Copy `a` one word at a time, backwards.\n      for {\n        let o := and(add(mload(a), 32), w)\n      } 1 {\n\n      } {\n        mstore(add(result, o), mload(add(a, o)))\n        o := add(o, w) // `sub(o, 0x20)`.\n        if iszero(o) {\n          break\n        }\n      }\n      let bLength := mload(b)\n      let output := add(result, mload(a))\n      // Copy `b` one word at a time, backwards.\n      for {\n        let o := and(add(bLength, 32), w)\n      } 1 {\n\n      } {\n        mstore(add(output, o), mload(add(b, o)))\n        o := add(o, w) // `sub(o, 0x20)`.\n        if iszero(o) {\n          break\n        }\n      }\n      let totalLength := add(aLength, bLength)\n      let last := add(add(result, 0x20), totalLength)\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Stores the length.\n      mstore(result, totalLength)\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), w))\n    }\n  }\n\n  /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\n  function toCase(string memory subject, bool toUpper) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let length := mload(subject)\n      if length {\n        result := add(mload(0x40), 0x20)\n        subject := add(subject, 1)\n        let flags := shl(add(70, shl(5, toUpper)), 67108863)\n        let w := not(0)\n        for {\n          let o := length\n        } 1 {\n\n        } {\n          o := add(o, w)\n          let b := and(0xff, mload(add(subject, o)))\n          mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\n          if iszero(o) {\n            break\n          }\n        }\n        // Restore the result.\n        result := mload(0x40)\n        // Stores the string length.\n        mstore(result, length)\n        // Zeroize the slot after the string.\n        let last := add(add(result, 0x20), length)\n        mstore(last, 0)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, and(add(last, 31), not(31)))\n      }\n    }\n  }\n\n  /// @dev Returns a lowercased copy of the string.\n  function lower(string memory subject) internal pure returns (string memory result) {\n    result = toCase(subject, false);\n  }\n\n  /// @dev Returns an UPPERCASED copy of the string.\n  function upper(string memory subject) internal pure returns (string memory result) {\n    result = toCase(subject, true);\n  }\n\n  /// @dev Escapes the string to be used within HTML tags.\n  function escapeHTML(string memory s) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let end := add(s, mload(s))\n        result := add(mload(0x40), 0x20)\n        // Store the bytes of the packed offsets and strides into the scratch space.\n        // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\n        mstore(0x1f, 0x900094)\n        mstore(0x08, 0xc0000000a6ab)\n        // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\n        mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\n      } iszero(eq(s, end)) {\n\n      } {\n        s := add(s, 1)\n        let c := and(mload(s), 0xff)\n        // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\n        if iszero(and(shl(c, 1), 0x500000c400000000)) {\n          mstore8(result, c)\n          result := add(result, 1)\n          continue\n        }\n        let t := shr(248, mload(c))\n        mstore(result, mload(and(t, 31)))\n        result := add(result, shr(5, t))\n      }\n      let last := result\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Restore the result to the start of the free memory.\n      result := mload(0x40)\n      // Store the length of the result.\n      mstore(result, sub(last, add(result, 0x20)))\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n    }\n  }\n\n  /// @dev Escapes the string to be used within double-quotes in a JSON.\n  function escapeJSON(string memory s) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let end := add(s, mload(s))\n        result := add(mload(0x40), 0x20)\n        // Store \"\\\\u0000\" in scratch space.\n        // Store \"0123456789abcdef\" in scratch space.\n        // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\n        // into the scratch space.\n        mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\n        // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\n        let e := or(shl(0x22, 1), shl(0x5c, 1))\n      } iszero(eq(s, end)) {\n\n      } {\n        s := add(s, 1)\n        let c := and(mload(s), 0xff)\n        if iszero(lt(c, 0x20)) {\n          if iszero(and(shl(c, 1), e)) {\n            // Not in `[\"\\\"\",\"\\\\\"]`.\n            mstore8(result, c)\n            result := add(result, 1)\n            continue\n          }\n          mstore8(result, 0x5c) // \"\\\\\".\n          mstore8(add(result, 1), c)\n          result := add(result, 2)\n          continue\n        }\n        if iszero(and(shl(c, 1), 0x3700)) {\n          // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\n          mstore8(0x1d, mload(shr(4, c))) // Hex value.\n          mstore8(0x1e, mload(and(c, 15))) // Hex value.\n          mstore(result, mload(0x19)) // \"\\\\u00XX\".\n          result := add(result, 6)\n          continue\n        }\n        mstore8(result, 0x5c) // \"\\\\\".\n        mstore8(add(result, 1), mload(add(c, 8)))\n        result := add(result, 2)\n      }\n      let last := result\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Restore the result to the start of the free memory.\n      result := mload(0x40)\n      // Store the length of the result.\n      mstore(result, sub(last, add(result, 0x20)))\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n    }\n  }\n\n  /// @dev Returns whether `a` equals `b`.\n  function eq(string memory a, string memory b) internal pure returns (bool result) {\n    assembly {\n      result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n    }\n  }\n\n  /// @dev Packs a single string with its length into a single word.\n  /// Returns `bytes32(0)` if the length is zero or greater than 31.\n  function packOne(string memory a) internal pure returns (bytes32 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We don't need to zero right pad the string,\n      // since this is our own custom non-standard packing scheme.\n      result := mul(\n        // Load the length and the bytes.\n        mload(add(a, 0x1f)),\n        // `length != 0 && length < 32`. Abuses underflow.\n        // Assumes that the length is valid and within the block gas limit.\n        lt(sub(mload(a), 1), 0x1f)\n      )\n    }\n  }\n\n  /// @dev Unpacks a string packed using {packOne}.\n  /// Returns the empty string if `packed` is `bytes32(0)`.\n  /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\n  function unpackOne(bytes32 packed) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Grab the free memory pointer.\n      result := mload(0x40)\n      // Allocate 2 words (1 for the length, 1 for the bytes).\n      mstore(0x40, add(result, 0x40))\n      // Zeroize the length slot.\n      mstore(result, 0)\n      // Store the length and bytes.\n      mstore(add(result, 0x1f), packed)\n      // Right pad with zeroes.\n      mstore(add(add(result, 0x20), mload(result)), 0)\n    }\n  }\n\n  /// @dev Packs two strings with their lengths into a single word.\n  /// Returns `bytes32(0)` if combined length is zero or greater than 30.\n  function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let aLength := mload(a)\n      // We don't need to zero right pad the strings,\n      // since this is our own custom non-standard packing scheme.\n      result := mul(\n        // Load the length and the bytes of `a` and `b`.\n        or(shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))), mload(sub(add(b, 0x1e), aLength))),\n        // `totalLength != 0 && totalLength < 31`. Abuses underflow.\n        // Assumes that the lengths are valid and within the block gas limit.\n        lt(sub(add(aLength, mload(b)), 1), 0x1e)\n      )\n    }\n  }\n\n  /// @dev Unpacks strings packed using {packTwo}.\n  /// Returns the empty strings if `packed` is `bytes32(0)`.\n  /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\n  function unpackTwo(bytes32 packed) internal pure returns (string memory resultA, string memory resultB) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Grab the free memory pointer.\n      resultA := mload(0x40)\n      resultB := add(resultA, 0x40)\n      // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\n      mstore(0x40, add(resultB, 0x40))\n      // Zeroize the length slots.\n      mstore(resultA, 0)\n      mstore(resultB, 0)\n      // Store the lengths and bytes.\n      mstore(add(resultA, 0x1f), packed)\n      mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\n      // Right pad with zeroes.\n      mstore(add(add(resultA, 0x20), mload(resultA)), 0)\n      mstore(add(add(resultB, 0x20), mload(resultB)), 0)\n    }\n  }\n\n  /// @dev Directly returns `a` without copying.\n  function directReturn(string memory a) internal pure {\n    assembly {\n      // Assumes that the string does not start from the scratch space.\n      let retStart := sub(a, 0x20)\n      let retSize := add(mload(a), 0x40)\n      // Right pad with zeroes. Just in case the string is produced\n      // by a method that doesn't zero right pad.\n      mstore(add(retStart, retSize), 0)\n      // Store the return offset.\n      mstore(retStart, 0x20)\n      // End the transaction, returning the string.\n      return(retStart, retSize)\n    }\n  }\n}\n"
    },
    "src/LibPRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for generating psuedorandom numbers.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\nlibrary LibPRNG {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev A psuedorandom number state in memory.\n    struct PRNG {\n        uint256 state;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         OPERATIONS                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Seeds the `prng` with `state`.\n    function seed(PRNG memory prng, bytes32 state) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(prng, state)\n        }\n    }\n\n    /// @dev Returns a psuedorandom uint256, uniformly distributed\n    /// between 0 (inclusive) and `upper` (exclusive).\n    /// If your modulus is big, this method is recommended\n    /// for uniform sampling to avoid modulo bias.\n    /// For uniform sampling across all uint256 values,\n    /// or for small enough moduli such that the bias is neligible,\n    /// use {next} instead.\n    function uniform(\n        PRNG memory prng,\n        uint256 upper\n    ) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // prettier-ignore\n            for {} 1 {} {\n                result := keccak256(prng, 0x20)\n                mstore(prng, result)\n                // prettier-ignore\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\n            }\n            result := mod(result, upper)\n        }\n    }\n}\n"
    },
    "src/utils/SVG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nlibrary SVG {\n    /* MAIN ELEMENTS */\n\n    function line(string memory _props) internal pure returns (string memory) {\n        return string.concat(\"<line \", _props, \"/>\");\n    }\n\n    function rect(string memory _props) internal pure returns (string memory) {\n        return string.concat('<rect height=\"1\" width=\"1\" ', _props, \"/>\");\n    }\n\n    /* COMMON */\n\n    // an SVG attribute\n    function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n        return string.concat(_key, \"=\", '\"', _val, '\" ');\n    }\n}\n"
    },
    "lib/ERC721A/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "src/utils/LibPRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for generating psuedorandom numbers.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\nlibrary LibPRNG {\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                          STRUCTS                           */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev A psuedorandom number state in memory.\n  struct PRNG {\n    uint256 state;\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                         OPERATIONS                         */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Seeds the `prng` with `state`.\n  function seed(PRNG memory prng, bytes32 state) internal pure {\n    /// @solidity memory-safe-assembly\n    assembly {\n      mstore(prng, state)\n    }\n  }\n\n  /// @dev Returns a psuedorandom uint256, uniformly distributed\n  /// between 0 (inclusive) and `upper` (exclusive).\n  /// If your modulus is big, this method is recommended\n  /// for uniform sampling to avoid modulo bias.\n  /// For uniform sampling across all uint256 values,\n  /// or for small enough moduli such that the bias is neligible,\n  /// use {next} instead.\n  function uniform(PRNG memory prng, uint256 upper) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // prettier-ignore\n      for {} 1 {} {\n                result := keccak256(prng, 0x20)\n                mstore(prng, result)\n                // prettier-ignore\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\n            }\n      result := mod(result, upper)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@prb/test/=lib/prb-test/src/",
      "forge-std/=lib/forge-std/src/",
      "src/=src/",
      "@erc721a/=lib/ERC721A/contracts/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "@solady/=lib/solady/src/",
      "operator-filter-registry/=lib/operator-filter-registry/",
      "ERC721A/=lib/ERC721A/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "prb-math/=lib/prb-math/src/",
      "prb-test/=lib/prb-test/src/",
      "solady/=lib/solady/src/",
      "solidity-trigonometry/=lib/solidity-trigonometry/src/",
      "solmate/=lib/solady/lib/solmate/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}}