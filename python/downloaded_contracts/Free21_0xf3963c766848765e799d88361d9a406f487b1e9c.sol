{"Free21.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$    /$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$ /$$$$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$|_  $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$           /$$$$$$/  | $$\n| $$__/   | $$__  $$| $$__/   | $$__/          /$$____/   | $$\n| $$      | $$  \\ $$| $$      | $$            | $$        | $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      | $$$$$$$$ /$$$$$$\n|__/      |__/  |__/|________/|________/      |________/|______/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\n\n\ninterface FreeClaimer {\n  function free0TokenIdUsed(uint256) external view returns (bool);\n}\n\ncontract Free21 is FreeChecker {\n  mapping(uint256 =\u003e address) public free0TokenIdToOwner;\n  mapping(uint256 =\u003e uint256) public free0TokenStakeBlockNumber;\n\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    assembly {\n      size := extcodesize(account)\n    }\n    return size \u003e 0;\n  }\n\n  function isValidFree0(uint256 tokenId) public view returns (bool) {\n    return\n      FreeClaimer(free.collectionIdToMinter(8)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(9)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(10)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(11)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(12)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(13)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(14)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(15)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(16)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(17)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(18)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(19)).free0TokenIdUsed(tokenId) \u0026\u0026\n      FreeClaimer(free.collectionIdToMinter(20)).free0TokenIdUsed(tokenId)\n    ;\n  }\n\n  function onERC721Received(\n    address,\n    address from,\n    uint256 tokenId,\n    bytes calldata\n  ) external returns (bytes4) {\n    require(msg.sender == address(free), \u0027Not a Free token\u0027);\n    require(free.tokenIdToCollectionId(tokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[tokenId], \u0027This Free0 has already been used to mint a Free21\u0027);\n\n    require(!isContract(from), \u0027Cannot be owned by a contract\u0027);\n    require(isValidFree0(tokenId), \u0027Token not used to complete Frees 8-20\u0027);\n\n    free0TokenIdToOwner[tokenId] = from;\n    free0TokenStakeBlockNumber[tokenId] = block.number;\n\n    return this.onERC721Received.selector;\n  }\n\n\n  function claim(uint256 free0TokenId, uint256 tokenToRescue) external {\n    preCheck(free0TokenId, \u002721\u0027);\n    require(isValidFree0(free0TokenId), \u0027Token not used to complete Frees 8-20\u0027);\n\n\n    require(free0TokenStakeBlockNumber[tokenToRescue] \u003c block.number, \u0027Must wait at least one block to rescue\u0027);\n    require(!isContract(msg.sender), \u0027Cannot be owned by a contract\u0027);\n\n    free.safeTransferFrom(address(this), free0TokenIdToOwner[tokenToRescue], tokenToRescue);\n\n\n\n    postCheck(tokenToRescue, 21, \u002721\u0027);\n    postCheck(free0TokenId, 21, \u002721\u0027);\n  }\n\n\n}"},"FreeChecker.sol":{"content":"\n// SPDX-License-Identifier: CC0\n\n\n/*\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\ninterface IFree {\n  function totalSupply() external  view returns (uint256);\n  function balanceOf(address) external  view returns (uint256);\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n  function collectionSupply(uint256 collectionId) external view returns (uint256);\n  function collectionIdToMinter(uint256 collectionId) external view returns (address);\n  function mint(uint256 collectionId, address to) external;\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\nabstract contract FreeChecker {\n  mapping(uint256 =\u003e bool) public free0TokenIdUsed;\n  IFree public immutable free = IFree(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function preCheck(uint256 free0TokenId, string memory freeStr) internal view {\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[free0TokenId],\n      string(abi.encodePacked(\u0027This Free0 has already been used to mint a Free\u0027, freeStr))\n    );\n    require(free.ownerOf(free0TokenId) == msg.sender, \u0027You must be the owner of this Free0\u0027);\n\n  }\n\n  function postCheck(uint256 free0TokenId, uint256 freeNumber, string memory freeStr) internal {\n    free0TokenIdUsed[free0TokenId] = true;\n    free.appendAttributeToToken(free0TokenId,\n      string(abi.encodePacked(\u0027Used For Free\u0027, freeStr, \u0027 Mint\u0027)),\n      \u0027true\u0027\n    );\n    free.mint(freeNumber, msg.sender);\n  }\n\n  function checkFreeToken(uint256 freeTokenId, uint256 collectionId) internal view {\n    require(free.ownerOf(freeTokenId) == msg.sender, \u0027Not owner of token\u0027);\n    require(free.tokenIdToCollectionId(freeTokenId) == collectionId, \u0027Token collection mismatch\u0027);\n  }\n}"}}