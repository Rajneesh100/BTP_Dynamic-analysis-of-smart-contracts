{{
  "language": "Solidity",
  "sources": {
    "contracts/ITokenLockup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface ITokenLockup {\r\n    struct Schedule {\r\n        uint256 endTime;\r\n        uint256 portion;\r\n    }\r\n\r\n    event Fund(address indexed recipient, uint256 amount);\r\n\r\n    event Claim(address indexed recipient, uint256 claimed);\r\n    event Reclaim(address indexed recipient, uint256 claimed);\r\n\r\n    event ChangeRecipient(\r\n        address indexed oldRecipient,\r\n        address indexed newRecipient\r\n    );\r\n\r\n    function token() external view returns (address);\r\n\r\n    function startTime() external view returns (uint256);\r\n\r\n    function claimDelay() external view returns (uint256);\r\n\r\n    function schedule(uint256 index) external view returns (uint256, uint256);\r\n\r\n    function initialLocked(address account) external view returns (uint256);\r\n\r\n    function totalClaimed(address account) external view returns (uint256);\r\n\r\n    function initialLockedSupply() external view returns (uint256);\r\n\r\n    function unallocatedSupply() external view returns (uint256);\r\n\r\n    function addTokens(uint256 amount) external;\r\n\r\n    function fund(\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    function claim() external;\r\n\r\n    function changeRecipient(address newRecipient) external;\r\n\r\n    function unlockedSupply() external view returns (uint256);\r\n\r\n    function lockedSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function unlockedOf(address account) external view returns (uint256);\r\n\r\n    function lockedOf(address account) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/MLTokenLockup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\nimport \"./ITokenLockup.sol\";\r\n\r\ncontract MLTokenLockup is Ownable, ITokenLockup {\r\n    address public token;\r\n\r\n    uint256 public startTime;\r\n    uint256 public claimDelay;\r\n    Schedule[] public schedule;\r\n\r\n    mapping(address => uint256) public initialLocked;\r\n    mapping(address => uint256) public totalClaimed;\r\n\r\n    uint256 public initialLockedSupply;\r\n    uint256 public unallocatedSupply;\r\n\r\n    uint256 private constant INVERSE_BASIS_POINTS = 100;\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _startTime,\r\n        uint256 _claimDelay,\r\n        Schedule[] memory _schedule\r\n    ) {\r\n        require(_startTime >= block.timestamp, \"Invalid startTime\");\r\n\r\n        token = _token;\r\n        startTime = _startTime;\r\n        claimDelay = _claimDelay;\r\n\r\n        uint256 scheduleLength = _schedule.length;\r\n        uint256 totalPortion;\r\n        for (uint256 i; i < scheduleLength; i++) {\r\n            totalPortion += _schedule[i].portion;\r\n            if (i != 0) {\r\n                require(\r\n                    _schedule[i - 1].endTime < _schedule[i].endTime,\r\n                    \"Invalid schedule times\"\r\n                );\r\n            }\r\n            schedule.push(_schedule[i]);\r\n        }\r\n        require(\r\n            totalPortion == INVERSE_BASIS_POINTS,\r\n            \"Invalid schedule portions\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers and locks unallocated tokens in escrow from msg.sender\r\n     * @param amount Amount of tokens to lock in escrow\r\n     */\r\n    function addTokens(uint256 amount) external onlyOwner {\r\n        require(IERC20(token).transferFrom(msg.sender, address(this), amount));\r\n        unallocatedSupply += amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes unallocated tokens to recipients\r\n     * @param recipients List of addresses to distribute tokens to\r\n     * @param amounts List of token amounts to distribute to recipient at respective index\r\n     */\r\n    function fund(\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external onlyOwner {\r\n        require(recipients.length == amounts.length);\r\n        uint256 _totalAmount = 0;\r\n        for (uint i; i < amounts.length; ++i) {\r\n            uint256 amount = amounts[i];\r\n            address recipient = recipients[i];\r\n            if (recipient == address(0)) {\r\n                break;\r\n            }\r\n            _totalAmount += amount;\r\n            initialLocked[recipient] += amount;\r\n            emit Fund(recipient, amount);\r\n        }\r\n        initialLockedSupply += _totalAmount;\r\n        unallocatedSupply -= _totalAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves unclaimed unlocked tokens for msg.sender\r\n     */\r\n    function claim() external {\r\n        require(\r\n            block.timestamp > startTime + claimDelay,\r\n            \"Claiming is not available yet\"\r\n        );\r\n\r\n        uint256 claimable = _totalUnlockedOf(msg.sender) -\r\n            totalClaimed[msg.sender];\r\n        totalClaimed[msg.sender] += claimable;\r\n        require(IERC20(token).transfer(msg.sender, claimable));\r\n\r\n        emit Claim(msg.sender, claimable);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the recipient of msg.sender funds\r\n     * @param newRecipient New address to transfer the locked funds to\r\n     */\r\n    function changeRecipient(address newRecipient) external {\r\n        require(\r\n            newRecipient != msg.sender,\r\n            \"newRecipient must not be msg.sender\"\r\n        );\r\n        uint256 _initialLocked = initialLocked[msg.sender];\r\n        uint256 _totalClaimed = totalClaimed[msg.sender];\r\n        initialLocked[msg.sender] = 0;\r\n        totalClaimed[msg.sender] = 0;\r\n        initialLocked[newRecipient] += _initialLocked;\r\n        totalClaimed[newRecipient] += _totalClaimed;\r\n\r\n        emit ChangeRecipient(msg.sender, newRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns unclaimed unlocked balance for account\r\n     * @param account Address to check balance of\r\n     * @return Unclaimed unlocked balance\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _totalUnlockedOf(account) - totalClaimed[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns unlocked balance for account\r\n     * @param account Address to check unlocked balance of\r\n     * @return Unlocked balance\r\n     */\r\n    function unlockedOf(address account) external view returns (uint256) {\r\n        return _totalUnlockedOf(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns locked balance for account\r\n     * @param account Address to check unlocked balance of\r\n     * @return Locked balance\r\n     */\r\n    function lockedOf(address account) external view returns (uint256) {\r\n        return initialLocked[account] - _totalUnlockedOf(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns total unlocked supply\r\n     * @return Total unlocked supply\r\n     */\r\n    function unlockedSupply() external view returns (uint256) {\r\n        return _totalUnlocked();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns total supply that has not unlocked\r\n     * @return Total locked supply\r\n     */\r\n    function lockedSupply() external view returns (uint256) {\r\n        return initialLockedSupply - _totalUnlocked();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns unlocked balance for account at specified time\r\n     * @param account Address to check unlocked balance of\r\n     * @return Unlocked balance\r\n     */\r\n    function _totalUnlockedOf(address account) internal view returns (uint256) {\r\n        uint256 locked = initialLocked[account];\r\n        return _computeUnlocked(locked, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns total unlocked supply\r\n     * @return Total unlocked supply\r\n     */\r\n    function _totalUnlocked() internal view returns (uint256) {\r\n        uint256 locked = initialLockedSupply;\r\n        return _computeUnlocked(locked, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Compute and return amount of initial locked tokens that have unlocked based on schedule\r\n     * @param locked Initial locked tokens\r\n     * @param time Time to check unlocked balance at\r\n     * @return Amount of locked tokens that have unlocked\r\n     */\r\n    function _computeUnlocked(\r\n        uint256 locked,\r\n        uint256 time\r\n    ) internal view returns (uint256) {\r\n        uint256 start = startTime;\r\n        if (time < start) {\r\n            return 0;\r\n        }\r\n        uint256 unlocked;\r\n        uint256 scheduleLength = schedule.length;\r\n        for (uint i; i < scheduleLength; i++) {\r\n            uint256 portion = schedule[i].portion;\r\n            uint256 end = schedule[i].endTime;\r\n            if (time < end) {\r\n                unlocked +=\r\n                    (locked * (time - start) * portion) /\r\n                    ((end - start) * INVERSE_BASIS_POINTS);\r\n                break;\r\n            } else {\r\n                unlocked += (locked * portion) / INVERSE_BASIS_POINTS;\r\n                start = end;\r\n            }\r\n        }\r\n        return unlocked;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/MLTokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @title ManageLifeVestingWallet\r\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\r\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\r\n * The vesting schedule is customizable through the {vestedAmount} function.\r\n *\r\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\r\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\r\n * be immediately releasable.\r\n */\r\ncontract ManageLifeVestingWallet is Context {\r\n    event EtherReleased(uint256 amount);\r\n    event ERC20Released(address indexed token, uint256 amount);\r\n\r\n    uint256 private _released;\r\n    mapping(address => uint256) private _erc20Released;\r\n    address private immutable _beneficiary;\r\n    uint64 private immutable _start;\r\n    uint64 private immutable _duration;\r\n\r\n    /**\r\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\r\n     */\r\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\r\n        require(beneficiaryAddress != address(0), \"VestingWallet: beneficiary is zero address\");\r\n        _beneficiary = beneficiaryAddress;\r\n        _start = startTimestamp;\r\n        _duration = durationSeconds;\r\n    }\r\n\r\n    /**\r\n     * @dev The contract should be able to receive Eth.\r\n     */\r\n    receive() external payable virtual {}\r\n\r\n    /**\r\n     * @dev Getter for the beneficiary address.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the start timestamp.\r\n     */\r\n    function start() public view virtual returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the vesting duration.\r\n     */\r\n    function duration() public view virtual returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of eth already released\r\n     */\r\n    function released() public view virtual returns (uint256) {\r\n        return _released;\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of token already released\r\n     */\r\n    function released(address token) public view virtual returns (uint256) {\r\n        return _erc20Released[token];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable eth.\r\n     */\r\n    function releasable() public view virtual returns (uint256) {\r\n        return vestedAmount(uint64(block.timestamp)) - released();\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function releasable(address token) public view virtual returns (uint256) {\r\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\r\n    }\r\n\r\n    /**\r\n     * @dev Release the native token (ether) that have already vested.\r\n     *\r\n     * Emits a {EtherReleased} event.\r\n     */\r\n    function release() public virtual {\r\n        uint256 amount = releasable();\r\n        _released += amount;\r\n        emit EtherReleased(amount);\r\n        Address.sendValue(payable(beneficiary()), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Release the tokens that have already vested.\r\n     *\r\n     * Emits a {ERC20Released} event.\r\n     */\r\n    function release(address token) public virtual {\r\n        uint256 amount = releasable(token);\r\n        _erc20Released[token] += amount;\r\n        emit ERC20Released(token, amount);\r\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\r\n        return _vestingSchedule(address(this).balance + released(), timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\r\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\r\n     * an asset given its total historical allocation.\r\n     */\r\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\r\n        if (timestamp < start()) {\r\n            return 0;\r\n        } else if (timestamp > start() + duration()) {\r\n            return totalAllocation;\r\n        } else {\r\n            return (totalAllocation * (timestamp - start())) / duration();\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/ManageLife.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./Life.sol\";\r\nimport \"./Marketplace.sol\";\r\n\r\n/**\r\n * @notice ManageLife Member NFT (ERC-721) contract for ManageLife Members.\r\n * An NFT represents a membership or home ownership in real life.\r\n * Properties are all being managed by ManageLife.\r\n * NFT Symbol: MLRE\r\n *\r\n * @author https://managelife.co\r\n */\r\ncontract ManageLife is ERC721, ERC721URIStorage, ERC721Burnable, Ownable {\r\n    Life public lifeToken;\r\n    Marketplace public marketplace;\r\n\r\n    /// @notice Mapping to get the issuance rate of a tokenId (propery).\r\n    mapping(uint256 => uint256) public lifeTokenIssuanceRate;\r\n\r\n    /// @notice Mapping to check the payment status of a tokenId.\r\n    mapping(uint256 => bool) public fullyPaid;\r\n\r\n    event FullyPaid(uint256 tokenId);\r\n    event StakingInitialized(uint256 tokenId);\r\n    event TokenIssuanceRateUpdated(\r\n        uint256 token,\r\n        uint256 newLifeTokenIssuanceRate\r\n    );\r\n    event BaseURIUpdated(string _newURIAddress);\r\n\r\n    constructor() ERC721(\"ManageLife Member\", \"MLRE\") {}\r\n\r\n    /// @notice Public base URI of ML's NFTs\r\n    string public baseUri = \"https://iweb3api.managelifeapi.co/api/v1/nfts/\";\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseUri;\r\n    }\r\n\r\n    /**\r\n     * @notice Function to change the base URI of the NFTs.\r\n     * @dev Giving the ML Admins an options in the future to change the URI of NFTs.\r\n     * @param newBaseUri New URI string.\r\n     */\r\n    function setBaseURI(string memory newBaseUri) external onlyOwner {\r\n        baseUri = newBaseUri;\r\n        emit BaseURIUpdated(newBaseUri);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to set the Marketplace contract address.\r\n     * @dev Very important to set this after contract deployment.\r\n     * @param marketplace_ Address of the marketplace contract.\r\n     */\r\n    function setMarketplace(address payable marketplace_) external onlyOwner {\r\n        marketplace = Marketplace(marketplace_);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to set the $MLIFE token contract address.\r\n     * @dev Very important to set this after contract deployment.\r\n     * @param lifeToken_ Address of the $MLIFE token contract.\r\n     */\r\n    function setLifeToken(address lifeToken_) external onlyOwner {\r\n        lifeToken = Life(lifeToken_);\r\n    }\r\n\r\n    /**\r\n     * @notice Mark an NFT or property fully paid from all mortgages at ML.\r\n     * @dev This can only be executed by the contract deployer or admin wallet.\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function markFullyPaid(uint256 tokenId) external onlyOwner {\r\n        fullyPaid[tokenId] = true;\r\n\r\n        /// @notice Staking for this property will be initialized if this is not owned by admin wallet.\r\n        if (owner() != ownerOf(tokenId)) {\r\n            lifeToken.initStakingRewards(tokenId);\r\n        }\r\n        emit FullyPaid(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to mint new NFT properties.\r\n     *\r\n     * @dev Property ID will be the property number provided by the ML-NFT-API service.\r\n     * Life token issuance rate will be populated by the web3 admin from the portal app.\r\n     *\r\n     * @param propertyId Property ID of the NFT. This will be provided by the FrontEnd app.\r\n     * @param lifeTokenIssuanceRate_ Issuance rate percentage that is based on mortgage payments maintained by ML.\r\n     */\r\n    function mint(\r\n        uint256 propertyId,\r\n        uint256 lifeTokenIssuanceRate_\r\n    ) external onlyOwner {\r\n        require(address(lifeToken) != address(0), \"Life token is not set\");\r\n        uint256 tokenId = propertyId;\r\n        require(!_exists(tokenId), \"Error: TokenId already minted\");\r\n        _mint(owner(), propertyId);\r\n        lifeTokenIssuanceRate[tokenId] = lifeTokenIssuanceRate_;\r\n    }\r\n\r\n    /**\r\n     * @notice Burn an NFT. Typical use case is remove an property from ML's custody.\r\n     * @dev Can only be executed by the admin/deployer wallet.\r\n     * @param tokenId TokenId of the NFT to be burned.\r\n     */\r\n    function burn(uint256 tokenId) public override onlyOwner {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin wallet to retract a property (NFT) from a customer.\r\n     * @dev Use case is the admin wallet needs to force claim an NFT from a customer.\r\n     * @param tokenId TokenId of the property that needs to be retracted.\r\n     */\r\n    function retract(uint256 tokenId) external onlyOwner {\r\n        _safeTransfer(ownerOf(tokenId), owner(), tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Homeowners or NFT holders to return a property to ML wallet.\r\n     * @dev This will fail if the caller is not the owner of the NFT.\r\n     * @param tokenId TokenId of the NFT to be returned.\r\n     */\r\n    function returnProperty(uint256 tokenId) external {\r\n        require(msg.sender == ownerOf(tokenId), \"Caller is not the owner\");\r\n        safeTransferFrom(msg.sender, owner(), tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Allow homeowners/NFT holders to approve a 3rd party account\r\n     * to perform transactions on their behalf.\r\n     *\r\n     * @dev This works like setApprovalForAll. The owner is giving ownership wo their NFT.\r\n     * Use case of this is an ML customer who would like to give an access to anyone to\r\n     * use the home/property.\r\n     * Requirements in order to make sure this call will succeed:\r\n     * - The property should be fully paid.\r\n     * - Function caller should be the ml admin deployer wallet.\r\n     * - Receiver should be the Marketplace contract address.\r\n     *\r\n     * @param to Wallet address who will be granted with the above permission.\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        require(\r\n            fullyPaid[tokenId] ||\r\n                ownerOf(tokenId) == owner() ||\r\n                to == address(marketplace),\r\n            \"Approval restricted\"\r\n        );\r\n        super.approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer hooks. The functions inside will be executed as soon as the\r\n     * concerned NFT is being trasnferred.\r\n     *\r\n     * @dev Operations inside this hook will be accomplished\r\n     * if either of the checks below were accomplished:\r\n     * - Customers cannot be able to transfer their NFTs if they are not yet fully paid.\r\n     * - Sender is the contract owner.\r\n     * - Receiver is the contract owner.\r\n     * - Caller of thid function is the Marketplace contract address.\r\n     *\r\n     * @param from Sender of the NFT.\r\n     * @param to Receiver of the NFT.\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override {\r\n        require(\r\n            fullyPaid[tokenId] ||\r\n                from == owner() ||\r\n                to == owner() ||\r\n                msg.sender == address(marketplace),\r\n            \"Transfers restricted\"\r\n        );\r\n        if (!fullyPaid[tokenId]) {\r\n            /// @dev If the sender of the NFT is contract owner, staking will be initiated.\r\n            if (from == owner()) {\r\n                lifeToken.initStakingRewards(tokenId);\r\n            }\r\n            /** @dev If the user will return the NFT to the contract owner,\r\n             * all the accumulated staking rewards will be claimed first.\r\n             */\r\n            if (to == owner() && from != address(0)) {\r\n                lifeToken.claimStakingRewards(tokenId);\r\n            }\r\n        }\r\n        emit StakingInitialized(tokenId);\r\n\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(\r\n        uint256 tokenId\r\n    ) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Query the tokenURI of an NFT.\r\n     * @param tokenId TokenId of an NFT to be queried.\r\n     * @return  string - API address of the NFT's metadata\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /***\r\n     * @notice Function to update the token issuance rate of an NFT\r\n     * @dev Issuance rate are being maintained by the ML admins.\r\n     * @param tokenId of an NFT\r\n     * @param newLifeTokenIssuanceRate new issuance rate of the NFT\r\n     */\r\n    function updateLifeTokenIssuanceRate(\r\n        uint256 tokenId,\r\n        uint256 newLifeTokenIssuanceRate\r\n    ) external onlyOwner {\r\n        lifeToken.claimStakingRewards(tokenId);\r\n        lifeTokenIssuanceRate[tokenId] = newLifeTokenIssuanceRate;\r\n        lifeToken.updateStartOfStaking(tokenId, uint64(block.timestamp));\r\n\r\n        emit TokenIssuanceRateUpdated(tokenId, newLifeTokenIssuanceRate);\r\n    }\r\n}\r\n"
    },
    "contracts/Life.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./ManageLife.sol\";\r\nimport \"./MLInvestorsNFT.sol\";\r\n\r\n/**\r\n * @notice An ERC-20 contract for ManageLife.\r\n * Token Symbol: MLIFE ($MLIFE)\r\n * This contract manages token rewards issued to ManageLife homeowners and investors.\r\n * This contract also handles native token functions (EIP20 Token Standard).\r\n *\r\n * @author https://managelife.co\r\n */\r\ncontract Life is ERC20, Ownable, Pausable {\r\n    /**\r\n     * @notice Mapping to get the start of staking for each NFTs.\r\n     * Start of stake data is in UNIX timestamp form.\r\n     */\r\n    mapping(uint256 => uint64) public startOfStakingRewards;\r\n\r\n    /// @notice Maximum token supply\r\n    uint256 public constant MAX_SUPPLY = 5000000000000000000000000000;\r\n\r\n    /// Instance of the MLIFE NFT contract\r\n    ManageLife private _manageLifeToken;\r\n\r\n    /// Instance of the NFTi contract\r\n    ManageLifeInvestorsNFT private _investorsNft;\r\n\r\n    /// Set initial token supply before deploying.\r\n    constructor() ERC20(\"ManageLife Token\", \"MLIFE\") {\r\n        _mint(msg.sender, 2000000000000000000000000000);\r\n    }\r\n\r\n    event StakingClaimed(address indexed claimaint, uint256 tokenId);\r\n    event TokensBurned(address indexed burnFrom, uint256 amount);\r\n\r\n    /// @notice Security feature to Pause smart contracts transactions\r\n    function pause() external whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpausing the Paused transactions feature.\r\n    function unpause() external whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Set the MLIFE's NFT contract address.\r\n     * @dev Important to set this after deployment.\r\n     * @param manageLifeToken_ Address of the MLIFE NFT contract\r\n     */\r\n    function setManageLifeToken(\r\n        address manageLifeToken_\r\n    ) external onlyOwner whenNotPaused {\r\n        _manageLifeToken = ManageLife(manageLifeToken_);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the NFTi contract address.\r\n     * @dev Important to set this after deployment.\r\n     * @param investorsNft_ Contract address of NFTi contract.\r\n     */\r\n    function setNftiToken(\r\n        address investorsNft_\r\n    ) external onlyOwner whenNotPaused {\r\n        _investorsNft = ManageLifeInvestorsNFT(investorsNft_);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the MLIFE's contract address.\r\n     * @dev If set, this will return the MLIFE contract address\r\n     * @return address\r\n     */\r\n    function manageLifeToken() external view returns (address) {\r\n        return address(_manageLifeToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the NFTi's contract address.\r\n     * @dev If set, this will return the NFTi contract address.\r\n     * @return  address\r\n     */\r\n    function manageLifeInvestorsNft() external view returns (address) {\r\n        return address(_investorsNft);\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize the Staking for an NFT.\r\n     *\r\n     * @dev Reverts if the caller is not the MLIFE contract address,\r\n     * MLIFE contact address is not set and if the contract is on-paused status.\r\n     *\r\n     * @param tokenId TokenId of the NFT to start stake.\r\n     */\r\n    function initStakingRewards(uint256 tokenId) external whenNotPaused {\r\n        require(\r\n            address(_manageLifeToken) != address(0),\r\n            \"ManageLife token is not set\"\r\n        );\r\n        // Making sure the one who will trigger this function is only the ManageLife NFT contract.\r\n        require(\r\n            msg.sender == address(_manageLifeToken),\r\n            \"Only ManageLife token\"\r\n        );\r\n        startOfStakingRewards[tokenId] = uint64(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the start of stake of an NFT.\r\n     *\r\n     * @dev Since staking reward is based on time, this function will\r\n     * reset the stake start of an NFT that just recently claimed a token reward.\r\n     * This will be also an on-demand operation where the admins needs to reset\r\n     * the start of stake of an NFT, based off UNIX time.\r\n     *\r\n     * @param tokenId TokenID of an NFT.\r\n     * @param newStartDate New start of stake of an NFT. This param should be based on\r\n     * UNIX timestamp and into uint64 type.\r\n     */\r\n    function updateStartOfStaking(\r\n        uint256 tokenId,\r\n        uint64 newStartDate\r\n    ) external {\r\n        require(\r\n            msg.sender == owner() || msg.sender == address(_manageLifeToken),\r\n            \"Ony admins can execute this operation\"\r\n        );\r\n        startOfStakingRewards[tokenId] = newStartDate;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the claimable $LIFE token of an NFT.\r\n     *\r\n     * @dev MLifeNFT contract is dependent on this function in calculating\r\n     * the estimated staking rewards of an MLifeNFT.\r\n     * Formula in calculating the reward:\r\n     * Rewards = Current timestamp - StartOfStake timestamp * Life token issuance rate.\r\n     *\r\n     * @param tokenId MLifeNFT's tokenId.\r\n     * @return uint256\r\n     */\r\n    function claimableStakingRewards(\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        if (uint64(block.timestamp) < startOfStakingRewards[tokenId]) {\r\n            return 0;\r\n        }\r\n        return\r\n            (uint64(block.timestamp) - startOfStakingRewards[tokenId]) *\r\n            _manageLifeToken.lifeTokenIssuanceRate(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns $MLIFE token from a sender's account. Assuming that sender holds $MLIFE tokens.\r\n     * @param amount Amount to burn.\r\n     */\r\n    function burnLifeTokens(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n        emit TokensBurned(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to mint additional token supply.\r\n     *\r\n     * @dev Newly minted amount will be credited to the contract owner.\r\n     * Prevents minting of new tokens if 5B supply is reached.\r\n     *\r\n     * @param _amount Additional amount to be minted.\r\n     */\r\n    function mint(uint256 _amount) external onlyOwner isMaxSupply(_amount) {\r\n        _mint(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint $MLIFE token rewards for NFTi Investors.\r\n     *\r\n     * @dev MLifeNFTi contract depends on this function to mint $LIFE\r\n     * token rewards to investors. Newly minted tokens here will be\r\n     * credited directly to the investor's wallet address and NOT on the admin wallet.\r\n     * Minting new token supply if 5B LIFE token supply is reached.\r\n     *\r\n     * @param investorAddress Wallet address of the investor.\r\n     * @param _amount Amount to be minted on the investor's address. Amount is based on the\r\n     * calculated staking rewards from MLifeNFTi contract.\r\n     */\r\n    function mintInvestorsRewards(\r\n        address investorAddress,\r\n        uint256 _amount\r\n    ) external isMaxSupply(_amount) {\r\n        _mint(investorAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim $MLIFE token staking rewards.\r\n     *\r\n     * @dev MLifeNFT's rewards issuance is reliant on this function.\r\n     * Once the user claim the rewards, this function will mint the\r\n     * tokens directly on the homeowner's wallet.\r\n     * Notes:\r\n     * - ML's admin or deployer wallet cannot claim $LIFE rewards.\r\n     * - Setting the MLifeNFT contract address is prerequisite in running this function.\r\n     * - This function can only be called by MLifeNFT holders.\r\n     * - A percentage of the token reward will be burned. Percentage will be determined by the ML admin.\r\n     * - Burn call will be handled separately by the frontend app.\r\n     *\r\n     * @param tokenId MLifeNFT's tokenId.\r\n     */\r\n    function claimStakingRewards(uint256 tokenId) public whenNotPaused {\r\n        /*** @notice Variable containers that holds the claimable amounts of the user. */\r\n        uint256 rewards = claimableStakingRewards(tokenId);\r\n\r\n        require(\r\n            address(_manageLifeToken) != address(0),\r\n            \"ManageLife token is not set\"\r\n        );\r\n\r\n        /// @dev Making sure that admin wallet will not own token rewards.\r\n        require(\r\n            _manageLifeToken.ownerOf(tokenId) != owner(),\r\n            \"Platform wallet cannot claim\"\r\n        );\r\n\r\n        /// @dev Making sure that only admin and MLifeNFT owners will claim the rewards.\r\n        require(\r\n            msg.sender == owner() ||\r\n                msg.sender == _manageLifeToken.ownerOf(tokenId) ||\r\n                msg.sender == address(_manageLifeToken),\r\n            \"Unauthorized.\"\r\n        );\r\n\r\n        /// @dev Adding require check to comply with the maximum token supply.\r\n        require(totalSupply() + rewards <= MAX_SUPPLY, \"$LIFE supply is maxed\");\r\n\r\n        /**\r\n         * @dev If the answer on the above questions are true,\r\n         * mint new ERC20 $LIFE tokens. Claimable amount will be minted on the property owner.\r\n         * At the same time, a percentage of the claimed reward will be burned\r\n         * which will be handled separately by the frontend app.\r\n         */\r\n        _mint(_manageLifeToken.ownerOf(tokenId), rewards);\r\n\r\n        /**\r\n         * @dev Resetting the startOfStakingsRewards of the token to make\r\n         * sure their claimable rewards will reset as well.\r\n         */\r\n        startOfStakingRewards[tokenId] = uint64(block.timestamp);\r\n        emit StakingClaimed(msg.sender, rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Custom access modifier to make sure that the caller of transactions are member of ML.\r\n     * @dev This identifies if the caller is an MLifeNFT or MLifeNFTi holder.\r\n     * @param tokenId TokenId of the NFT that needs to be checked.\r\n     */\r\n    modifier onlyMembers(uint256 tokenId) {\r\n        require(\r\n            msg.sender == _manageLifeToken.ownerOf(tokenId) ||\r\n                msg.sender == _investorsNft.ownerOf(tokenId),\r\n            \"Only NFT holders can execute this\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Custom access modifier to make sure minting will not exceed.\r\n     * @dev This makes sure that the $MLIFE max supply is 5B.\r\n     * @param amount new amount to be minted.\r\n     */\r\n    modifier isMaxSupply(uint256 amount) {\r\n        require(totalSupply() + amount <= MAX_SUPPLY, \"$LIFE supply is maxed\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./ManageLife.sol\";\r\n\r\n/**\r\n * @notice Marketplace contract for ManageLife.\r\n * This contract the market trading of NFTs in the ML ecosystem.\r\n * In real life, an NFT here represents a home or real-estate property\r\n * run by ManageLife.\r\n *\r\n * @author https://managelife.co\r\n */\r\ncontract Marketplace is ReentrancyGuard, Pausable, Ownable {\r\n    /// @notice Deployer address will be considered as the ML admins\r\n    constructor() {}\r\n\r\n    /// Percent divider to calculate ML's transaction earnings.\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n\r\n    /** @notice Trading status. This determines if normal users will be\r\n     * allowed to permitted to perform market trading (Bidding, Selling, Buy).\r\n     * By default Admin wallet will perform all these functions on behalf of all customers\r\n     * due to legal requirements.\r\n     * Once legal landscape permits, customers will be able to perform market trading by themselves.\r\n     */\r\n    bool public allowTrading = false;\r\n\r\n    /// instance of the MLRE NFT contract.\r\n    ManageLife public mLife;\r\n\r\n    struct Offer {\r\n        uint256 tokenId;\r\n        address seller;\r\n        uint256 price;\r\n        address offeredTo;\r\n    }\r\n\r\n    struct Bid {\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    /// @notice Default admin fee. 200 initial value is equals to 2%\r\n    uint256 public adminPercent = 200;\r\n\r\n    /// Status for adming pending claimable earnings.\r\n    uint256 public adminPending;\r\n\r\n    /// Mapping of MLRE tokenIds to Offers\r\n    mapping(uint256 => Offer) public offers;\r\n\r\n    /// Mapping of MLRE tokenIds to Bids\r\n    mapping(uint256 => Bid) public bids;\r\n\r\n    event Offered(\r\n        uint256 indexed tokenId,\r\n        uint256 price,\r\n        address indexed toAddress\r\n    );\r\n\r\n    event BidEntered(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed fromAddress\r\n    );\r\n\r\n    event BidCancelled(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed bidder\r\n    );\r\n\r\n    event Bought(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        bool isInstant\r\n    );\r\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value);\r\n    event Cancelled(uint256 indexed tokenId);\r\n    event TradingStatus(bool _isTradingAllowed);\r\n    event Received(address, uint);\r\n\r\n    error InvalidPercent(uint256 _percent, uint256 minimumPercent);\r\n\r\n    /// @notice Security feature to Pause smart contracts transactions\r\n    function pause() external whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpausing the Paused transactions feature.\r\n    function unpause() external whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update the `allowTrading` status to true/false.\r\n     * @dev Can only be executed by contract owner. Will emit TradingStatus event.\r\n     * @param _isTradingAllowed New boolean status to set.\r\n     */\r\n    function setTrading(bool _isTradingAllowed) external onlyOwner {\r\n        allowTrading = _isTradingAllowed;\r\n        emit TradingStatus(_isTradingAllowed);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the MLRE contract.\r\n     * @dev Important to set this after deployment. Only MLRE address is needed.\r\n     * Will not access 0x0 (zero/invalid) address.\r\n     * @param nftAddress Address of MLRE contract.\r\n     */\r\n    function setNftContract(address nftAddress) external onlyOwner {\r\n        require(nftAddress != address(0x0), \"Zero address\");\r\n        mLife = ManageLife(nftAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows admin wallet to set new percentage fee.\r\n     * @dev This throws an error is the new percentage is less than 500.\r\n     * @param _percent New admin percentage.\r\n     */\r\n    function setAdminPercent(uint256 _percent) external onlyOwner {\r\n        if (_percent < 500) {\r\n            revert InvalidPercent({_percent: _percent, minimumPercent: 500});\r\n        }\r\n        adminPercent = _percent;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw marketplace earnings.\r\n     * @dev Can only be triggered by the admin wallet or contract owner.\r\n     * This will transfer the market earnings to the admin wallet.\r\n     */\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        uint256 amount = adminPending;\r\n        adminPending = 0;\r\n        _safeTransferETH(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel the existing sale offer.\r\n     *\r\n     * @dev Once triggered, the offer struct for this tokenId will be destroyed.\r\n     * Can only be called by MLRE holders. The caller of this function should be\r\n     * the owner if the NFT in MLRE contract.\r\n     *\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function cancelForSale(uint256 tokenId) external {\r\n        require(msg.sender == mLife.ownerOf(tokenId), \"Unathorized\");\r\n        delete offers[tokenId];\r\n        emit Cancelled(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Offer a property or NFT for sale in the marketplace.\r\n     * @param tokenId MLRE tokenId to be put on sale.\r\n     * @param minSalePrice Minimum sale price of the property.\r\n     */\r\n    function offerForSale(\r\n        uint256 tokenId,\r\n        uint256 minSalePrice\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == mLife.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        offers[tokenId] = Offer(\r\n            tokenId,\r\n            msg.sender,\r\n            minSalePrice,\r\n            address(0x0)\r\n        );\r\n        emit Offered(tokenId, minSalePrice, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @notice Offer a property for sale to a specific wallet address only.\r\n     * @param tokenId TokenId of the property to be offered.\r\n     * @param minSalePrice Minimum sale prices of the property.\r\n     * @param toAddress Wallet address on where the property will be offered to.\r\n     */\r\n    function offerForSaleToAddress(\r\n        uint256 tokenId,\r\n        uint256 minSalePrice,\r\n        address toAddress\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == mLife.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        offers[tokenId] = Offer(tokenId, msg.sender, minSalePrice, toAddress);\r\n        emit Offered(tokenId, minSalePrice, toAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows users to buy a property that is registered in ML.\r\n     * @dev Anyone (public) can buy an MLRE property.\r\n     * @param tokenId TokenId of the property.\r\n     */\r\n    function buy(\r\n        uint256 tokenId\r\n    ) external payable whenNotPaused isTradingAllowed {\r\n        Offer memory offer = offers[tokenId];\r\n        require(\r\n            offer.offeredTo == address(0x0) || offer.offeredTo == msg.sender,\r\n            \"This offer is not for you\"\r\n        );\r\n\r\n        uint256 amount = msg.value;\r\n        require(amount == offer.price, \"Not enough ether\");\r\n        address seller = offer.seller;\r\n        require(seller != msg.sender, \"Seller == msg.sender\");\r\n\r\n        offers[tokenId] = Offer(tokenId, msg.sender, 0, address(0x0));\r\n\r\n        /// Transfer to msg.sender from seller.\r\n        mLife.transferFrom(seller, msg.sender, tokenId);\r\n\r\n        /// Transfer commission to admin!\r\n        uint256 commission = 0;\r\n        if (adminPercent > 0) {\r\n            commission = (amount * adminPercent) / PERCENTS_DIVIDER;\r\n            adminPending += commission;\r\n        }\r\n\r\n        /// Transfer ETH to seller!\r\n        _safeTransferETH(seller, amount - commission);\r\n\r\n        emit Bought(tokenId, amount, seller, msg.sender, true);\r\n\r\n        /// Refund bid if new owner is buyer\r\n        Bid memory bid = bids[tokenId];\r\n        if (bid.bidder == msg.sender) {\r\n            _safeTransferETH(bid.bidder, bid.value);\r\n            emit BidCancelled(tokenId, bid.value, bid.bidder);\r\n            bids[tokenId] = Bid(address(0x0), 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows users to submit a bid to any offered properties.\r\n     * @dev Anyone in public can submit a bid on a property, either MLRE holder of not.\r\n     * @param tokenId tokenId of the property.\r\n     */\r\n    function placeBid(\r\n        uint256 tokenId\r\n    ) external payable whenNotPaused nonReentrant isTradingAllowed {\r\n        require(msg.value != 0, \"Cannot enter bid of zero\");\r\n        Bid memory existing = bids[tokenId];\r\n        require(msg.value > existing.value, \"Your bid is too low\");\r\n        if (existing.value > 0) {\r\n            /// @dev If there is a new bid on a property and the last one got out bids, that previous one's\r\n            /// Ether sent to the contract will be refunded to their wallet.\r\n            _safeTransferETH(existing.bidder, existing.value);\r\n            emit BidCancelled(tokenId, existing.value, existing.bidder);\r\n        }\r\n        bids[tokenId] = Bid(msg.sender, msg.value);\r\n        emit BidEntered(tokenId, msg.value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows home owners to accept bids submitted on their properties\r\n     * @param tokenId tokenId of the property.\r\n     * @param minPrice Minimum bidding price.\r\n     */\r\n    function acceptBid(\r\n        uint256 tokenId,\r\n        uint256 minPrice\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == mLife.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        address seller = msg.sender;\r\n        Bid memory bid = bids[tokenId];\r\n        uint256 amount = bid.value;\r\n        require(amount != 0, \"Cannot enter bid of zero\");\r\n        require(amount >= minPrice, \"The bid is too low\");\r\n\r\n        address bidder = bid.bidder;\r\n        require(seller != bidder, \"You already own this token\");\r\n\r\n        offers[tokenId] = Offer(tokenId, bidder, 0, address(0x0));\r\n        bids[tokenId] = Bid(address(0x0), 0);\r\n\r\n        /// Transfer MLRE NFT to the Bidder\r\n        mLife.transferFrom(msg.sender, bidder, tokenId);\r\n\r\n        uint256 commission = 0;\r\n        /// Transfer Commission to admin wallet\r\n        if (adminPercent > 0) {\r\n            commission = (amount * adminPercent) / PERCENTS_DIVIDER;\r\n            adminPending += commission;\r\n        }\r\n\r\n        /// Transfer ETH to seller\r\n        _safeTransferETH(seller, amount - commission);\r\n\r\n        emit Bought(tokenId, bid.value, seller, bidder, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows bidders to withdraw their bid on a specific property.\r\n     * @param tokenId tokenId of the property that is currently being bid.\r\n     */\r\n    function withdrawBid(\r\n        uint256 tokenId\r\n    ) external nonReentrant isTradingAllowed {\r\n        Bid memory bid = bids[tokenId];\r\n        require(bid.bidder == msg.sender, \"The Sender is not original bidder\");\r\n        uint256 amount = bid.value;\r\n        emit BidWithdrawn(tokenId, amount);\r\n        bids[tokenId] = Bid(address(0x0), 0);\r\n        _safeTransferETH(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This records the address and ether value that was sent to the Marketplace\r\n     */\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Eth transfer hook\r\n    function _safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make users are not able to perform\r\n     * market tradings on a certain period.\r\n     *\r\n     * @dev `allowTrading` should be set to `true` in order for the users to facilitate the\r\n     * market trading by themselves.\r\n     */\r\n    modifier isTradingAllowed() {\r\n        require(allowTrading, \"Trading is disabled at this moment\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/MLInvestorsNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nimport \"./Life.sol\";\r\n\r\n/**\r\n * @notice ManageLife Investor (ERC-721) contract for ManageLife Investors.\r\n * Owning this NFT represents a investment in ManageLife's properties in real life.\r\n * NFT Symbol: MLifeNFTi\r\n *\r\n * @author https://managelife.co\r\n */\r\ncontract ManageLifeInvestorsNFT is ERC721A, Ownable {\r\n    /// Life token instance\r\n    Life public lifeToken;\r\n\r\n    /// Mapping of NFTi tokenId to their issuance rates\r\n    mapping(uint256 => uint256) public lifeTokenIssuanceRate;\r\n\r\n    /// Mapping of NFTi tokenId to their start of staking\r\n    mapping(uint256 => uint256) public startOfStaking;\r\n\r\n    /// Mapping of NFTi tokenId to their unlock dates\r\n    mapping(uint256 => uint256) public unlockDate;\r\n\r\n    /// @notice Public base URI of ML's NFTs\r\n    string public baseUri = \"https://iweb3api.managelifeapi.co/api/v1/nfts/\";\r\n\r\n    event BaseURIUpdated(string _newURIAddress);\r\n    event StakingClaimed(address indexed claimaint, uint256 tokenId);\r\n    event TokenBurned(address indexed burnFrom, uint256 amount);\r\n\r\n    event TokenIssuanceRateUpdates(\r\n        uint256 indexed tokenId,\r\n        uint256 newLifeTokenIssuanceRate\r\n    );\r\n    event StakingInitiated(uint256 indexed tokenId);\r\n    event BurnedNft(uint256 tokenId);\r\n\r\n    constructor() ERC721A(\"ManageLife Investor\", \"MLifeNFTi\") {}\r\n\r\n    /**\r\n     * @notice Mint new NFTis.\r\n     * @param quantity Number of NFTis to be minted.\r\n     */\r\n    function mint(uint256 quantity) external onlyOwner {\r\n        _safeMint(msg.sender, quantity);\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseUri;\r\n    }\r\n\r\n    /**\r\n     * @notice Function to change the base URI of the NFTs.\r\n     * @dev Giving the ML Admins an options in the future to change the URI of NFTs.\r\n     * @param newBaseUri New URI string.\r\n     */\r\n    function setBaseURI(string memory newBaseUri) external onlyOwner {\r\n        baseUri = newBaseUri;\r\n        emit BaseURIUpdated(newBaseUri);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Life token contract address.\r\n     * @dev Important to set this after deployment in order to build integration with\r\n     * the ERC20 contract.\r\n     * @param lifeToken_ $LIFE token contract address.\r\n     */\r\n    function setLifeToken(address lifeToken_) external onlyOwner {\r\n        lifeToken = Life(lifeToken_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update life token issuance rate of an NFTi.\r\n     *\r\n     * @dev Updated issuance rate will be provided manually by ML admins.\r\n     * If an NFTi has an accumulated rewards already, the reward will be transferred\r\n     * first to the holder before updating the issuance rate.\r\n     *\r\n     * @param tokenId NFTi's tokenId.\r\n     * @param newLifeTokenIssuanceRate New issuance rate as provided by ML admins.\r\n     */\r\n    function updateLifeTokenIssuanceRate(\r\n        uint256 tokenId,\r\n        uint256 newLifeTokenIssuanceRate\r\n    ) external onlyOwner {\r\n        /// Transfer first the exisiting reward to the NFTi holder before rate update takes place.\r\n        lifeToken.mintInvestorsRewards(\r\n            ownerOf(tokenId),\r\n            checkClaimableStakingRewards(tokenId)\r\n        );\r\n\r\n        /// Resetting the start of stake to current time to halt the reward accumulation in the meantime.\r\n        startOfStaking[tokenId] = uint256(block.timestamp);\r\n\r\n        /// Once all rewards has been minted to the owner, reset the lifeTokenIssuance rate\r\n        lifeTokenIssuanceRate[tokenId] = newLifeTokenIssuanceRate;\r\n        emit TokenIssuanceRateUpdates(tokenId, newLifeTokenIssuanceRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize the staking reward for an NFTi.\r\n     *\r\n     * @dev This will be triggered by the transfer hook and requires that\r\n     * the MLifeNTi contract should be set.\r\n     *\r\n     * @param tokenId TokenId of NFTi to be set.\r\n     */\r\n    function initStakingRewards(uint256 tokenId) internal onlyOwner {\r\n        require(\r\n            address(lifeToken) != address(0),\r\n            \"ManageLife Token is not set\"\r\n        );\r\n\r\n        startOfStaking[tokenId] = uint256(block.timestamp);\r\n        emit StakingInitiated(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to issue an NFT to investors for the first time. Should be used by ML admins only.\r\n     *\r\n     * @dev Admins will be able to set an initial issuance rate for the NFT and initiate their staking.\r\n     * If the NFT has already an accumulated rewards, admins will not be able to transfer it to other address.\r\n     * Once this has been issued to an investor, the NFTi will be locked up by default for 1 year. At this period,\r\n     * the NFTi will not be able to be transfer to any contract or wallet address. Lock up period can be updated\r\n     * by admin wallet.\r\n     *\r\n     * @param to Address to issue the NFT\r\n     * @param tokenId TokenId to be issued.\r\n     * @param lifeTokenIssuanceRate_ Token issuance rate. Will be based on ML's mortgrage payment book.\r\n     */\r\n    function issueNftToInvestor(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 lifeTokenIssuanceRate_\r\n    ) external onlyOwner {\r\n        lifeTokenIssuanceRate[tokenId] = lifeTokenIssuanceRate_;\r\n        safeTransferFrom(msg.sender, to, tokenId);\r\n\r\n        /// Setting lock up dates to 365 days (12 months) as default.\r\n        unlockDate[tokenId] = uint256(block.timestamp) + 365 days;\r\n\r\n        /// Initialiaze Staking.\r\n        initStakingRewards(tokenId);\r\n    }\r\n\r\n    /// @notice Function to check the claimable staking reward of an NFT\r\n    function checkClaimableStakingRewards(\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        return\r\n            (uint256(block.timestamp) - startOfStaking[tokenId]) *\r\n            lifeTokenIssuanceRate[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Claim $LIFE token staking rewards.\r\n     *\r\n     * @dev The rewards will be directly minted on the caller address.\r\n     * Once success, the timestamp of startOfStaking for that tokenId will be reset.\r\n     *\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function claimStakingRewards(uint256 tokenId) public onlyInvestor(tokenId) {\r\n        /// Making sure that ML wallet will not claim the reward\r\n        require(\r\n            msg.sender != owner() && msg.sender != lifeToken.owner(),\r\n            \"Platform wallet cannot claim\"\r\n        );\r\n\r\n        uint256 rewards = checkClaimableStakingRewards(tokenId);\r\n\r\n        /// Mint the claimable $LIFE reward to the investor address.\r\n        lifeToken.mintInvestorsRewards(msg.sender, rewards);\r\n\r\n        /// @notice Record new timestamp data to reset the staking rewards data\r\n        startOfStaking[tokenId] = uint256(block.timestamp);\r\n        emit StakingClaimed(msg.sender, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer NFTi function\r\n     * @dev This transfer operation checks for some requirements before it\r\n     * successfully proceed.\r\n     * Requirements:\r\n     * - Sender must be the NFTi owner\r\n     * - NFTi should have no or have finished the locked up period.\r\n     *\r\n     * @param to Receiver of NFTi\r\n     * @param tokenId NFTi tokenId to be sent.\r\n     */\r\n    function transferNft(address to, uint256 tokenId) external {\r\n        require(\r\n            msg.sender == ownerOf(tokenId),\r\n            \"Error: You must be the owner of this NFT\"\r\n        );\r\n\r\n        if (msg.sender == owner()) {\r\n            safeTransferFrom(msg.sender, to, tokenId);\r\n        } else {\r\n            // Before transferring the NFT to new owner, make sure that NFT has finished it's locked up period\r\n            require(\r\n                block.timestamp >= unlockDate[tokenId],\r\n                \"Error: NFT hasn't finished locked up period\"\r\n            );\r\n            /// @dev If the NFT has a pending reward greater than 100 $LIFE tokens, it should be claimed first before transferring\r\n            require(\r\n                checkClaimableStakingRewards(tokenId) > 100,\r\n                \"Has claimable reward\"\r\n            );\r\n\r\n            safeTransferFrom(msg.sender, to, tokenId);\r\n        }\r\n\r\n        /// @dev If the locked up period has been completed, reset the time to unlock of the said NFT to default 365 days\r\n        unlockDate[tokenId] = uint256(block.timestamp) + 365 days;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the NFTi to ML wallet.\r\n     *\r\n     * @dev Use case - The investment period has been completed for a specific NFTi\r\n     * and the asset needs to be returned. The investor should also clear the lockup\r\n     * period of the NFT so that the admins can transfer it to anyone at anytime. In\r\n     * an event that the NFTi has a claimable reward during the execution of this\r\n     * operation, the reward will be transferred first to the investor.\r\n     *\r\n     * @param tokenId NFTi's tokenId.\r\n     */\r\n    function returnNftToML(uint256 tokenId) external onlyInvestor(tokenId) {\r\n        /// If the NFT has a pending reward, it should be claimed first before transferring\r\n        if (checkClaimableStakingRewards(tokenId) >= 0) {\r\n            claimStakingRewards(tokenId);\r\n        }\r\n        /// Resetting the unlock date to remove the lock up period\r\n        unlockDate[tokenId] = uint256(block.timestamp);\r\n        safeTransferFrom(msg.sender, owner(), tokenId);\r\n    }\r\n\r\n    /***\r\n     * @notice Function to update the lockdate of an NFT\r\n     * @param tokenId TokenId of an NFT\r\n     * @param _newLockDate Unix timestamp of the new lock date\r\n     */\r\n    function setLockDate(\r\n        uint256 tokenId,\r\n        uint256 _newLockDate\r\n    ) external onlyOwner {\r\n        unlockDate[tokenId] = _newLockDate;\r\n    }\r\n\r\n    /***\r\n     * @notice Function to burn an NFTi.\r\n     *\r\n     * @dev Use case of this is if the investor failed to return the NFTi to ML for\r\n     * certain period of time and any other circumstances.\r\n     * ML admin will burn the NFTi and replace it in circulation.\r\n     * Another use-case is if the property has exited the ManageLife program.\r\n     *\r\n     * @param tokenId TokenId of an NFT\r\n     */\r\n    function burnNFt(uint256 tokenId) external onlyOwner {\r\n        super._burn(tokenId);\r\n        emit BurnedNft(tokenId);\r\n    }\r\n\r\n    /***\r\n     * @notice Function to brute force retrieving the NFTi from a holder\r\n     *\r\n     * @param tokenId TokenId of an NFT\r\n     *\r\n     * @dev Requirements:\r\n     *  - The holder of an NFT should give an approval for all (setApprovalForAll()) to the\r\n     * NFTi contract owner (ML Admin wallet),\r\n     * in order for the function below to run successfully. This will be implemented on the frontend app.\r\n     */\r\n    function forceClaimNft(uint256 tokenId) external onlyOwner {\r\n        safeTransferFrom(ownerOf(tokenId), msg.sender, tokenId);\r\n    }\r\n\r\n    /// @dev Modifier checks to see if the token holder is an NFTi investor\r\n    modifier onlyInvestor(uint256 tokenId) {\r\n        require(\r\n            msg.sender == ownerOf(tokenId),\r\n            \"Unauthorized. Only for direct NFTi owners.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Hooks that is called whenever there is an NFT transfer transaction\r\n     *\r\n     * @dev If the receiver of the NFTi is not the ML wallet, this hook performs the following:\r\n     * - Checks if the NFTi has finished the locked up period. If not, transfers will not push.\r\n     * - Lastly, locks the NFTi transfer for the next 365 days.\r\n     *\r\n     * @param from Sender of the request.\r\n     * @param to Receiver of the NFTi.\r\n     * @param tokenId TokenID of the NFTi.\r\n     * @param quantity Required param which defaults to 1.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 quantity\r\n    ) internal override {\r\n        if (to != owner()) {\r\n            require(\r\n                unlockDate[tokenId] < uint256(block.timestamp),\r\n                \"NFTi is on lock-up period\"\r\n            );\r\n        }\r\n\r\n        unlockDate[tokenId] = uint256(block.timestamp) + 365 days;\r\n        super._beforeTokenTransfers(from, to, tokenId, quantity);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/NFTiMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./MLInvestorsNFT.sol\";\r\n\r\n/**\r\n * @notice Marketplace contract for MLInvestorsNFT NFTi.\r\n * This contract the market trading of NFTs in the ML ecosystem.\r\n * In real life, an NFT here represents a home or real-estate property\r\n * run by MLInvestorsNFT.\r\n *\r\n * @author https://managelife.co\r\n */\r\ncontract NFTiMarketplace is ReentrancyGuard, Pausable, Ownable {\r\n    /// @notice Deployer address will be considered as the ML admins\r\n    constructor() {}\r\n\r\n    /// Percent divider to calculate ML's transaction earnings.\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n\r\n    /** @notice Trading status. This determines if normal users will be\r\n     * allowed to permitted to perform market trading (Bidding, Selling, Buy).\r\n     * By default Admin wallet will perform all these functions on behalf of all customers\r\n     * due to legal requirements.\r\n     * Once legal landscape permits, customers will be able to perform market trading by themselves.\r\n     */\r\n    bool public allowTrading = false;\r\n\r\n    /// instance of the MLRE NFT contract.\r\n    ManageLifeInvestorsNFT public nfti;\r\n\r\n    struct Offer {\r\n        uint256 tokenId;\r\n        address seller;\r\n        uint256 price;\r\n        address offeredTo;\r\n    }\r\n\r\n    struct Bid {\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    /// @notice Default admin fee. 200 initial value is equals to 2%\r\n    uint256 public adminPercent = 200;\r\n\r\n    /// Status for adming pending claimable earnings.\r\n    uint256 public adminPending;\r\n\r\n    /// Mapping of MLRE tokenIds to Offers\r\n    mapping(uint256 => Offer) public offers;\r\n\r\n    /// Mapping of MLRE tokenIds to Bids\r\n    mapping(uint256 => Bid) public bids;\r\n\r\n    event Offered(\r\n        uint256 indexed tokenId,\r\n        uint256 price,\r\n        address indexed toAddress\r\n    );\r\n\r\n    event BidEntered(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed fromAddress\r\n    );\r\n\r\n    event BidCancelled(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed bidder\r\n    );\r\n\r\n    event Bought(\r\n        uint256 indexed tokenId,\r\n        uint256 value,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        bool isInstant\r\n    );\r\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value);\r\n    event Cancelled(uint256 indexed tokenId);\r\n    event TradingStatus(bool _isTradingAllowed);\r\n    event Received(address, uint);\r\n\r\n    error InvalidPercent(uint256 _percent, uint256 minimumPercent);\r\n\r\n    /// @notice Security feature to Pause smart contracts transactions\r\n    function pause() external whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpausing the Paused transactions feature.\r\n    function unpause() external whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update the `allowTrading` status to true/false.\r\n     * @dev Can only be executed by contract owner. Will emit TradingStatus event.\r\n     * @param _isTradingAllowed New boolean status to set.\r\n     */\r\n    function setTrading(bool _isTradingAllowed) external onlyOwner {\r\n        allowTrading = _isTradingAllowed;\r\n        emit TradingStatus(_isTradingAllowed);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the MLRE contract.\r\n     * @dev Important to set this after deployment. Only MLRE address is needed.\r\n     * Will not access 0x0 (zero/invalid) address.\r\n     * @param nftAddress Address of MLRE contract.\r\n     */\r\n    function setNftContract(address nftAddress) external onlyOwner {\r\n        require(nftAddress != address(0x0), \"Zero address\");\r\n        nfti = ManageLifeInvestorsNFT(nftAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows admin wallet to set new percentage fee.\r\n     * @dev This throws an error is the new percentage is less than 500.\r\n     * @param _percent New admin percentage.\r\n     */\r\n    function setAdminPercent(uint256 _percent) external onlyOwner {\r\n        if (_percent < 500) {\r\n            revert InvalidPercent({_percent: _percent, minimumPercent: 500});\r\n        }\r\n        adminPercent = _percent;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw marketplace earnings.\r\n     * @dev Can only be triggered by the admin wallet or contract owner.\r\n     * This will transfer the market earnings to the admin wallet.\r\n     */\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        uint256 amount = adminPending;\r\n        adminPending = 0;\r\n        _safeTransferETH(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel the existing sale offer.\r\n     *\r\n     * @dev Once triggered, the offer struct for this tokenId will be destroyed.\r\n     * Can only be called by MLRE holders. The caller of this function should be\r\n     * the owner if the NFT in MLRE contract.\r\n     *\r\n     * @param tokenId TokenId of the NFT.\r\n     */\r\n    function cancelForSale(uint256 tokenId) external {\r\n        require(msg.sender == nfti.ownerOf(tokenId), \"Unathorized\");\r\n        delete offers[tokenId];\r\n        emit Cancelled(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Offer a property or NFT for sale in the marketplace.\r\n     * @param tokenId MLRE tokenId to be put on sale.\r\n     * @param minSalePrice Minimum sale price of the property.\r\n     */\r\n    function offerForSale(\r\n        uint256 tokenId,\r\n        uint256 minSalePrice\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == nfti.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        offers[tokenId] = Offer(\r\n            tokenId,\r\n            msg.sender,\r\n            minSalePrice,\r\n            address(0x0)\r\n        );\r\n        emit Offered(tokenId, minSalePrice, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @notice Offer a property for sale to a specific wallet address only.\r\n     * @param tokenId TokenId of the property to be offered.\r\n     * @param minSalePrice Minimum sale prices of the property.\r\n     * @param toAddress Wallet address on where the property will be offered to.\r\n     */\r\n    function offerForSaleToAddress(\r\n        uint256 tokenId,\r\n        uint256 minSalePrice,\r\n        address toAddress\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == nfti.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        offers[tokenId] = Offer(tokenId, msg.sender, minSalePrice, toAddress);\r\n        emit Offered(tokenId, minSalePrice, toAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows users to buy a property that is registered in ML.\r\n     * @dev Anyone (public) can buy an MLRE property.\r\n     * @param tokenId TokenId of the property.\r\n     */\r\n    function buy(\r\n        uint256 tokenId\r\n    ) external payable whenNotPaused isTradingAllowed {\r\n        Offer memory offer = offers[tokenId];\r\n        require(\r\n            offer.offeredTo == address(0x0) || offer.offeredTo == msg.sender,\r\n            \"This offer is not for you\"\r\n        );\r\n\r\n        uint256 amount = msg.value;\r\n        require(amount == offer.price, \"Not enough ether\");\r\n        address seller = offer.seller;\r\n        require(seller != msg.sender, \"Seller == msg.sender\");\r\n\r\n        offers[tokenId] = Offer(tokenId, msg.sender, 0, address(0x0));\r\n\r\n        /// Transfer to msg.sender from seller.\r\n        nfti.transferFrom(seller, msg.sender, tokenId);\r\n\r\n        /// Transfer commission to admin!\r\n        uint256 commission = 0;\r\n        if (adminPercent > 0) {\r\n            commission = (amount * adminPercent) / PERCENTS_DIVIDER;\r\n            adminPending += commission;\r\n        }\r\n\r\n        /// Transfer ETH to seller!\r\n        _safeTransferETH(seller, amount - commission);\r\n\r\n        emit Bought(tokenId, amount, seller, msg.sender, true);\r\n\r\n        /// Refund bid if new owner is buyer\r\n        Bid memory bid = bids[tokenId];\r\n        if (bid.bidder == msg.sender) {\r\n            _safeTransferETH(bid.bidder, bid.value);\r\n            emit BidCancelled(tokenId, bid.value, bid.bidder);\r\n            bids[tokenId] = Bid(address(0x0), 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows users to submit a bid to any offered properties.\r\n     * @dev Anyone in public can submit a bid on a property, either MLRE holder of not.\r\n     * @param tokenId tokenId of the property.\r\n     */\r\n    function placeBid(\r\n        uint256 tokenId\r\n    ) external payable whenNotPaused nonReentrant isTradingAllowed {\r\n        require(msg.value != 0, \"Cannot enter bid of zero\");\r\n        Bid memory existing = bids[tokenId];\r\n        require(msg.value > existing.value, \"Your bid is too low\");\r\n        if (existing.value > 0) {\r\n            /// @dev If there is a new bid on a property and the last one got out bids, that previous one's\r\n            /// Ether sent to the contract will be refunded to their wallet.\r\n            _safeTransferETH(existing.bidder, existing.value);\r\n            emit BidCancelled(tokenId, existing.value, existing.bidder);\r\n        }\r\n        bids[tokenId] = Bid(msg.sender, msg.value);\r\n        emit BidEntered(tokenId, msg.value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows home owners to accept bids submitted on their properties\r\n     * @param tokenId tokenId of the property.\r\n     * @param minPrice Minimum bidding price.\r\n     */\r\n    function acceptBid(\r\n        uint256 tokenId,\r\n        uint256 minPrice\r\n    ) external whenNotPaused isTradingAllowed {\r\n        require(\r\n            msg.sender == nfti.ownerOf(tokenId),\r\n            \"You do not own this MLRE\"\r\n        );\r\n        address seller = msg.sender;\r\n        Bid memory bid = bids[tokenId];\r\n        uint256 amount = bid.value;\r\n        require(amount != 0, \"Cannot enter bid of zero\");\r\n        require(amount >= minPrice, \"The bid is too low\");\r\n\r\n        address bidder = bid.bidder;\r\n        require(seller != bidder, \"You already own this token\");\r\n\r\n        offers[tokenId] = Offer(tokenId, bidder, 0, address(0x0));\r\n        bids[tokenId] = Bid(address(0x0), 0);\r\n\r\n        /// Transfer MLRE NFT to the Bidder\r\n        nfti.transferFrom(msg.sender, bidder, tokenId);\r\n\r\n        uint256 commission = 0;\r\n        /// Transfer Commission to admin wallet\r\n        if (adminPercent > 0) {\r\n            commission = (amount * adminPercent) / PERCENTS_DIVIDER;\r\n            adminPending += commission;\r\n        }\r\n\r\n        /// Transfer ETH to seller\r\n        _safeTransferETH(seller, amount - commission);\r\n\r\n        emit Bought(tokenId, bid.value, seller, bidder, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows bidders to withdraw their bid on a specific property.\r\n     * @param tokenId tokenId of the property that is currently being bid.\r\n     */\r\n    function withdrawBid(\r\n        uint256 tokenId\r\n    ) external nonReentrant isTradingAllowed {\r\n        Bid memory bid = bids[tokenId];\r\n        require(bid.bidder == msg.sender, \"The Sender is not original bidder\");\r\n        uint256 amount = bid.value;\r\n        emit BidWithdrawn(tokenId, amount);\r\n        bids[tokenId] = Bid(address(0x0), 0);\r\n        _safeTransferETH(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This records the address and ether value that was sent to the Marketplace\r\n     */\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev Eth transfer hook\r\n    function _safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make users are not able to perform\r\n     * market tradings on a certain period.\r\n     *\r\n     * @dev `allowTrading` should be set to `true` in order for the users to facilitate the\r\n     * market trading by themselves.\r\n     */\r\n    modifier isTradingAllowed() {\r\n        require(allowTrading, \"Trading is disabled at this moment\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/TokenTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/utils/TokenTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./SafeERC20.sol\";\n\n/**\n * @dev A token holder contract that will allow a beneficiary to extract the\n * tokens after a given release time.\n *\n * Useful for simple vesting schedules like \"advisors get all of their tokens\n * after 1 year\".\n */\ncontract TokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 private immutable _token;\n\n    // beneficiary of tokens after they are released\n    address private immutable _beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 private immutable _releaseTime;\n\n    /**\n     * @dev Deploys a timelock instance that is able to hold the token specified, and will only release it to\n     * `beneficiary_` when {release} is invoked after `releaseTime_`. The release time is specified as a Unix timestamp\n     * (in seconds).\n     */\n    constructor(\n        IERC20 token_,\n        address beneficiary_,\n        uint256 releaseTime_\n    ) {\n        require(releaseTime_ > block.timestamp, \"TokenTimelock: release time is before current time\");\n        _token = token_;\n        _beneficiary = beneficiary_;\n        _releaseTime = releaseTime_;\n    }\n\n    /**\n     * @dev Returns the token being held.\n     */\n    function token() public view virtual returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @dev Returns the beneficiary that will receive the tokens.\n     */\n    function beneficiary() public view virtual returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Returns the time when the tokens are released in seconds since Unix epoch (i.e. Unix timestamp).\n     */\n    function releaseTime() public view virtual returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @dev Transfers tokens held by the timelock to the beneficiary. Will only succeed if invoked after the release\n     * time.\n     */\n    function release() public virtual {\n        require(block.timestamp >= releaseTime(), \"TokenTimelock: current time is before release time\");\n\n        uint256 amount = token().balanceOf(address(this));\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\n\n        token().safeTransfer(beneficiary(), amount);\n    }\n}\n"
    },
    "contracts/ManageLifeTokenVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/TokenTimelock.sol\";\r\n\r\n/***\r\n * @notice Token Vault for ManageLife Token ($MLIFE)\r\n * @author https://managelife.co\r\n */\r\ncontract ManageLifeTokenTimeLock is TokenTimelock {\r\n    constructor(\r\n        IERC20 token,\r\n        address beneficiary,\r\n        uint256 releaseTime\r\n    ) TokenTimelock(token, beneficiary, releaseTime) {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}