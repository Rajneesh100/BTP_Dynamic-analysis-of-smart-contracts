{{
  "language": "Solidity",
  "sources": {
    "FeeConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"SafeERC20.sol\";\nimport \"PrismaOwnable.sol\";\nimport \"SystemStart.sol\";\nimport \"IPriceFeed.sol\";\nimport \"ITroveManager.sol\";\nimport \"IFactory.sol\";\n\ninterface IFeeDistributor {\n    function depositFeeToken(address token, uint256 amount) external returns (bool);\n}\n\ninterface ICryptoSwap {\n    function add_liquidity(\n        uint256[2] memory amounts,\n        uint256 min_mint_amount,\n        bool use_eth,\n        address receiver\n    ) external returns (uint256);\n\n    function price_oracle() external view returns (uint256);\n\n    function price_scale() external view returns (uint256);\n\n    function token() external view returns (address);\n}\n\ncontract AddLiquidityChecker is PrismaOwnable {\n    ICryptoSwap public immutable curvePool;\n\n    uint256 public constant MAX_PCT = 10000;\n\n    // maximum deviation percent between `price_oracle` and `price_scale` when\n    // adding liquidity on `curvePool`. protects against sandwich attacks.\n    uint256 public maxDeviation;\n\n    constructor(address _core, ICryptoSwap _curve, uint256 _maxDeviation) PrismaOwnable(_core) {\n        curvePool = _curve;\n        maxDeviation = _maxDeviation;\n    }\n\n    function setMaxDeviation(uint256 _maxDeviation) public onlyOwner {\n        require(_maxDeviation <= MAX_PCT, \"Invalid maxDeviation\");\n\n        maxDeviation = uint16(_maxDeviation);\n    }\n\n    function canAddLiquidity(address caller, uint256 amountToAdd) external view returns (bool) {\n        uint256 priceOracle = curvePool.price_oracle();\n        uint256 priceScale = curvePool.price_scale();\n\n        if (priceOracle > priceScale) {\n            uint256 delta = priceOracle - priceScale;\n            return (delta * MAX_PCT) / priceOracle < maxDeviation;\n        } else {\n            uint256 delta = priceScale - priceOracle;\n            return (delta * MAX_PCT) / priceScale < maxDeviation;\n        }\n    }\n}\n\ncontract FeeConverter is PrismaOwnable, SystemStart {\n    using SafeERC20 for IERC20;\n\n    IFeeDistributor public immutable feeDistributor;\n    IERC20 public immutable debtToken;\n    IERC20 public immutable prismaToken;\n    IFactory public immutable factory;\n\n    ICryptoSwap public immutable curvePool;\n    IERC20 public immutable curvePoolLp;\n\n    uint256 public constant MAX_PCT = 10000;\n\n    ITroveManager[] public troveManagers;\n\n    AddLiquidityChecker public addLiquidityChecker;\n\n    uint16 public updatedWeek;\n\n    // target percent of liquidity within `curvePool` that the protocol should\n    // own. if the actual owned percent is less than this, a portion of the\n    // week's fees are used to add liquidity.\n    uint16 public targetPOLPct;\n    // percentage of weekly debt amount used to add liquidity, if protocol owned\n    // liquidity is below the target percent.\n    uint16 public weeklyDebtPOLPct;\n\n    // maximum percentage of `debtToken` distrubted in a week, relative to the\n    // amount within the fee receiver.\n    uint16 public maxWeeklyDebtPct;\n    // maximum amount of `debtToken` distributed in a week, as an absolute value.\n    uint88 public maxWeeklyDebtAmount;\n\n    // debt amount allocated to POL that was not added due to unfavorable conditions\n    uint88 public pendingPOLDebtAmount;\n\n    // amount of `debtToken` send to caller each week for processing fees\n    // if no POL is added, only half of this amount is given\n    uint80 public callerIncentive;\n\n    // collateral -> is for sale via `swapCollateralForDebt`?\n    mapping(address collateral => bool isForSale) public isSellingCollateral;\n\n    event WeeklyDebtParamsSet(uint256 maxWeeklyDebtAmount, uint256 maxWeeklyDebtPct);\n    event POLParamsSet(uint256 targetPOLPct, uint256 weeklyDebtPOLPct);\n    event CallerIncentiveSet(uint256 callerIncentive);\n    event AddLiquidityCheckerSet(address addLiquidityChecker);\n    event IsSellingCollateralSet(address[] collaterals, bool isSelling);\n\n    event CollateralSold(\n        address indexed buyer,\n        address indexed collateral,\n        uint256 price,\n        uint256 amountSold,\n        uint256 amountReceived\n    );\n\n    event LiquidityAdded(uint256 priceScale, uint256 debtAmount, uint256 prismaAmount, uint256 lpAmountReceived);\n\n    event TroveManagersSynced();\n    event InterestCollected();\n    event FeeTokenDeposited(uint256 amount);\n    event CallerIncentivePaid(address indexed caller, uint256 amount);\n    event PendingPOLDebtUpdated(uint256 amount);\n\n    struct InitialParams {\n        uint88 maxWeeklyDebtAmount;\n        uint16 maxWeeklyDebtPct;\n        uint16 targetPOLPct;\n        uint16 weeklyDebtPOLPct;\n        uint80 callerIncentive;\n        AddLiquidityChecker addLiquidityChecker;\n        address[] sellCollaterals;\n    }\n\n    constructor(\n        address _prismaCore,\n        address _feeDistributor,\n        IERC20 _debtToken,\n        IERC20 _prismaToken,\n        IFactory _factory,\n        ICryptoSwap _curvePool,\n        InitialParams memory initialParams\n    ) PrismaOwnable(_prismaCore) SystemStart(_prismaCore) {\n        feeDistributor = IFeeDistributor(_feeDistributor);\n        debtToken = _debtToken;\n        prismaToken = _prismaToken;\n        factory = _factory;\n        curvePool = _curvePool;\n        curvePoolLp = IERC20(_curvePool.token());\n\n        _debtToken.approve(_feeDistributor, type(uint256).max);\n        _debtToken.approve(address(_curvePool), type(uint256).max);\n        _prismaToken.approve(address(_curvePool), type(uint256).max);\n\n        setWeeklyDebtParams(initialParams.maxWeeklyDebtAmount, initialParams.maxWeeklyDebtPct);\n        setPOLParams(initialParams.targetPOLPct, initialParams.weeklyDebtPOLPct);\n        setAddLiquidityChecker(initialParams.addLiquidityChecker);\n        setCallerIncentive(initialParams.callerIncentive);\n        setIsSellingCollateral(initialParams.sellCollaterals, true);\n\n        syncTroveManagers();\n    }\n\n    function setWeeklyDebtParams(uint256 _maxWeeklyDebtAmount, uint256 _maxWeeklyDebtPct) public onlyOwner {\n        require(_maxWeeklyDebtPct <= MAX_PCT, \"Invalid maxWeeklyDebtPct\");\n        maxWeeklyDebtAmount = uint88(_maxWeeklyDebtAmount);\n        maxWeeklyDebtPct = uint16(_maxWeeklyDebtPct);\n\n        emit WeeklyDebtParamsSet(_maxWeeklyDebtAmount, _maxWeeklyDebtPct);\n    }\n\n    function setPOLParams(uint256 _targetPOLPct, uint256 _weeklyDebtPOLPct) public onlyOwner {\n        require(_targetPOLPct <= MAX_PCT, \"Invalid targetPOLPct\");\n        require(_weeklyDebtPOLPct <= MAX_PCT, \"Invalid weeklyDebtPOLPct\");\n        targetPOLPct = uint16(_targetPOLPct);\n        weeklyDebtPOLPct = uint16(_weeklyDebtPOLPct);\n\n        emit POLParamsSet(_targetPOLPct, _weeklyDebtPOLPct);\n    }\n\n    function setAddLiquidityChecker(AddLiquidityChecker _checker) public onlyOwner {\n        addLiquidityChecker = _checker;\n\n        emit AddLiquidityCheckerSet(address(_checker));\n    }\n\n    function setCallerIncentive(uint256 _callerIncentive) public onlyOwner {\n        callerIncentive = uint80(_callerIncentive);\n\n        emit CallerIncentiveSet(_callerIncentive);\n    }\n\n    function setIsSellingCollateral(address[] memory collaterals, bool isSelling) public onlyOwner {\n        uint256 length = collaterals.length;\n        if (isSelling) {\n            IPriceFeed feed = IPriceFeed(PRISMA_CORE.priceFeed());\n            for (uint i = 0; i < length; i++) {\n                address collateral = collaterals[i];\n                // fetch price as validation that collateral can be sold\n                feed.fetchPrice(collateral);\n                isSellingCollateral[collateral] = true;\n            }\n        } else {\n            for (uint i = 0; i < length; i++) {\n                isSellingCollateral[collaterals[i]] = false;\n            }\n        }\n\n        emit IsSellingCollateralSet(collaterals, isSelling);\n    }\n\n    /**\n        @notice Swap collateral token for debt\n        @dev Collateral is sold at the oracle price without discount, assuming a\n             debt token value of $1. Swaps become profitable for the caller when\n             the debt token price is under peg. As fees from redemptions are\n             also generated only when the debt price is under peg, it is expected\n             that redeemers will also call this function in the same action.\n     */\n    function swapDebtForColl(address collateral, uint256 debtAmount) external returns (uint256) {\n        require(isSellingCollateral[collateral], \"Collateral sale disabled\");\n        address receiver = PRISMA_CORE.feeReceiver();\n\n        (uint256 collAmount, uint256 price) = getSwapAmountReceived(collateral, debtAmount);\n        debtToken.transferFrom(msg.sender, receiver, debtAmount);\n        IERC20(collateral).safeTransferFrom(receiver, msg.sender, collAmount);\n\n        emit CollateralSold(msg.sender, collateral, price, debtAmount, collAmount);\n        return collAmount;\n    }\n\n    /**\n        @notice Get the amount received when swapping collateral for debt\n        @dev Intended to be called as a view method\n     */\n    function getSwapAmountReceived(\n        address collateral,\n        uint256 debtAmount\n    ) public returns (uint256 collAmount, uint256 price) {\n        IPriceFeed feed = IPriceFeed(PRISMA_CORE.priceFeed());\n        price = feed.fetchPrice(collateral);\n        collAmount = (debtAmount * 1e18) / price;\n        return (collAmount, price);\n    }\n\n    /**\n        @notice Update the local storage array of trove managers\n        @dev Should be called whenever a trove manager is added\n     */\n    function syncTroveManagers() public returns (bool) {\n        uint256 newLength = factory.troveManagerCount();\n\n        for (uint i = troveManagers.length; i < newLength; i++) {\n            ITroveManager troveManager = ITroveManager(factory.troveManagers(i));\n            troveManagers.push(troveManager);\n        }\n\n        emit TroveManagersSynced();\n        return true;\n    }\n\n    /**\n        @notice Collect accrued interest from all trove managers\n        @dev Callable by anyone at any time. Also called within `processWeeklyFees`.\n     */\n    function collectInterests() public returns (bool) {\n        uint256 length = troveManagers.length;\n        for (uint i = 0; i < length; i++) {\n            ITroveManager tm = troveManagers[i];\n            if (tm.interestPayable() > 0) tm.collectInterests();\n        }\n\n        emit InterestCollected();\n        return true;\n    }\n\n    /**\n        @notice Process weekly fees\n        @dev Callable once per week. The caller is incentivized with a fixed\n             amount of debt tokens.\n     */\n    function processWeeklyFees() external returns (bool) {\n        require(getWeek() > updatedWeek, \"Already called this week\");\n        updatedWeek = uint16(getWeek());\n\n        // collect accrued interest this week\n        collectInterests();\n\n        // calculate amount of debtToken to distribute\n        address receiver = PRISMA_CORE.feeReceiver();\n        uint256 amount = debtToken.balanceOf(receiver);\n        amount = (amount * maxWeeklyDebtPct) / MAX_PCT;\n        uint256 maxDebt = maxWeeklyDebtAmount;\n        if (amount > maxDebt) amount = maxDebt;\n        debtToken.transferFrom(receiver, address(this), amount);\n\n        // deduct `callerIncentive` from amount\n        uint256 incentive = callerIncentive;\n        amount -= incentive;\n\n        // add liquidity to `curveLpPool`\n        bool addedLiquidity;\n        uint256 polPct = weeklyDebtPOLPct;\n        if (polPct > 0) {\n            if ((curvePoolLp.balanceOf(receiver) * MAX_PCT) / curvePoolLp.totalSupply() < targetPOLPct) {\n                uint256 polAmount = (amount * polPct) / MAX_PCT;\n                amount -= polAmount;\n                polAmount += pendingPOLDebtAmount;\n\n                if (addLiquidityChecker.canAddLiquidity(msg.sender, polAmount)) {\n                    uint256 added = _addLiquidity(polAmount, receiver);\n                    addedLiquidity = true;\n                    pendingPOLDebtAmount = uint88(polAmount - added);\n                    emit PendingPOLDebtUpdated(polAmount - added);\n                } else {\n                    pendingPOLDebtAmount = uint88(polAmount);\n                    emit PendingPOLDebtUpdated(polAmount);\n                }\n            }\n        }\n\n        // transfer `callerIncentive` to caller - thank you for your service!\n        if (incentive != 0) {\n            if (!addedLiquidity) {\n                incentive /= 2;\n                amount += incentive;\n            }\n            debtToken.transfer(msg.sender, incentive);\n            emit CallerIncentivePaid(msg.sender, incentive);\n        }\n\n        // deposit to `feeDistributor`\n        if (amount > 0) {\n            feeDistributor.depositFeeToken(address(debtToken), amount);\n            emit FeeTokenDeposited(amount);\n        }\n\n        return true;\n    }\n\n    /**\n        @notice Add any pending liquidity\n        @dev Reverts if the liquidity checker disallows\n     */\n    function addPendingLiquidity() external returns (bool) {\n        uint256 amount = pendingPOLDebtAmount;\n        if (amount > 0) {\n            require(addLiquidityChecker.canAddLiquidity(msg.sender, amount), \"Blocked by liquidityChecker\");\n            uint added = _addLiquidity(amount, PRISMA_CORE.feeReceiver());\n            pendingPOLDebtAmount = uint88(amount - added);\n            emit PendingPOLDebtUpdated(amount - added);\n        }\n        return true;\n    }\n\n    function recoverToken(IERC20 token) external onlyOwner returns (bool) {\n        uint256 amount = token.balanceOf(address(this));\n        if (amount > 0) {\n            if (token == debtToken) {\n                // if recovering `debtToken`, need to zero pending POL amount or things break\n                pendingPOLDebtAmount = 0;\n                emit PendingPOLDebtUpdated(0);\n            }\n            token.safeTransfer(PRISMA_CORE.feeReceiver(), amount);\n        }\n        return true;\n    }\n\n    function _addLiquidity(uint256 debtAmount, address receiver) internal returns (uint256) {\n        uint256 priceScale = curvePool.price_scale();\n\n        uint256 prismaAmount = (debtAmount * 1e18) / priceScale;\n        uint256 prismaAvailable = prismaToken.balanceOf(receiver);\n\n        // if insufficient PRISMA is available, adjust the amounts\n        if (prismaAvailable < prismaAmount) {\n            if (prismaAvailable < 1e18) return 0;\n            prismaAmount = prismaAvailable;\n            debtAmount = (prismaAmount * priceScale) / 1e18;\n        }\n\n        prismaToken.transferFrom(receiver, address(this), prismaAmount);\n        uint256 lpAmount = curvePool.add_liquidity([debtAmount, prismaAmount], 0, false, receiver);\n\n        emit LiquidityAdded(priceScale, debtAmount, prismaAmount, lpAmount);\n        return debtAmount;\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"IERC20Permit.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "PrismaOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma Ownable\n    @notice Contracts inheriting `PrismaOwnable` have the same owner as `PrismaCore`.\n            The ownership cannot be independently modified or renounced.\n */\ncontract PrismaOwnable {\n    IPrismaCore public immutable PRISMA_CORE;\n\n    constructor(address _prismaCore) {\n        PRISMA_CORE = IPrismaCore(_prismaCore);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == PRISMA_CORE.owner(), \"Only owner\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return PRISMA_CORE.owner();\n    }\n\n    function guardian() public view returns (address) {\n        return PRISMA_CORE.guardian();\n    }\n}\n"
    },
    "IPrismaCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPrismaCore {\n    event FeeReceiverSet(address feeReceiver);\n    event GuardianSet(address guardian);\n    event NewOwnerAccepted(address oldOwner, address owner);\n    event NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\n    event NewOwnerRevoked(address owner, address revokedOwner);\n    event Paused();\n    event PriceFeedSet(address priceFeed);\n    event Unpaused();\n\n    function acceptTransferOwnership() external;\n\n    function commitTransferOwnership(address newOwner) external;\n\n    function revokeTransferOwnership() external;\n\n    function setFeeReceiver(address _feeReceiver) external;\n\n    function setGuardian(address _guardian) external;\n\n    function setPaused(bool _paused) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\n\n    function feeReceiver() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownershipTransferDeadline() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function pendingOwner() external view returns (address);\n\n    function priceFeed() external view returns (address);\n\n    function startTime() external view returns (uint256);\n}\n"
    },
    "SystemStart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"IPrismaCore.sol\";\n\n/**\n    @title Prisma System Start Time\n    @dev Provides a unified `startTime` and `getWeek`, used for emissions.\n */\ncontract SystemStart {\n    uint256 immutable startTime;\n\n    constructor(address prismaCore) {\n        startTime = IPrismaCore(prismaCore).startTime();\n    }\n\n    function getWeek() public view returns (uint256 week) {\n        return (block.timestamp - startTime) / 1 weeks;\n    }\n}\n"
    },
    "IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPriceFeed {\n    event NewOracleRegistered(address token, address chainlinkAggregator, bool isEthIndexed);\n    event PriceFeedStatusUpdated(address token, address oracle, bool isWorking);\n    event PriceRecordUpdated(address indexed token, uint256 _price);\n\n    function fetchPrice(address _token) external returns (uint256);\n\n    function setOracle(\n        address _token,\n        address _chainlinkOracle,\n        bytes4 sharePriceSignature,\n        uint8 sharePriceDecimals,\n        bool _isEthIndexed\n    ) external;\n\n    function MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND() external view returns (uint256);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function RESPONSE_TIMEOUT() external view returns (uint256);\n\n    function TARGET_DIGITS() external view returns (uint256);\n\n    function guardian() external view returns (address);\n\n    function oracleRecords(\n        address\n    )\n        external\n        view\n        returns (\n            address chainLinkOracle,\n            uint8 decimals,\n            bytes4 sharePriceSignature,\n            uint8 sharePriceDecimals,\n            bool isFeedWorking,\n            bool isEthIndexed\n        );\n\n    function owner() external view returns (address);\n\n    function priceRecords(\n        address\n    ) external view returns (uint96 scaledPrice, uint32 timestamp, uint32 lastUpdated, uint80 roundId);\n}\n"
    },
    "ITroveManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITroveManager {\n    event BaseRateUpdated(uint256 _baseRate);\n    event CollateralSent(address _to, uint256 _amount);\n    event LTermsUpdated(uint256 _L_collateral, uint256 _L_debt);\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\n    event Redemption(\n        uint256 _attemptedDebtAmount,\n        uint256 _actualDebtAmount,\n        uint256 _collateralSent,\n        uint256 _collateralFee\n    );\n    event RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\n    event TotalStakesUpdated(uint256 _newTotalStakes);\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\n    event TroveSnapshotsUpdated(uint256 _L_collateral, uint256 _L_debt);\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 _stake, uint8 _operation);\n\n    function addCollateralSurplus(address borrower, uint256 collSurplus) external;\n\n    function applyPendingRewards(address _borrower) external returns (uint256 coll, uint256 debt);\n\n    function claimCollateral(address _receiver) external;\n\n    function claimReward(address receiver) external returns (uint256);\n\n    function closeTrove(address _borrower, address _receiver, uint256 collAmount, uint256 debtAmount) external;\n\n    function closeTroveByLiquidation(address _borrower) external;\n\n    function collectInterests() external;\n\n    function decayBaseRateAndGetBorrowingFee(uint256 _debt) external returns (uint256);\n\n    function decreaseDebtAndSendCollateral(address account, uint256 debt, uint256 coll) external;\n\n    function fetchPrice() external returns (uint256);\n\n    function finalizeLiquidation(\n        address _liquidator,\n        uint256 _debt,\n        uint256 _coll,\n        uint256 _collSurplus,\n        uint256 _debtGasComp,\n        uint256 _collGasComp\n    ) external;\n\n    function getEntireSystemBalances() external returns (uint256, uint256, uint256);\n\n    function movePendingTroveRewardsToActiveBalances(uint256 _debt, uint256 _collateral) external;\n\n    function notifyRegisteredId(uint256[] calldata _assignedIds) external returns (bool);\n\n    function openTrove(\n        address _borrower,\n        uint256 _collateralAmount,\n        uint256 _compositeDebt,\n        uint256 NICR,\n        address _upperHint,\n        address _lowerHint,\n        bool _isRecoveryMode\n    ) external returns (uint256 stake, uint256 arrayIndex);\n\n    function redeemCollateral(\n        uint256 _debtAmount,\n        address _firstRedemptionHint,\n        address _upperPartialRedemptionHint,\n        address _lowerPartialRedemptionHint,\n        uint256 _partialRedemptionHintNICR,\n        uint256 _maxIterations,\n        uint256 _maxFeePercentage\n    ) external;\n\n    function setAddresses(address _priceFeedAddress, address _sortedTrovesAddress, address _collateralToken) external;\n\n    function setParameters(\n        uint256 _minuteDecayFactor,\n        uint256 _redemptionFeeFloor,\n        uint256 _maxRedemptionFee,\n        uint256 _borrowingFeeFloor,\n        uint256 _maxBorrowingFee,\n        uint256 _interestRateInBPS,\n        uint256 _maxSystemDebt,\n        uint256 _MCR\n    ) external;\n\n    function setPaused(bool _paused) external;\n\n    function setPriceFeed(address _priceFeedAddress) external;\n\n    function startSunset() external;\n\n    function updateBalances() external;\n\n    function updateTroveFromAdjustment(\n        bool _isRecoveryMode,\n        bool _isDebtIncrease,\n        uint256 _debtChange,\n        uint256 _netDebtChange,\n        bool _isCollIncrease,\n        uint256 _collChange,\n        address _upperHint,\n        address _lowerHint,\n        address _borrower,\n        address _receiver\n    ) external returns (uint256, uint256, uint256);\n\n    function vaultClaimReward(address claimant, address) external returns (uint256);\n\n    function BOOTSTRAP_PERIOD() external view returns (uint256);\n\n    function CCR() external view returns (uint256);\n\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\n\n    function DECIMAL_PRECISION() external view returns (uint256);\n\n    function L_collateral() external view returns (uint256);\n\n    function L_debt() external view returns (uint256);\n\n    function MAX_INTEREST_RATE_IN_BPS() external view returns (uint256);\n\n    function MCR() external view returns (uint256);\n\n    function PERCENT_DIVISOR() external view returns (uint256);\n\n    function PRISMA_CORE() external view returns (address);\n\n    function SUNSETTING_INTEREST_RATE() external view returns (uint256);\n\n    function Troves(\n        address\n    )\n        external\n        view\n        returns (\n            uint256 debt,\n            uint256 coll,\n            uint256 stake,\n            uint8 status,\n            uint128 arrayIndex,\n            uint256 activeInterestIndex\n        );\n\n    function accountLatestMint(address) external view returns (uint32 amount, uint32 week, uint32 day);\n\n    function activeInterestIndex() external view returns (uint256);\n\n    function baseRate() external view returns (uint256);\n\n    function borrowerOperationsAddress() external view returns (address);\n\n    function borrowingFeeFloor() external view returns (uint256);\n\n    function claimableReward(address account) external view returns (uint256);\n\n    function collateralToken() external view returns (address);\n\n    function dailyMintReward(uint256) external view returns (uint256);\n\n    function debtToken() external view returns (address);\n\n    function defaultedCollateral() external view returns (uint256);\n\n    function defaultedDebt() external view returns (uint256);\n\n    function emissionId() external view returns (uint16 debt, uint16 minting);\n\n    function getBorrowingFee(uint256 _debt) external view returns (uint256);\n\n    function getBorrowingFeeWithDecay(uint256 _debt) external view returns (uint256);\n\n    function getBorrowingRate() external view returns (uint256);\n\n    function getBorrowingRateWithDecay() external view returns (uint256);\n\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\n\n    function getEntireDebtAndColl(\n        address _borrower\n    ) external view returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollateralReward);\n\n    function getEntireSystemColl() external view returns (uint256);\n\n    function getEntireSystemDebt() external view returns (uint256);\n\n    function getNominalICR(address _borrower) external view returns (uint256);\n\n    function getPendingCollAndDebtRewards(address _borrower) external view returns (uint256, uint256);\n\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint256);\n\n    function getRedemptionRate() external view returns (uint256);\n\n    function getRedemptionRateWithDecay() external view returns (uint256);\n\n    function getTotalActiveCollateral() external view returns (uint256);\n\n    function getTotalActiveDebt() external view returns (uint256);\n\n    function getTotalMints(uint256 week) external view returns (uint32[7] memory);\n\n    function getTroveCollAndDebt(address _borrower) external view returns (uint256 coll, uint256 debt);\n\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\n\n    function getTroveOwnersCount() external view returns (uint256);\n\n    function getTroveStake(address _borrower) external view returns (uint256);\n\n    function getTroveStatus(address _borrower) external view returns (uint256);\n\n    function getWeek() external view returns (uint256 week);\n\n    function getWeekAndDay() external view returns (uint256, uint256);\n\n    function guardian() external view returns (address);\n\n    function hasPendingRewards(address _borrower) external view returns (bool);\n\n    function interestPayable() external view returns (uint256);\n\n    function interestRate() external view returns (uint256);\n\n    function lastActiveIndexUpdate() external view returns (uint256);\n\n    function lastCollateralError_Redistribution() external view returns (uint256);\n\n    function lastDebtError_Redistribution() external view returns (uint256);\n\n    function lastFeeOperationTime() external view returns (uint256);\n\n    function lastUpdate() external view returns (uint32);\n\n    function liquidationManager() external view returns (address);\n\n    function maxBorrowingFee() external view returns (uint256);\n\n    function maxRedemptionFee() external view returns (uint256);\n\n    function maxSystemDebt() external view returns (uint256);\n\n    function minuteDecayFactor() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function paused() external view returns (bool);\n\n    function periodFinish() external view returns (uint32);\n\n    function priceFeed() external view returns (address);\n\n    function redemptionFeeFloor() external view returns (uint256);\n\n    function rewardIntegral() external view returns (uint256);\n\n    function rewardIntegralFor(address) external view returns (uint256);\n\n    function rewardRate() external view returns (uint128);\n\n    function rewardSnapshots(address) external view returns (uint256 collateral, uint256 debt);\n\n    function sortedTroves() external view returns (address);\n\n    function sunsetting() external view returns (bool);\n\n    function surplusBalances(address) external view returns (uint256);\n\n    function systemDeploymentTime() external view returns (uint256);\n\n    function totalCollateralSnapshot() external view returns (uint256);\n\n    function totalStakes() external view returns (uint256);\n\n    function totalStakesSnapshot() external view returns (uint256);\n\n    function vault() external view returns (address);\n}\n"
    },
    "IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface IFactory {\n    // commented values are suggested default parameters\n    struct DeploymentParams {\n        uint256 minuteDecayFactor; // 999037758833783000  (half life of 12 hours)\n        uint256 redemptionFeeFloor; // 1e18 / 1000 * 5  (0.5%)\n        uint256 maxRedemptionFee; // 1e18  (100%)\n        uint256 borrowingFeeFloor; // 1e18 / 1000 * 5  (0.5%)\n        uint256 maxBorrowingFee; // 1e18 / 100 * 5  (5%)\n        uint256 interestRateInBps; // 100 (1%)\n        uint256 maxDebt;\n        uint256 MCR; // 12 * 1e17  (120%)\n    }\n\n    event NewDeployment(address collateral, address priceFeed, address troveManager, address sortedTroves);\n\n    function deployNewInstance(\n        address collateral,\n        address priceFeed,\n        address customTroveManagerImpl,\n        address customSortedTrovesImpl,\n        DeploymentParams calldata params\n    ) external;\n\n    function setImplementations(address _troveManagerImpl, address _sortedTrovesImpl) external;\n\n    function PRISMA_CORE() external view returns (address);\n\n    function borrowerOperations() external view returns (address);\n\n    function debtToken() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function liquidationManager() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function sortedTrovesImpl() external view returns (address);\n\n    function stabilityPool() external view returns (address);\n\n    function troveManagerCount() external view returns (uint256);\n\n    function troveManagerImpl() external view returns (address);\n\n    function troveManagers(uint256) external view returns (address);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "FeeConverter.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}