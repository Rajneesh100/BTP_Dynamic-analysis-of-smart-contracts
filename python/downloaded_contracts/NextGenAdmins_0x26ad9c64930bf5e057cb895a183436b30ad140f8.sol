{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"NextGenAdmins.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n *  @title: NextGen 6529 - Admin Contract\r\n *  @date: 20-December-2023\r\n *  @version: 1.1\r\n *  @author: 6529 team\r\n */\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\ncontract NextGenAdmins is Ownable {\r\n\r\n    // sets global admins\r\n    mapping(address =\u003e bool) public adminPermissions;\r\n\r\n    // sets collection admins\r\n    mapping (address =\u003e mapping (uint256 =\u003e bool)) private collectionAdmin;\r\n\r\n    // sets permission on specific function\r\n    mapping (address =\u003e mapping (bytes4 =\u003e bool)) private functionAdmin;\r\n\r\n    constructor() {\r\n        adminPermissions[msg.sender] = true;\r\n    }\r\n\r\n    // certain functions can only be called by an admin\r\n    modifier AdminRequired {\r\n      require((adminPermissions[msg.sender] == true) || (_msgSender()== owner()), \"Not allowed\");\r\n      _;\r\n    }\r\n\r\n    // function to register a global admin\r\n\r\n    function registerAdmin(address _admin, bool _status) public onlyOwner {\r\n        adminPermissions[_admin] = _status;\r\n    }\r\n\r\n    // function to register function admin\r\n\r\n    function registerFunctionAdmin(address _address, bytes4 _selector, bool _status) public AdminRequired {\r\n        functionAdmin[_address][_selector] = _status;\r\n    }\r\n\r\n    // function to register batch functions admin\r\n\r\n    function registerBatchFunctionAdmin(address _address, bytes4[] memory _selector, bool _status) public AdminRequired {\r\n        for (uint256 i=0; i\u003c_selector.length; i++) {\r\n            functionAdmin[_address][_selector[i]] = _status;\r\n        }\r\n    }\r\n\r\n    // function to register a collection admin\r\n\r\n    function registerCollectionAdmin(uint256 _collectionID, address _address, bool _status) public AdminRequired {\r\n        require(_collectionID \u003e 0, \"Collection Id must be larger than 0\");\r\n        collectionAdmin[_address][_collectionID] = _status;\r\n    }\r\n\r\n    // function to retrieve global admin\r\n\r\n    function retrieveGlobalAdmin(address _address) public view returns(bool) {\r\n        return adminPermissions[_address];\r\n    }\r\n\r\n    // function to retrieve collection admin\r\n\r\n    function retrieveFunctionAdmin(address _address, bytes4 _selector) public view returns(bool) {\r\n        return functionAdmin[_address][_selector];\r\n    }\r\n\r\n    // function to retrieve collection admin\r\n\r\n    function retrieveCollectionAdmin(address _address, uint256 _collectionID) public view returns(bool) {\r\n        return collectionAdmin[_address][_collectionID];\r\n    }\r\n\r\n    // get admin contract status\r\n\r\n    function isAdminContract() external view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}