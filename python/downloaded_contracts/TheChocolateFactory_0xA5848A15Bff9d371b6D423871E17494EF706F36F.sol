{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@boringcrypto/boring-solidity/contracts/BoringBatchable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n// solhint-disable avoid-low-level-calls\r\n\r\nimport \"./libraries/BoringERC20.sol\";\r\n\r\n// T1 - T4: OK\r\ncontract BaseBoringBatchable {\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }    \r\n    \r\n    // F3 - F9: OK\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C1 - C21: OK\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\r\n        // Interactions\r\n        successes = new bool[](calls.length);\r\n        results = new bytes[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    // F1 - F9: OK\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    // C1 - C21: OK\r\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n        // Interactions\r\n        // X1 - X5\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity/contracts/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnable is BoringOwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        \r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary BoringERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"BoringMath: Mul Overflow\");}\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}"
    },
    "contracts/TheChocolateFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\";\nimport \"./lib/SignedSafeMath.sol\";\n\n/*\n\n __    __  ___    __        _   \n/ / /\\ \\ \\/___\\/\\ \\ \\/\\ /\\ /_\\  \n\\ \\/  \\/ //  //  \\/ / //_///_\\\\ \n \\  /\\  / \\_// /\\  / __ \\/  _  \\\n  \\/  \\/\\___/\\_\\ \\/\\/  \\/\\_/ \\_/\n                                \n\n*/\n\ncontract TheChocolateFactory is BoringOwnable, BoringBatchable {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n    using BoringERC20 for IERC20;\n    using SignedSafeMath for int256;\n\n    /// @notice Info of each GFV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of rewards tokens entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    /// @notice Info of each GFV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    /// Also known as the amount of reward tokens to distribute per block.\n    struct PoolInfo {\n        uint128 accRewardTokensPerShare;\n        uint64 lastRewardBlock;\n        uint64 allocPoint;\n    }\n\n    /// @dev Address of Reward Token contract.\n    IERC20 public immutable REWARD_TOKEN;\n\n    /// @notice Info of each GFV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each GFV2 pool.\n    IERC20[] public lpToken;\n    /// @dev List of all added LP tokens.\n    mapping(address => bool) private addedLPs;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n\n    /// @notice rewards tokens created per block.\n    uint256 public rewardTokensPerBlock;\n\n    /// @dev Extra decimals for pool's accTokensPerShare attribute. Needed in order to accomodate different types of LPs.\n    uint256 private constant ACC_TOKEN_PRECISION = 1e18;\n\n    /// @dev nonReentrant flag used to secure functions with external calls.\n    bool private nonReentrant;\n\n    event Deposit(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Withdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount,\n        address indexed to\n    );\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event LogPoolAddition(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IERC20 indexed lpToken\n    );\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n    event LogUpdatePool(\n        uint256 indexed pid,\n        uint64 lastRewardBlock,\n        uint256 lpSupply,\n        uint256 accRewardTokensPerShare\n    );\n    event SetRewardTokensPerBlock(\n        uint256 rewardTokensPerBlock,\n        bool withUpdate\n    );\n\n    /// @param _rewardToken The reward token contract address.\n    /// @param _rewardTokensPerBlock reward tokens created per block.\n    constructor(IERC20 _rewardToken, uint256 _rewardTokensPerBlock) public {\n        REWARD_TOKEN = _rewardToken;\n        rewardTokensPerBlock = _rewardTokensPerBlock;\n        totalAllocPoint = 0;\n    }\n\n    /// @notice Update number of reward tokens created per block. Can only be called by the owner.\n    /// @param _rewardTokensPerBlock reward tokens created per block.\n    /// @param _withUpdate true if massUpdatePools should be triggered as well.\n    function setRewardTokensPerBlock(\n        uint256 _rewardTokensPerBlock,\n        bool _withUpdate\n    ) external onlyOwner {\n        if (_withUpdate) {\n            massUpdateAllPools();\n        }\n        rewardTokensPerBlock = _rewardTokensPerBlock;\n        emit SetRewardTokensPerBlock(_rewardTokensPerBlock, _withUpdate);\n    }\n\n    /// @notice Set the nonReentrant flag. Could be used to pause/resume the farm operations. Can only be called by the owner.\n    /// @param _val nonReentrant flag value to be set.\n    function setNonReentrant(bool _val) external onlyOwner returns (bool) {\n        nonReentrant = _val;\n        return nonReentrant;\n    }\n\n    /// @notice Returns the number of GFV2 pools.\n    function poolLength() external view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @notice Returns the reward value for a specific pool.\n    function poolReward(uint256 _pid) external view returns (uint256) {\n        if (totalAllocPoint == 0) return 0;\n        return\n            rewardTokensPerBlock.mul(poolInfo[_pid].allocPoint) /\n            totalAllocPoint;\n    }\n\n    /// @notice Returns the total number of LPs staked in the farm.\n    function getLPSupply(uint256 _pid) public view returns (uint256) {\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n        return lpSupply;\n    }\n\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param allocPoint AP of the new pool.\n    /// @param _lpToken Address of the LP ERC-20 token.\n    function add(uint256 allocPoint, IERC20 _lpToken) external onlyOwner {\n        require(\n            !addedLPs[address(_lpToken)],\n            \"genericFarmV2::there is already a pool with this LP\"\n        );\n        uint256 lastRewardBlock = block.number;\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\n        lpToken.push(_lpToken);\n        addedLPs[address(_lpToken)] = true;\n\n        poolInfo.push(\n            PoolInfo({\n                allocPoint: allocPoint.to64(),\n                lastRewardBlock: lastRewardBlock.to64(),\n                accRewardTokensPerShare: 0\n            })\n        );\n        emit LogPoolAddition(lpToken.length.sub(1), allocPoint, _lpToken);\n    }\n\n    /// @notice Update the given pool's reward tokens allocation point. Can only be called by the owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New AP of the pool.\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint.to64();\n        emit LogSetPool(_pid, _allocPoint);\n    }\n\n    /// @notice View function to see pending rewards on frontend.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending reward for a given user.\n    function pendingReward(\n        uint256 _pid,\n        address _user\n    ) public view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardTokensPerShare = pool.accRewardTokensPerShare;\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n        if (\n            block.number > pool.lastRewardBlock &&\n            lpSupply > 0 &&\n            totalAllocPoint > 0\n        ) {\n            uint256 blocks = block.number.sub(pool.lastRewardBlock);\n            accRewardTokensPerShare = accRewardTokensPerShare.add(\n                (blocks.mul(rewardTokensPerBlock).mul(pool.allocPoint).mul(\n                    ACC_TOKEN_PRECISION\n                ) / totalAllocPoint) / lpSupply\n            );\n        }\n        pending = int256(\n            user.amount.mul(accRewardTokensPerShare) / ACC_TOKEN_PRECISION\n        ).sub(user.rewardDebt).toUInt256();\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    function massUpdateAllPools() public {\n        uint256 len = poolInfo.length;\n        for (uint256 pid = 0; pid < len; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    /// @notice Update reward variables for specified pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        if (block.number > pool.lastRewardBlock) {\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n            if (lpSupply > 0 && totalAllocPoint > 0) {\n                uint256 blocks = block.number.sub(pool.lastRewardBlock);\n                pool.accRewardTokensPerShare = pool.accRewardTokensPerShare.add(\n                    ((blocks.mul(rewardTokensPerBlock).mul(pool.allocPoint).mul(\n                        ACC_TOKEN_PRECISION\n                    ) / totalAllocPoint) / lpSupply).to128()\n                );\n            }\n            pool.lastRewardBlock = block.number.to64();\n            poolInfo[pid] = pool;\n            emit LogUpdatePool(\n                pid,\n                pool.lastRewardBlock,\n                lpSupply,\n                pool.accRewardTokensPerShare\n            );\n        }\n    }\n\n    /// @notice Deposit LP tokens to GFV2 for rewards allocation.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to deposit.\n    /// @param to The receiver of `amount` deposit benefit.\n    function deposit(uint256 pid, uint256 amount, address to) external {\n        require(!nonReentrant, \"genericFarmV2::nonReentrant - try again\");\n        nonReentrant = true;\n\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][to];\n\n        // Effects\n        user.amount = user.amount.add(amount);\n        user.rewardDebt = user.rewardDebt.add(\n            int256(\n                amount.mul(pool.accRewardTokensPerShare) / ACC_TOKEN_PRECISION\n            )\n        );\n\n        // Interactions\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, pid, amount, to);\n        nonReentrant = false;\n    }\n\n    /// @notice Withdraw LP tokens from GFV2.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens.\n    function withdraw(uint256 pid, uint256 amount, address to) external {\n        require(!nonReentrant, \"genericFarmV2::nonReentrant - try again\");\n        nonReentrant = true;\n\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        // Effects\n        user.rewardDebt = user.rewardDebt.sub(\n            int256(\n                amount.mul(pool.accRewardTokensPerShare) / ACC_TOKEN_PRECISION\n            )\n        );\n        user.amount = user.amount.sub(amount);\n\n        // Interactions\n        lpToken[pid].safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, pid, amount, to);\n        nonReentrant = false;\n    }\n\n    /// @notice Harvest proceeds for transaction sender to `to`.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of the rewards.\n    function harvest(uint256 pid, address to) public {\n        require(!nonReentrant, \"genericFarmV2::nonReentrant - try again\");\n        nonReentrant = true;\n\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n        int256 accumulatedRewardTokens = int256(\n            user.amount.mul(pool.accRewardTokensPerShare) / ACC_TOKEN_PRECISION\n        );\n        uint256 _pendingRewardTokens = accumulatedRewardTokens\n            .sub(user.rewardDebt)\n            .toUInt256();\n\n        // Effects\n        user.rewardDebt = accumulatedRewardTokens;\n\n        // Interactions\n        if (_pendingRewardTokens > 0) {\n            REWARD_TOKEN.safeTransfer(to, _pendingRewardTokens);\n        }\n\n        emit Harvest(msg.sender, pid, _pendingRewardTokens);\n        nonReentrant = false;\n    }\n\n    function harvestAll(address to) external {\n        uint256 len = poolInfo.length;\n        for (uint256 pid; pid < len; pid++) {\n            harvest(pid, to);\n        }\n    }\n\n    function getAllPendingRewards(address to)\n        external view\n        returns (uint256 _totalRewards)\n    {\n\n        uint256 len = poolInfo.length;\n        for (uint256 pid; pid < len; pid++) {\n\n            _totalRewards += pendingReward(pid, to);\n\n        }\n\n    }\n\n    function balanceOf(uint256 pid, address user)\n        external view\n        returns (uint256 _balance)\n    {\n\n        _balance = userInfo[pid][user].amount;\n\n    }\n\n    function poolShare(uint256 pid, address user)\n        external view\n        returns (uint256 _share)\n    {\n\n        uint256 _totalSupply = getLPSupply(pid);\n        uint256 _balance = userInfo[pid][user].amount;\n\n        if (_totalSupply > 0)\n        _share = (_balance.mul(1e18) / _totalSupply) * 100;\n        else\n        _share = 0;\n    }\n\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of the LP tokens.\n    function emergencyWithdraw(uint256 pid, address to) public {\n        require(\n            address(0) != to,\n            \"genericFarmV2::can't withdraw to address zero\"\n        );\n        UserInfo storage user = userInfo[pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[pid].safeTransfer(to, amount);\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\n    }\n}\n"
    },
    "contracts/lib/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function toUInt256(int256 a) internal pure returns (uint256) {\n        require(a >= 0, \"Integer < 0\");\n        return uint256(a);\n    }\n}"
    }
  }
}}