{"Free32.sol":{"content":"// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$   /$$$$$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$ /$$__  $$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$|__/  \\ $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$            /$$$$$/  /$$$$$$/\n| $$__/   | $$__  $$| $$__/   | $$__/           |___  $$ /$$____/\n| $$      | $$  \\ $$| $$      | $$             /$$  \\ $$| $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      |  $$$$$$/| $$$$$$$$\n|__/      |__/  |__/|________/|________/       \\______/ |________/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\n\ninterface OffOn {\n  function latestHash() external view returns (uint256);\n}\n\ninterface Free19 {\n  function claimer() external view returns (address);\n}\n\ninterface IFree30 {\n  function free30Claimer() external view returns (address);\n}\n\ninterface FastCashMoneyPlus {\n  function balanceOf(address owner) external view returns (uint256 balance);\n}\n\ncontract Free32 is FreeChecker {\n  OffOn public offon = OffOn(0xA860D381A193A0811C77c8FCD881B3E9F245A419);\n  Free19 public free19 = Free19(0xaBCeF3a4aDC27A6c962b4fC17181F47E62244EF0);\n  FastCashMoneyPlus public fastcash = FastCashMoneyPlus(0xcA5228D1fe52D22db85E02CA305cddD9E573D752);\n\n\n  function percentBpsRequired() public view returns (uint256) {\n    bool turnedOff = offon.latestHash() == 0;\n    uint256 free3Supply = free.collectionSupply(3);\n    uint256 free20Supply = free.collectionSupply(20);\n    address free30Addr = free.collectionIdToMinter(30);\n    address free30Claimer = IFree30(free30Addr).free30Claimer();\n\n    uint256 free20Bps = free20Supply * 8;\n\n    uint256 free3NegBps = free3Supply \u003e free20Bps + 50\n      ? free20Bps + 50\n      : free3Supply;\n\n    return 50\n      + (turnedOff ? 0 : 50)\n      + (free19.claimer() == address(this) ? 0 : 25)\n      + (free30Claimer == address(this) ? 0 : 25)\n      + (fastcash.balanceOf(0x56FF4F826795f2dE13A89F60ea7B1cF14c714252) / 15 ether)\n      + free20Bps\n      - free3NegBps;\n  }\n\n  function freesRequired() public view returns (uint256) {\n    uint256 totalFreeSupply = free.totalSupply();\n    return totalFreeSupply * percentBpsRequired() / 10000;\n  }\n\n  function claim(uint256 free0TokenId) external {\n    preCheck(free0TokenId, \u002732\u0027);\n\n    uint256 senderFreeBalance = free.balanceOf(msg.sender);\n\n    require(senderFreeBalance \u003e= freesRequired());\n\n    postCheck(free0TokenId, 32, \u002732\u0027);\n  }\n\n}"},"FreeChecker.sol":{"content":"\n// SPDX-License-Identifier: CC0\n\n\n/*\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\ninterface IFree {\n  function totalSupply() external  view returns (uint256);\n  function balanceOf(address) external  view returns (uint256);\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external view returns (uint256 collectionId);\n  function collectionSupply(uint256 collectionId) external view returns (uint256);\n  function collectionIdToMinter(uint256 collectionId) external view returns (address);\n  function mint(uint256 collectionId, address to) external;\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\nabstract contract FreeChecker {\n  mapping(uint256 =\u003e bool) public free0TokenIdUsed;\n  IFree public immutable free = IFree(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function preCheck(uint256 free0TokenId, string memory freeStr) internal view {\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, \u0027Invalid Free0\u0027);\n    require(!free0TokenIdUsed[free0TokenId],\n      string(abi.encodePacked(\u0027This Free0 has already been used to mint a Free\u0027, freeStr))\n    );\n    require(free.ownerOf(free0TokenId) == msg.sender, \u0027You must be the owner of this Free0\u0027);\n\n  }\n\n  function postCheck(uint256 free0TokenId, uint256 freeNumber, string memory freeStr) internal {\n    free0TokenIdUsed[free0TokenId] = true;\n    free.appendAttributeToToken(free0TokenId,\n      string(abi.encodePacked(\u0027Used For Free\u0027, freeStr, \u0027 Mint\u0027)),\n      \u0027true\u0027\n    );\n    free.mint(freeNumber, msg.sender);\n  }\n\n  function checkFreeToken(uint256 freeTokenId, uint256 collectionId) internal view {\n    require(free.ownerOf(freeTokenId) == msg.sender, \u0027Not owner of token\u0027);\n    require(free.tokenIdToCollectionId(freeTokenId) == collectionId, \u0027Token collection mismatch\u0027);\n  }\n}"}}