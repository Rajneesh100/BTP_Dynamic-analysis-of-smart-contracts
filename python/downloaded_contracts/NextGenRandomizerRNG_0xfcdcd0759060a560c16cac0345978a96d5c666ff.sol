{"ArrngConsumer.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n * @title ArrngConsumer.sol. Use arrng\r\n *\r\n * @author arrng https://arrng.io/\r\n *\r\n */\r\n\r\nimport {IArrngConsumer} from \"./IArrngConsumer.sol\";\r\nimport {IArrngController} from \"./IArrngController.sol\";\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract ArrngConsumer is IArrngConsumer {\r\n  IArrngController public immutable arrngController;\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(address arrngController_) {\r\n    arrngController = IArrngController(arrngController_);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev fulfillRandomWords: Do something with the randomness\r\n   *\r\n   * @param requestId: unique ID for this request\r\n   * @param randomWords: array of random integers requested\r\n   *\r\n   */\r\n  function fulfillRandomWords(\r\n    uint256 requestId,\r\n    uint256[] memory randomWords\r\n  ) internal virtual;\r\n\r\n  /**\r\n   *\r\n   * @dev receiveRandomness: receive RNG\r\n   *\r\n   * @param arrngRequestId_: unique ID for this request\r\n   * @param randomNumbers_: array of random integers requested\r\n   *\r\n   */\r\n  function receiveRandomness(\r\n    uint256 arrngRequestId_,\r\n    uint256[] calldata randomNumbers_\r\n  ) external payable {\r\n    require(msg.sender == address(arrngController), \"arrng controller only\");\r\n    fulfillRandomWords(arrngRequestId_, randomNumbers_);\r\n  }\r\n}"},"IArrngConsumer.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n * @title IArrngConsumer.sol. Use arrng\r\n *\r\n * @author arrng https://arrng.io/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IArrngConsumer {\r\n  /**\r\n   *\r\n   * @dev receiveRandomness: receive randomness\r\n   *\r\n   * @param arrngRequestId_: unique ID for this request\r\n   * @param randomNumbers_: array of random integers requested\r\n   *\r\n   */\r\n  function receiveRandomness(\r\n    uint256 arrngRequestId_,\r\n    uint256[] calldata randomNumbers_\r\n  ) external payable;\r\n}"},"IArrngController.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n * @title IArrngController.sol. Interface for the arrngController.\r\n *\r\n * @author arrng https://arrng.io/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IArrngController {\r\n  event ENSReverseRegistrarSet(address newENSReverseRegistrar);\r\n  event ENSNameSet(string ensName, bytes32 ensNameHash);\r\n  event MinimumNativeTokenSet(uint256 minimumNativeToken);\r\n  event MaximumNumberOfNumbersSet(uint256 newNumberLimited);\r\n  event OracleAddressSet(address oracle);\r\n  event TreasuryAddressSet(address treasury);\r\n  event ArrngRequest(\r\n    address indexed caller,\r\n    uint64 indexed requestId,\r\n    uint32 method,\r\n    uint64 numberOfNumbers,\r\n    uint64 minValue,\r\n    uint64 maxvalue,\r\n    uint64 ethValue,\r\n    address refundAddress\r\n  );\r\n  event ArrngResponse(bytes32 requestTxnHash);\r\n  event ArrngServed(\r\n    uint128 indexed requestId,\r\n    uint128 feeCharged,\r\n    uint256[] randomNumbers,\r\n    string apiResponse,\r\n    string apiSignature\r\n  );\r\n  event ArrngRefundInsufficientTokenForGas(\r\n    address indexed caller,\r\n    uint256 requestId\r\n  );\r\n\r\n  /**\r\n   * -------------------------------------------------------------\r\n   * @dev ADMINISTRATION\r\n   * -------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @dev setENSReverseRegistrar: set the ENS register address\r\n   *\r\n   * @param ensRegistrar_: ENS Reverse Registrar address\r\n   *\r\n   */\r\n  function setENSReverseRegistrar(address ensRegistrar_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev setENSName: used to set reverse record so interactions with this contract\r\n   * are easy to identify\r\n   *\r\n   * @param ensName_: string ENS name\r\n   *\r\n   */\r\n  function setENSName(string memory ensName_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev setMinimumNativeToken: set a new value of required native token for gas\r\n   *\r\n   * @param minNativeToken_: the new minimum native token per call\r\n   *\r\n   */\r\n  function setMinimumNativeToken(uint176 minNativeToken_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev setMaximumNumberOfNumbers: set a new max number of numbers\r\n   *\r\n   * @param maxNumbersPerTxn_: the new max requested numbers\r\n   *\r\n   */\r\n  function setMaximumNumberOfNumbers(uint16 maxNumbersPerTxn_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev setOracleAddress: set a new oracle address\r\n   *\r\n   * @param oracle_: the new oracle address\r\n   *\r\n   */\r\n  function setOracleAddress(address payable oracle_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev setTreasuryAddress: set a new treasury address\r\n   *\r\n   * @param treasury_: the new treasury address\r\n   *\r\n   */\r\n  function setTreasuryAddress(address payable treasury_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev withdrawNativeToken: pull native token to the treasuryAddress\r\n   *\r\n   * @param amount_: amount to withdraw\r\n   *\r\n   */\r\n  function withdrawNativeToken(uint256 amount_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev withdrawERC20: pull ERC20 tokens to the treasuryAddress\r\n   *\r\n   * @param erc20Address_: the contract address for the token\r\n   * @param amount_: amount to withdraw\r\n   *\r\n   */\r\n  function withdrawERC20(address erc20Address_, uint256 amount_) external;\r\n\r\n  /**\r\n   *\r\n   * @dev withdrawERC721: Pull ERC721s (likely only the ENS\r\n   * associated with this contract) to the treasuryAddress.\r\n   *\r\n   * @param erc721Address_: The token contract for the withdrawal\r\n   * @param tokenIDs_: the list of tokenIDs for the withdrawal\r\n   *\r\n   */\r\n  function withdrawERC721(\r\n    address erc721Address_,\r\n    uint256[] memory tokenIDs_\r\n  ) external;\r\n\r\n  /**\r\n   * -------------------------------------------------------------\r\n   * @dev PROCESS REQUESTS\r\n   * -------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @dev requestRandomWords: request 1 to n uint256 integers\r\n   * requestRandomWords is overloaded. In this instance you can\r\n   * call it without explicitly declaring a refund address, with the\r\n   * refund being paid to the tx.origin for this call.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n  function requestRandomWords(\r\n    uint256 numberOfNumbers_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev requestRandomWords: request 1 to n uint256 integers\r\n   * requestRandomWords is overloaded. In this instance you must\r\n   * specify the refund address for unused native token.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   * @param refundAddress_: the address for refund of native token\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n  function requestRandomWords(\r\n    uint256 numberOfNumbers_,\r\n    address refundAddress_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev requestRandomNumbersInRange: request 1 to n integers within\r\n   * a given range (e.g. 1 to 10,000)\r\n   * requestRandomNumbersInRange is overloaded. In this instance you can\r\n   * call it without explicitly declaring a refund address, with the\r\n   * refund being paid to the tx.origin for this call.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   * @param minValue_: the min of the range\r\n   * @param maxValue_: the max of the range\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n  function requestRandomNumbersInRange(\r\n    uint256 numberOfNumbers_,\r\n    uint256 minValue_,\r\n    uint256 maxValue_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev requestRandomNumbersInRange: request 1 to n integers within\r\n   * a given range (e.g. 1 to 10,000)\r\n   * requestRandomNumbersInRange is overloaded. In this instance you must\r\n   * specify the refund address for unused native token.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   * @param minValue_: the min of the range\r\n   * @param maxValue_: the max of the range\r\n   * @param refundAddress_: the address for refund of native token\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n\r\n  function requestRandomNumbersInRange(\r\n    uint256 numberOfNumbers_,\r\n    uint256 minValue_,\r\n    uint256 maxValue_,\r\n    address refundAddress_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev requestWithMethod: public method to allow calls specifying the\r\n   * arrng method, allowing functionality to be extensible without\r\n   * requiring a new controller contract.\r\n   * requestWithMethod is overloaded. In this instance you can\r\n   * call it without explicitly declaring a refund address, with the\r\n   * refund being paid to the tx.origin for this call.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   * @param minValue_: the min of the range\r\n   * @param maxValue_: the max of the range\r\n   * @param method_: the arrng method to call\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n  function requestWithMethod(\r\n    uint256 numberOfNumbers_,\r\n    uint256 minValue_,\r\n    uint256 maxValue_,\r\n    uint32 method_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev requestWithMethod: public method to allow calls specifying the\r\n   * arrng method, allowing functionality to be extensible without\r\n   * requiring a new controller contract.\r\n   * requestWithMethod is overloaded. In this instance you must\r\n   * specify the refund address for unused native token.\r\n   *\r\n   * @param numberOfNumbers_: the amount of numbers to request\r\n   * @param minValue_: the min of the range\r\n   * @param maxValue_: the max of the range\r\n   * @param refundAddress_: the address for refund of native token\r\n   * @param method_: the arrng method to call\r\n   *\r\n   * @return uniqueID_ : unique ID for this request\r\n   */\r\n  function requestWithMethod(\r\n    uint256 numberOfNumbers_,\r\n    uint256 minValue_,\r\n    uint256 maxValue_,\r\n    address refundAddress_,\r\n    uint32 method_\r\n  ) external payable returns (uint256 uniqueID_);\r\n\r\n  /**\r\n   *\r\n   * @dev serveRandomness: serve result of the call\r\n   *\r\n   * @param arrngRequestId_: unique request ID\r\n   * @param callingAddress_: the contract to call\r\n   * @param requestTxnHash_: the txn hash of the original request\r\n   * @param responseCode_: 0 is success, !0 = failure\r\n   * @param randomNumbers_: the array of random integers\r\n   * @param refundAddress_: the address for refund of native token not used for gas\r\n   * @param apiResponse_: the response from the off-chain rng provider\r\n   * @param apiSignature_: signature for the rng response\r\n   * @param feeCharged_: the fee for this rng\r\n   *\r\n   */\r\n  function serveRandomness(\r\n    uint256 arrngRequestId_,\r\n    address callingAddress_,\r\n    bytes32 requestTxnHash_,\r\n    uint256 responseCode_,\r\n    uint256[] calldata randomNumbers_,\r\n    address refundAddress_,\r\n    string calldata apiResponse_,\r\n    string calldata apiSignature_,\r\n    uint256 feeCharged_\r\n  ) external payable;\r\n}"},"INextGenAdmins.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface INextGenAdmins {\r\n\r\n    // retrieve global admin\r\n    function retrieveGlobalAdmin(address _address) external view returns(bool);\r\n\r\n    // retrieve function admin\r\n    function retrieveFunctionAdmin(address _address, bytes4 _selector) external view returns(bool);\r\n\r\n    // retrieve collection admin\r\n    function retrieveCollectionAdmin(address _address, uint256 _collectionID) external view returns(bool);\r\n\r\n    // retrieve if the contract is admin contract\r\n    function isAdminContract() external view returns (bool);\r\n\r\n    // retrieve owner\r\n    function owner() external view returns (address);\r\n\r\n}"},"INextGenCore.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface INextGenCore {\r\n\r\n    function retrievewereDataAdded(uint256 _collectionID) external view returns(bool);\r\n\r\n    function viewTokensIndexMin(uint256 _collectionID) external view returns (uint256);\r\n\r\n    function viewTokensIndexMax(uint256 _collectionID) external view returns (uint256);\r\n\r\n    function viewCirSupply(uint256 _collectionID) external view returns (uint256);\r\n\r\n    function airDropTokens(uint256 mintIndex, address _recipient, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID) external;\r\n\r\n    function mint(uint256 mintIndex, address _mintingAddress , address _mintTo, string memory _tokenData, uint256 _saltfun_o, uint256 _collectionID, uint256 phase) external;\r\n\r\n    function collectionFreezeStatus(uint256 _collectionID) external view returns(bool);\r\n\r\n    function viewMaxAllowance(uint256 _collectionID) external view returns (uint256);\r\n\r\n    function retrieveTokensMintedALPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\r\n\r\n    function retrieveTokensMintedPublicPerAddress(uint256 _collectionID, address _address) external view returns(uint256);\r\n\r\n    function viewColIDforTokenID(uint256 _tokenid) external view returns (uint256);\r\n\r\n    function burnToMint(uint256 mintIndex, uint256 _burnCollectionID, uint256 _tokenId, uint256 _mintCollectionID, uint256 _saltfun_o, address burner) external;\r\n\r\n    function retrieveArtistAddress(uint256 _collectionID) external view returns(address);\r\n\r\n    function setTokenHash(uint256 _collectionID, uint256 _mintIndex, bytes32 _hash) external;\r\n\r\n    function retrieveTokenHash(uint256 _tokenid) external view returns(bytes32);\r\n\r\n}"},"RandomizerRNG.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n *  @title: NextGen 6529 - RNG Randomizer Contract\r\n *  @date: 20-December-2023\r\n *  @version: 1.8\r\n *  @author: 6529 team\r\n */\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./ArrngConsumer.sol\";\r\nimport \"./INextGenCore.sol\";\r\nimport \"./INextGenAdmins.sol\";\r\n\r\ncontract NextGenRandomizerRNG is ArrngConsumer {\r\n\r\n    mapping(uint256 =\u003e uint256) public requestToToken;\r\n    address gencore;\r\n    INextGenCore public gencoreContract;\r\n    INextGenAdmins private adminsContract;\r\n    event Withdraw(address indexed _add, bool status, uint256 indexed funds);\r\n    uint256 ethRequired;\r\n    mapping(uint256 =\u003e uint256) public tokenToRequest;\r\n    mapping(uint256 =\u003e uint256) public tokenIdToCollection;\r\n\r\n    constructor(address _gencore, address _adminsContract, address _arRNG) ArrngConsumer(_arRNG) {\r\n        gencore = _gencore;\r\n        gencoreContract = INextGenCore(_gencore);\r\n        adminsContract = INextGenAdmins(_adminsContract);\r\n    }\r\n\r\n    modifier FunctionAdminRequired(bytes4 _selector) {\r\n        require(adminsContract.retrieveFunctionAdmin(msg.sender, _selector) == true || adminsContract.retrieveGlobalAdmin(msg.sender) == true, \"Not allowed\");\r\n        _;\r\n    }\r\n\r\n    function requestRandomWords(uint256 tokenid, uint256 _ethRequired) public payable {\r\n        require(msg.sender == gencore);\r\n        uint256 requestId = arrngController.requestRandomWords{value: _ethRequired}(1, (address(this)));\r\n        tokenToRequest[tokenid] = requestId;\r\n        requestToToken[requestId] = tokenid;\r\n\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 id, uint256[] memory numbers) internal override {\r\n        gencoreContract.setTokenHash(tokenIdToCollection[requestToToken[id]], requestToToken[id], keccak256(abi.encodePacked(numbers,requestToToken[id])));\r\n    }\r\n\r\n    // function that calculates the random hash and returns it to the gencore contract\r\n    function calculateTokenHash(uint256 _collectionID, uint256 _mintIndex, uint256 _saltfun_o) public {\r\n        require(msg.sender == gencore);\r\n        tokenIdToCollection[_mintIndex] = _collectionID;\r\n        requestRandomWords(_mintIndex, ethRequired);\r\n    }\r\n\r\n    // function to update contracts\r\n\r\n    function updateAdminContract(address _newadminsContract) public FunctionAdminRequired(this.updateAdminContract.selector) {\r\n        require(INextGenAdmins(_newadminsContract).isAdminContract() == true, \"Contract is not Admin\");\r\n        adminsContract = INextGenAdmins(_newadminsContract);\r\n    }\r\n\r\n    function updateCoreContract(address _gencore) public FunctionAdminRequired(this.updateCoreContract.selector) { \r\n        gencore = _gencore;\r\n        gencoreContract = INextGenCore(_gencore);\r\n    }\r\n\r\n    // function to update cost\r\n\r\n    function updateRNGCost(uint256 _ethRequired) public FunctionAdminRequired(this.updateRNGCost.selector) {\r\n        ethRequired = _ethRequired;\r\n    }\r\n\r\n    // function to withdraw any balance from the smart contract\r\n\r\n    function emergencyWithdraw() public FunctionAdminRequired(this.emergencyWithdraw.selector) {\r\n        uint balance = address(this).balance;\r\n        address admin = adminsContract.owner();\r\n        (bool success, ) = payable(admin).call{value: balance}(\"\");\r\n        require(success, \"ETH failed\");\r\n        emit Withdraw(msg.sender, success, balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // get randomizer contract status\r\n    function isRandomizerContract() external view returns (bool) {\r\n        return true;\r\n    }\r\n}"}}