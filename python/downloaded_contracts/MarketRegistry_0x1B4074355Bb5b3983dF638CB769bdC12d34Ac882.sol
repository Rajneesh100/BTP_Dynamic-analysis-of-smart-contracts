{{
  "language": "Solidity",
  "sources": {
    "MarketRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// SandBox1 \npragma solidity 0.8.21;\n\nimport \"IMarketRegistry.sol\";\nimport \"IMarketAdapter.sol\";\nimport \"IOracleAdapter.sol\";\nimport \"ISandbox1.sol\";\nimport \"ISandbox2.sol\";\nimport \"ITreasury.sol\";\nimport \"IERC20Mint.sol\";\nimport \"Ownable.sol\";\nimport \"TransferHelper.sol\";\nimport \"TimeLock.sol\";\n\n/// @title MarketRegistry \n/// @author UBD Team\n/// @notice This contract encapsulate all AMM logic for UBD ecosystem\n/// @dev  Check deploy params so they are immutable\ncontract MarketRegistry is IMarketRegistry, Ownable, TimeLock{\n\n    uint8 public constant   NATIVE_TOKEN_DECIMALS = 18;\n    uint256 public constant PERCENT_DENOMINATOR = 10000; \n    uint8 public immutable  MIN_NATIVE_PERCENT;\n\n    // Slippage params in Base Points ( https://en.wikipedia.org/wiki/Basis_point )\n    uint256 public constant DEFAULT_SLIPPAGE_MAX = 1000; // 10%=1000 bp, 0.1%=10 bp, etc\n    uint256 public   DEFAULT_SLIPPAGE =  100; //   1%=100 bp, 0.1%=10 bp, etc\n    \n    address public UBD_TEAM_ADDRESS;\n    UBDNetwork public ubdNetwork;\n\n    // from asset() to market for this asset.\n    mapping(address => Market) public markets;\n\n    event ReceivedEther(address, uint);\n    event TreasuryChangeScheduled(bytes32 indexed ParamsHash, uint256 ScheduledAt);\n    event TreasuryChanged(bytes32 indexed ParamsHash, uint256 FactdAt);\n\n    modifier onlySandboxes()\n    {\n        require(\n            msg.sender == ubdNetwork.sandbox1 || \n            msg.sender == ubdNetwork.sandbox2, \n            'Only for SandBoxes'\n        );\n        _;\n    }\n\n\n    constructor(uint8 _minNativePercent, uint256 _timeLockDelay)\n    TimeLock(_timeLockDelay)\n    {\n        MIN_NATIVE_PERCENT = _minNativePercent;\n    }\n\n    receive() external payable {\n        emit ReceivedEther(msg.sender, msg.value);\n    }\n\n    /// @notice Swap any asset (available at AMM) to Sandboxe1  BASE asset\n    /// @dev only called from Sandboxes\n    /// @param amountIn - amount with decimcals\n    /// @param amountOutMin - min acceptable amount of base asset\n    /// @param assetIn - contract address of in asset\n    /// @param to - address which receive base asset\n    /// @param deadline - acceptable time\n    function swapExactInToBASEOut(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address assetIn,\n        address to,\n        uint deadline\n    ) external onlySandboxes returns (uint256 amountOut) \n\n    {\n        address[] memory path = new address[](2);\n        path[0] = assetIn;\n        path[1] = ISandbox1(ubdNetwork.sandbox1).EXCHANGE_BASE_ASSET();\n        // Because this method used for swap ANY asset to Base, \n        // lets get market fror EXCHANGE_BASE_ASSET\n        Market memory mrkt = _getMarketForAsset(path[1]); \n\n        TransferHelper.safeTransferFrom(\n            assetIn, to, mrkt.marketAdapter, \n            amountIn // \n        );\n        \n        uint256 notLessThen = _getNotLessThenEstimate(amountIn, path, mrkt.slippage);\n        amountOut = IMarketAdapter(mrkt.marketAdapter).swapExactERC20InToERC20Out(\n                amountIn,\n                notLessThen, \n                path,\n                to,\n                block.timestamp\n            );\n    }\n\n    /// @notice Swap Treasury assets  to Sandbox1 (usdt) or to Sandbox2  (dai) asset\n    /// @dev only called from Sandboxes\n    function swapTreasuryAssetsPercentToSandboxAsset() \n        external\n        onlySandboxes \n        returns(uint256 totalStableAmount)\n    {\n        // For GAS safe\n        address sandbox1 = ubdNetwork.sandbox1;\n        address treasury = ubdNetwork.treasury;\n        address sandbox2 = ubdNetwork.sandbox2;\n        uint256 etherFromTreasuryAmount;\n        uint256 topupPercent;\n        address[] memory path = new address[](2);\n        \n        // authentificate\n        if (msg.sender == sandbox1){\n            path[1] = ISandbox1(sandbox1).EXCHANGE_BASE_ASSET();\n            topupPercent = ITreasury(treasury).SANDBOX1_REDEEM_PERCENT();\n            \n        } else if (msg.sender == sandbox2) {\n            path[1] = ISandbox2(sandbox2).SANDBOX_2_BASE_ASSET();\n            topupPercent = ITreasury(treasury).SANDBOX2_TOPUP_PERCENT();\n            require (ITreasury(treasury).isReadyForTopupSandBox2(), \"Not ready for topup Sandbox2\");\n        }\n\n        etherFromTreasuryAmount = ITreasury(treasury).sendEtherForRedeem(topupPercent);\n        Market memory mrkt = _getMarketForAsset(path[1]);\n     \n        // Swap Native Asset \n        path[0] = IMarketAdapter(mrkt.marketAdapter).WETH();\n        uint256 notLessThen = _getNotLessThenEstimate(etherFromTreasuryAmount, path, mrkt.slippage);\n        totalStableAmount =  IMarketAdapter(\n            mrkt.marketAdapter\n        ).swapExactNativeInToERC20Out{value: etherFromTreasuryAmount}(\n            etherFromTreasuryAmount, \n            notLessThen, \n            path,\n            msg.sender,\n            block.timestamp\n        );\n\n        // Swap ERC20 Treasure assets\n        uint256[] memory sended = new uint256[](ubdNetwork.treasuryERC20Assets.length);\n        sended = ITreasury(ubdNetwork.treasury).sendERC20ForSwap(mrkt.marketAdapter, topupPercent);\n        for (uint256 i; i < sended.length; ++ i){\n            path[0] = ubdNetwork.treasuryERC20Assets[i].asset;\n            notLessThen = _getNotLessThenEstimate(sended[i], path, mrkt.slippage);\n            totalStableAmount += IMarketAdapter(mrkt.marketAdapter).swapExactERC20InToERC20Out(\n                sended[i],\n                notLessThen, \n                path,\n                msg.sender,\n                block.timestamp\n            );\n\n        }\n    }\n\n    /// @notice Swap Sandbox1 (usdt) or  Sandbox2 (dai) asset to Treasury assets\n    /// @dev only called from Sandboxes\n    function swapExactBASEInToTreasuryAssets(uint256 _amountIn, address _baseAsset) \n        external \n        onlySandboxes \n    {\n        // Prepare all parameters: percenet of native and erc20 assets for swap\n        // Call adapter swap methods\n        \n        Market memory mrkt = _getMarketForAsset(address(0)); \n        // 2. Transfer all  amount of in asset from sandbox1 to adapter\n        TransferHelper.safeTransferFrom(\n            _baseAsset, \n            msg.sender, \n            mrkt.marketAdapter, \n            _amountIn \n        );\n        // 3. Call Swap\n        address[] memory path = new address[](2);\n        path[0] = _baseAsset;\n        path[1] = IMarketAdapter(mrkt.marketAdapter).WETH(); // Native asset\n        // 1. First define shares of Native asset \n        uint256 inSwap = _amountIn * _getNativeTreasurePercent() / 100;\n        uint256 notLessThen = _getNotLessThenEstimate(inSwap, path, mrkt.slippage);\n        IMarketAdapter(mrkt.marketAdapter).swapExactERC20InToNativeOut(\n            inSwap,\n            notLessThen, \n            path,\n            ubdNetwork.treasury,\n            block.timestamp\n        );\n\n        // 4. Call Swap for other Treasuru assets\n        address _asset; // GAS safe\n        for (uint256 i; i < ubdNetwork.treasuryERC20Assets.length; ++ i){\n            _asset = ubdNetwork.treasuryERC20Assets[i].asset;\n            mrkt = _getMarketForAsset(_asset); \n            inSwap = _amountIn * (ubdNetwork.treasuryERC20Assets[i].percent * PERCENT_DENOMINATOR) / (100 * PERCENT_DENOMINATOR);\n            path[0] = _baseAsset;\n            path[1] = _asset; \n            notLessThen = _getNotLessThenEstimate(inSwap, path, mrkt.slippage);\n            IMarketAdapter(mrkt.marketAdapter).swapExactERC20InToERC20Out(\n                inSwap,\n                notLessThen, \n                path,\n                ubdNetwork.treasury,\n                block.timestamp\n            );\n        }\n    }\n\n    \n    ///////////////////////////////////////////////////////////\n    ///////    Admin Functions        /////////////////////////\n    ///////////////////////////////////////////////////////////\n    function setMarketParams(address _asset, Market memory _market) external onlyOwner {\n        require(\n            _market.marketAdapter != address(0) &&\n            _market.oracleAdapter != address(0) &&\n            _market.slippage <= DEFAULT_SLIPPAGE_MAX,\n            'No zero address'\n        );\n\n        if (_market.slippage == 0) {\n           _market.slippage = DEFAULT_SLIPPAGE;    \n        }\n        markets[_asset] = _market;\n    }\n\n    function setSandbox1(address _adr) \n        external \n        onlyOwner \n    {\n        ubdNetwork.sandbox1 = _adr;\n    }\n    function setSandbox2(address _adr) \n        external \n        onlyOwner \n    {\n        ubdNetwork.sandbox2 = _adr;\n    }\n\n    function setTreasury(address _adr) \n        external \n        onlyOwner \n    {\n        ubdNetwork.treasury = _adr;\n    }\n\n    function addERC20AssetToTreasury(AsssetShare memory _assetShare) \n        external \n        onlyOwner\n        afterTimeLock(keccak256(abi.encode(_assetShare.asset, _assetShare.percent))) \n    {\n        for (uint256 i; i < ubdNetwork.treasuryERC20Assets.length; ++ i){\n            require(ubdNetwork.treasuryERC20Assets[i].asset != _assetShare.asset, 'Asset already exist');\n        }\n        ubdNetwork.treasuryERC20Assets.push(_assetShare);\n        \n        //check sum percent\n        uint8 sumPercent;\n        for (uint256 i; i < ubdNetwork.treasuryERC20Assets.length; ++ i){\n            sumPercent += ubdNetwork.treasuryERC20Assets[i].percent;\n        }\n        require(sumPercent + MIN_NATIVE_PERCENT <= 100, 'Percent sum too much');\n        _rebalance();\n    }\n\n    function editAssetShares(uint8[] calldata _percentShares)\n        external\n        onlyOwner\n    {\n        uint256 erc20AssetsCount = ubdNetwork.treasuryERC20Assets.length;\n        require(_percentShares.length == erc20AssetsCount, 'Arrays len mismatch');\n        uint8 sumPercent;\n        for (uint256 i; i < _percentShares.length; ++ i){\n            sumPercent += _percentShares[i];\n        }\n        require(sumPercent + MIN_NATIVE_PERCENT <= 100, 'Percent sum too much');\n\n        for (uint256 i; i < erc20AssetsCount; ++ i){\n            ubdNetwork.treasuryERC20Assets[i].percent = _percentShares[i];\n        }\n        _rebalance();\n\n    }\n\n    function removeERC20AssetFromTreasury(address _erc20) \n        external \n        onlyOwner \n    {\n        require(\n            IERC20(_erc20).balanceOf(ubdNetwork.treasury) == 0, \n            'Cant remove asset with non zero balance'\n        );\n\n        uint256 assetsCount = ubdNetwork.treasuryERC20Assets.length;\n        for (uint256 i; i < assetsCount; ++ i){\n            if (ubdNetwork.treasuryERC20Assets[i].asset == _erc20){\n                // if not last then replace last  to this position\n                if (i != assetsCount - 1){\n                    ubdNetwork.treasuryERC20Assets[i] = ubdNetwork.treasuryERC20Assets[assetsCount-1];\n                }\n                ubdNetwork.treasuryERC20Assets.pop();\n            } \n        }\n    }\n\n     function setTeamAddress(address _adr) \n        external \n        onlyOwner \n    {\n        require(_adr != address(0), 'Cant be zero address');\n        UBD_TEAM_ADDRESS = _adr;\n    }\n\n    function rebalance() external payable onlyOwner {\n        _rebalance();    \n    }\n    \n    ///////////////////////////////////////////////////////////////\n    \n\n    function getAmountOut(\n        uint amountIn, \n        address[] memory path\n    ) public view returns (uint256 amountOut)\n    {\n        Market memory mrkt = _getMarketForAsset(path[path.length - 1]); \n        return IOracleAdapter(mrkt.oracleAdapter).getAmountOut(amountIn, path);\n\n    }\n    function getCollateralLevelM10() external view returns(uint256 level){\n        address sandbox1 = ubdNetwork.sandbox1; //GAS safe\n        // Sandbox 1\n        address sandbox1BaseAsset = ISandbox1(sandbox1).EXCHANGE_BASE_ASSET();\n        uint256 s1BalanceInBaseAsset = IERC20(sandbox1BaseAsset).balanceOf(\n            ubdNetwork.sandbox1\n        );\n\n        // bring balance to common decimals (18 as native chain token)\n        s1BalanceInBaseAsset = _bringAmountToNativeDecimals(\n            sandbox1BaseAsset, s1BalanceInBaseAsset\n        );\n\n        uint256 ubdTotalSupply = IERC20Metadata(\n            ISandbox1(sandbox1).ubdTokenAddress()\n        ).totalSupply();\n        \n        // bring supply to common decimals (18 as native chain token)\n        ubdTotalSupply = _bringAmountToNativeDecimals(\n            ISandbox1(sandbox1).ubdTokenAddress(), ubdTotalSupply\n        );\n\n        level =  (\n            s1BalanceInBaseAsset + \n            getBalanceInStableUnits(ubdNetwork.treasury, treasuryERC20Assets()) *\n            10**NATIVE_TOKEN_DECIMALS\n        ) * 10 / ubdTotalSupply;\n\n    }\n\n    function getBalanceInStable18(address _holder, address[] memory _assets) \n        public \n        view \n        returns(uint256 stableUnitsNoDecimal)\n    {\n        address sandbox1BaseAsset = ISandbox1(ubdNetwork.sandbox1).EXCHANGE_BASE_ASSET();\n        uint256 originalBalance;\n        uint256 erc20BalanceCommonDecimals;\n        address[] memory path = new address[](2);\n        \n        // First calc _holder erc20 balance in base assets but with native decimals for safe precision\n        for (uint256 i; i < _assets.length; ++ i){\n            //bring to a common denominator\n            path[0] = _assets[i]; \n            path[1] = sandbox1BaseAsset;\n            originalBalance = getAmountOut(\n                IERC20(_assets[i]).balanceOf(_holder), \n                path\n            );\n            erc20BalanceCommonDecimals += _bringAmountToNativeDecimals(\n                sandbox1BaseAsset,\n                originalBalance\n            );\n        }\n\n        \n        // Calc _holder native balance\n        Market memory mrkt = _getMarketForAsset(address(0)); \n        path[0] = IMarketAdapter(mrkt.oracleAdapter).WETH();\n        path[1] = sandbox1BaseAsset;\n        \n        \n        uint256 tBalanceNative = _holder.balance;\n        originalBalance = getAmountOut(tBalanceNative, path);\n        tBalanceNative = _bringAmountToNativeDecimals(\n            sandbox1BaseAsset,\n            originalBalance\n        );\n        // Sum and devide for get balance in Stable coin units\n        stableUnitsNoDecimal = (erc20BalanceCommonDecimals + tBalanceNative);\n    }\n    \n    \n\n    function getBalanceInStableUnits(address _holder, address[] memory _assets) \n        public \n        view \n        returns(uint256 stableUnitsNoDecimal)\n    {\n         stableUnitsNoDecimal = getBalanceInStable18(_holder, _assets)/ 10 ** NATIVE_TOKEN_DECIMALS;\n    }\n    \n    function treasuryERC20Assets() public view returns(address[] memory assets) {\n        assets = new address[](ubdNetwork.treasuryERC20Assets.length);\n        for (uint256 i; i < ubdNetwork.treasuryERC20Assets.length; ++ i) {\n            assets[i] = ubdNetwork.treasuryERC20Assets[i].asset;\n        }\n        \n    }\n\n    // 1% = 100 bp\n    function getActualAssetsSharesM100() public  view returns(ActualShares[] memory sharesM100, uint256 trBalance) {\n        // Gas Save local vars\n        address treasury = ubdNetwork.treasury;\n        address baseAsset = ISandbox1(ubdNetwork.sandbox1).EXCHANGE_BASE_ASSET();\n        uint256 treasuryBalanceWithNativeDecimals = getBalanceInStable18(\n            ubdNetwork.treasury, \n            treasuryERC20Assets()\n        );\n        //debug\n        trBalance = treasuryBalanceWithNativeDecimals;\n\n        address[] memory path = new address[](2);\n        sharesM100 = new ActualShares[](ubdNetwork.treasuryERC20Assets.length + 1);\n        uint256 assetBalance;\n        Market memory mrkt = _getMarketForAsset(address(0)); \n        for (uint256 i; i < sharesM100.length; ++ i) {\n            path[1] = baseAsset;\n            if (i != sharesM100.length - 1) {\n                // ERC20 assets\n                path[0] = ubdNetwork.treasuryERC20Assets[i].asset;\n                \n                sharesM100[i].asset = path[0];\n                // balance in asset\n                assetBalance = IERC20(path[0]).balanceOf(treasury);\n                if (assetBalance > 0) {\n                    (sharesM100[i].actualPercentPoint, sharesM100[i].excessAmount) = calcAssetShareAndExcess(\n                        assetBalance,\n                        path,\n                        uint256(ubdNetwork.treasuryERC20Assets[i].percent),\n                        treasuryBalanceWithNativeDecimals\n                    );\n                }\n            } else {\n                //Native asset\n                path[0] = IMarketAdapter(mrkt.oracleAdapter).WETH();\n                assetBalance = treasury.balance;\n                if (assetBalance > 0) {\n                    (sharesM100[i].actualPercentPoint, sharesM100[i].excessAmount) = calcAssetShareAndExcess(\n                        assetBalance,\n                        path,\n                        _getNativeTreasurePercent(),\n                        treasuryBalanceWithNativeDecimals\n                    );\n                }\n            }\n            \n        }\n    }\n\n    \n    function getUBDNetworkTeamAddress() external view returns(address) {\n        return UBD_TEAM_ADDRESS;\n    }\n    function getUBDNetworkInfo() external view returns(UBDNetwork memory) {\n        return ubdNetwork;\n    }\n\n    function calcAssetShareAndExcess(\n        uint256 _actualBalance, \n        address[] memory _path,\n        uint256 _nominalShare,\n        uint256 _treasuryBalanceWithNativeDecimals\n    ) public view returns (uint256 share, uint256 exceed) {\n        uint256 assetBalanceInBaseAsset = getAmountOut(\n            _actualBalance, \n            _path\n        );\n        // balance in BASE asset but with Native Decimals\n        uint256 factAssetBalanceInBaseAssetNativeDecimals = _bringAmountToNativeDecimals(_path[1], assetBalanceInBaseAsset);\n        uint256 nominalAssetBalanceInBaseAssetNativeDecimals = \n            _treasuryBalanceWithNativeDecimals * _nominalShare * PERCENT_DENOMINATOR/ (100 * PERCENT_DENOMINATOR); \n        share  = factAssetBalanceInBaseAssetNativeDecimals * PERCENT_DENOMINATOR / _treasuryBalanceWithNativeDecimals;\n        \n        // Case when owner want to remove asset and  set it share=0 before \n        if (_nominalShare == 0) {\n            exceed = _actualBalance;\n            return (share, exceed);\n        }\n\n        uint256 diffInStableNativeDecimals;\n        address a0 = _path[0];\n        if (nominalAssetBalanceInBaseAssetNativeDecimals < factAssetBalanceInBaseAssetNativeDecimals) {\n            diffInStableNativeDecimals =\n                factAssetBalanceInBaseAssetNativeDecimals - nominalAssetBalanceInBaseAssetNativeDecimals;\n            _path[0] = _path[1];\n            _path[1] = a0;\n            exceed = getAmountOut(\n                diffInStableNativeDecimals  * 10 ** IERC20Metadata(_path[0]).decimals() / 10**18, \n                _path\n            );  \n        }\n    }\n    \n    function isInitialized() public view returns(bool){\n        UBDNetwork memory _ubdnetwork = ubdNetwork;\n        if (_ubdnetwork.sandbox1 != address(0) &&\n            _ubdnetwork.sandbox2 != address(0) &&\n            _ubdnetwork.treasury != address(0) &&\n            _ubdnetwork.treasuryERC20Assets.length > 0 \n        ) {\n            return true; \n        }\n    }\n/////////////////////////////////////////////////////////////////////////////////////\n    function _rebalance() internal {\n        address treasury = ubdNetwork.treasury;\n        ActualShares[] memory actshrs = new ActualShares[](\n            ubdNetwork.treasuryERC20Assets.length + 1\n        );\n        (actshrs, ) = getActualAssetsSharesM100();\n        \n        uint256 notLessThen;\n\n        address[] memory path = new address[](2);\n        path[1] = ISandbox1(ubdNetwork.sandbox1).EXCHANGE_BASE_ASSET();\n        for (uint256 i; i < actshrs.length; ++ i){\n            if (actshrs[i].asset != address(0) && actshrs[i].excessAmount > 0){\n                // Sell ERC20\n                path[0] = actshrs[i].asset;\n                Market memory mrkt = _getMarketForAsset(path[0]); \n                // Transfer erc20 asset to MarketAdapter for Swap from Treasury\n                ITreasury(ubdNetwork.treasury).sendOneERC20ForSwap(\n                    mrkt.marketAdapter, \n                    actshrs[i].asset, \n                    actshrs[i].excessAmount\n                );\n                notLessThen = _getNotLessThenEstimate(actshrs[i].excessAmount, path, mrkt.slippage);\n                IMarketAdapter(mrkt.marketAdapter).swapExactERC20InToERC20Out(\n                    actshrs[i].excessAmount,\n                    notLessThen, \n                    path,\n                    ubdNetwork.sandbox1,\n                    block.timestamp\n                );\n            } else if (actshrs[i].asset == address(0) && actshrs[i].excessAmount > 0) {\n                // Sel Native\n                Market memory mrkt = _getMarketForAsset(path[0]); \n                path[0] = IMarketAdapter(mrkt.marketAdapter).WETH();\n                notLessThen = _getNotLessThenEstimate(actshrs[i].excessAmount, path, mrkt.slippage);\n                // First need send ether from Treasury to this contract\n                uint256 etherPercent = actshrs[i].excessAmount * 1000000 / treasury.balance;\n                uint256 etherFromTreasuryAmount = ITreasury(treasury).sendEtherForRedeem(etherPercent);\n                notLessThen = _getNotLessThenEstimate(etherFromTreasuryAmount, path, mrkt.slippage);\n                IMarketAdapter(\n                    mrkt.marketAdapter\n                ).swapExactNativeInToERC20Out{value: etherFromTreasuryAmount}(\n                    etherFromTreasuryAmount, \n                    notLessThen, \n                    path,\n                    ubdNetwork.sandbox1,\n                    block.timestamp\n                );\n            }\n        }\n\n    }\n\n    function _getNativeTreasurePercent() internal view returns(uint256) {\n        uint8 sumPercent;\n        for (uint256 i; i < ubdNetwork.treasuryERC20Assets.length; ++ i){\n            sumPercent += ubdNetwork.treasuryERC20Assets[i].percent;\n        }\n        return uint256(100 - sumPercent);\n\n    }\n\n    function _bringAmountToNativeDecimals(address _erc20, uint256 _amount) \n        internal \n        view \n        returns(uint256 amount)\n    {\n        uint8 decimals = IERC20Metadata(_erc20).decimals(); \n        if (decimals < NATIVE_TOKEN_DECIMALS) {\n            amount = _amount * 10 ** (NATIVE_TOKEN_DECIMALS - decimals);\n        } else if (decimals > NATIVE_TOKEN_DECIMALS) {\n            amount = _amount / 10 ** (decimals - NATIVE_TOKEN_DECIMALS);\n        } else {\n            amount = _amount;\n        }\n\n    }\n\n    function _getMarketForAsset(address _asset) internal view returns(Market memory market) {\n        market = markets[_asset];\n        if (market.slippage == 0) {\n            market.slippage == DEFAULT_SLIPPAGE;\n        }\n    }\n\n    function _getNotLessThenEstimate(uint256 _amountIn, address[] memory _path, uint256 _slippagePercentPoints) \n        internal \n        view \n        returns (uint256 notLessThen) \n    {\n        uint256 out = getAmountOut(_amountIn, _path); \n        notLessThen = out - out * _slippagePercentPoints / 10000;  \n    }  \n}\n"
    },
    "IMarketRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\n\ninterface IMarketRegistry  {\n\n    struct AsssetShare {\n        address asset;\n        uint8 percent;\n    }\n\n    struct UBDNetwork {\n        address sandbox1;\n        address treasury;\n        address sandbox2;\n        AsssetShare[] treasuryERC20Assets;\n\n    }\n\n    struct Market {\n        address marketAdapter;\n        address oracleAdapter;\n        uint256 slippage;\n    }\n\n    struct ActualShares{\n        address asset;\n        uint256 actualPercentPoint;\n        uint256 excessAmount;\n    } \n    \n    function swapExactInToBASEOut(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address assetIn,\n        address to,\n        uint deadline\n    ) external returns (uint256 amountOut);\n\n\n    function swapExactBASEInToTreasuryAssets(uint256 _amountIn, address _baseAsset) external;\n\n    function swapTreasuryAssetsPercentToSandboxAsset() \n        external \n        returns(uint256 totalStableAmount);\n\n    function getAmountOut(\n        uint amountIn, \n        address[] memory path\n    ) external view returns (uint256 amountOut);\n    function getCollateralLevelM10() external view returns(uint256);\n    function getBalanceInStableUnits(address _holder, address[] memory _assets) external view returns(uint256);\n    function treasuryERC20Assets() external view returns(address[] memory assets);\n    function getUBDNetworkTeamAddress() external view returns(address);\n    function getUBDNetworkInfo() external view returns(UBDNetwork memory);\n}"
    },
    "IMarketAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\n\ninterface IMarketAdapter  {\n\n    function swapExactERC20InToERC20Out(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactNativeInToERC20Out(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external payable returns (uint256 amountOut);\n\n    function swapExactERC20InToNativeOut(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external  returns (uint256 amountOut);\n\n    function swapERC20InToExactNativeOut(\n        uint256 amountInMax,\n        uint256 amountOut,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external returns (uint256 amountIn);\n\n    function swapNativeInToExactERC20Out(\n        uint256 amountInMax,\n        uint256 amountOut,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external payable returns (uint256 amountIn);\n\n    function swapERC20InToExactERC20Out(\n        uint256 amountInMax,\n        uint256 amountOut,\n        address[] memory path,\n        address recipient,\n        uint deadline\n    ) external returns (uint256 amountIn);\n\n\n    function WETH() external view returns(address);\n\n    // function getAmountOut(uint amountIn,  address[] memory path ) \n    //     external \n    //     view \n    //     returns (uint256 amountOut);\n}"
    },
    "IOracleAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\ninterface IOracleAdapter  {\n\n    \n    function getAmountOut(\n        uint amountIn, \n        address[] memory path\n    ) external view returns (uint256 amountOut);\n\n    function getAmountIn(uint amountOut, address[] memory path)\n        external\n        view\n        returns (uint256 amountIn);\n\n}"
    },
    "ISandbox1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\ninterface ISandbox1  {\n    function EXCHANGE_BASE_ASSET() external view returns (address);\n    function TREASURY_TOPUP_PERCENT() external view returns (uint256);\n    function mintReward(address _for, uint256 _amount) external;\n    function ubdTokenAddress() external view returns (address);\n}"
    },
    "ISandbox2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\ninterface ISandbox2 {\n    function SANDBOX_2_BASE_ASSET() external view returns (address);\n}"
    },
    "ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\n\ninterface ITreasury  {\n    function sendERC20ForSwap(address _marketAdapter, uint256 _percent) \n        external \n        returns(uint256[] memory);\n    function sendOneERC20ForSwap(address _marketAdapter, address _erc20, uint256 _amount) external;     \n    function sendEtherForRedeem(uint256 _percent) external returns(uint256);\n    function SANDBOX1_REDEEM_PERCENT() external view returns(uint256);\n    function SANDBOX2_TOPUP_PERCENT() external view returns(uint256);\n    function isReadyForTopupSandBox2() external view returns(bool);\n}"
    },
    "IERC20Mint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport \"IERC20Metadata.sol\";\n\ninterface IERC20Mint is IERC20Metadata {\n    function mint(address _for, uint256 _amount) external;\n}"
    },
    "IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport \"IERC20.sol\";\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "TimeLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Timelock\npragma solidity 0.8.21;\n\nabstract contract TimeLock {\n\tuint256 public immutable TIME_LOCK_DELAY;\n\n\tmapping(bytes32 => uint256) public changePendings;\n\n\tevent ChangeScheduled(bytes32 indexed ParamsHash, uint256 ScheduledAt);\n    event Changed(bytes32 indexed ParamsHash, uint256 FactdAt);\n\t\n\tmodifier afterTimeLock(bytes32 newParamsHash)\n    {\n        if (TIME_LOCK_DELAY != 0) {\n            if (changePendings[newParamsHash] == 0) {\n                // New change pending\n                changePendings[newParamsHash] = block.timestamp + TIME_LOCK_DELAY;\n                emit ChangeScheduled(newParamsHash, block.timestamp + TIME_LOCK_DELAY);\n        \n            } else if (changePendings[newParamsHash] <= block.timestamp ) {\n                // Operation ready\n                changePendings[newParamsHash] = 0;\n                emit Changed(newParamsHash, block.timestamp);\n                _;\n\n            } else {\n                revert('Still pending');\n            }\n\n        } else {\n            _;\n        }\n    }\n\n    constructor(uint256 _timeLockDelay)\n    {\n        TIME_LOCK_DELAY = _timeLockDelay;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "MarketRegistry.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}