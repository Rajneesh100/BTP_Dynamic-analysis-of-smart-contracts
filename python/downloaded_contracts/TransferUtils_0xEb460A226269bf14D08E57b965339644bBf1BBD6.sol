{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"TransferUtils.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./Ownable.sol\";\n\n// ------------------------------------------------------------\n//                   .   .               , .  \n//     _ ._. _.._  _ | _.|_  _   .    _ -+-|_ \n//    (_][  (_][ )(_)|(_][_)(_)\\_| * (/, | [ )\n//    ._|                      ._|            \n// ------------------------------------------------------------\n// \n// Just some cheesy functions for transferring ETH and tokens.\n//\n// Please Note:\n//\n// - These methods are focused on gas efficiency\n// - These methods do NO SAFETY CHECKS\n// - You (obviously) must approve tokens to this contract before\n//   using transfer functions.\n// - This is my first contract deployed to main net. \n//\n// ------------------------------------------------------------\n\ncontract ERC20 { \n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {}\n}\n\ncontract ERC721 { \n    function transferFrom(address from, address to, uint256 tokenId) external {}\n}\n\ncontract TransferUtils is Ownable {\n\n    constructor() Ownable() {}\n\n    // ----------------------------------------------------------------------------------------------------\n    // ETH TRANSFER UTILS\n\n    function ethOneToManySameAmt(address[] calldata _tos, uint _amount)\n    payable public \n    {\n        uint len = _tos.length;\n        for (uint i; i \u003c len; ) {\n            _tos[i].call{value:_amount}(\"\");\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function ethOneToManyDiffAmt(address[] calldata _tos, uint[] calldata _amounts)\n    payable public \n    {\n        uint len = _tos.length;\n        for (uint i; i \u003c len; ) {\n            _tos[i].call{value:_amounts[i]}(\"\");\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    // ----------------------------------------------------------------------------------------------------\n    // ERC-20 TRANSFER UTILS\n\n    function erc20OneToManySameAmt(address _token, address[] calldata _tos, uint _amount)\n    public \n    {\n        uint len = _tos.length;\n        ERC20 e = ERC20(_token);\n        for (uint i; i \u003c len; ) {\n            e.transferFrom(msg.sender, _tos[i], _amount);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function erc20OneToManyDiffAmt(address _token, address[] calldata _tos, uint[] calldata _amounts)\n    public \n    {\n        uint len = _tos.length;\n        ERC20 e = ERC20(_token);\n        for (uint i; i \u003c len; ) {\n            e.transferFrom(msg.sender, _tos[i], _amounts[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    // ----------------------------------------------------------------------------------------------------\n    // ERC-721 TRANSFER UTILS\n\n    function erc721OneToOne(address _token, address _to, uint[] calldata _token_ids)\n    public \n    {\n        uint len = _token_ids.length;\n        ERC721 e = ERC721(_token);\n        for (uint i; i \u003c _token_ids.length; ) {\n            e.transferFrom(msg.sender, _to, _token_ids[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function erc721OneToManySingle(address _token, address[] calldata _tos, uint[] calldata _token_ids)\n    public \n    {\n        uint len = _tos.length;\n        ERC721 e = ERC721(_token);\n        for (uint i; i \u003c len; ) {\n            e.transferFrom(msg.sender, _tos[i], _token_ids[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function erc721OneToManyMulti(address _token, address[] calldata _tos, uint[] calldata _token_nums, uint[] calldata _token_ids)\n    public \n    {\n        uint len = _tos.length;\n        ERC721 e = ERC721(_token);\n        uint k;\n        for (uint i; i \u003c len; ) {\n            uint num = _token_nums[i];\n            for(uint j; j \u003c num; ) {\n                e.transferFrom(msg.sender, _tos[i], _token_ids[k]);\n                unchecked {\n                    j++;\n                    k++;\n                }\n            }\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function withdraw()\n    public onlyOwner  returns(bool)\n    {\n        (bool success, /* bytes memory data */) = owner().call{value:address(this).balance}(\"\");\n        if (!success)\n            return false;\n        return true;\n    }\n\n    receive() external payable  {}\n}\n"}}