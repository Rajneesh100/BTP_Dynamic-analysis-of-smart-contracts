{{
  "language": "Solidity",
  "sources": {
    "ChristmasGift.sol": {
      "content": "/*\r\n         |\r\n        -+-\r\n         A\r\n        /=\\               /\\  /\\    ___  _ __  _ __ __    __\r\n      i/ O \\i            /  \\/  \\  / _ \\| '__|| '__|\\ \\  / /\r\n      /=====\\           / /\\  /\\ \\|  __/| |   | |    \\ \\/ /\r\n      /  i  \\           \\ \\ \\/ / / \\___/|_|   |_|     \\  /\r\n    i/ O * O \\i                                       / /\r\n    /=========\\        __  __                        /_/    _\r\n    /  *   *  \\        \\ \\/ /        /\\  /\\    __ _  ____  | |\r\n  i/ O   i   O \\i       \\  /   __   /  \\/  \\  / _` |/ ___\\ |_|\r\n  /=============\\       /  \\  |__| / /\\  /\\ \\| (_| |\\___ \\  _\r\n  /  O   i   O  \\      /_/\\_\\      \\ \\ \\/ / / \\__,_|\\____/ |_|\r\ni/ *   O   O   * \\i\r\n/=================\\\r\n       |___|\r\n\r\nChristmas Gift enriches the festive season by applying a 1% transaction tax to fund a special Christmas ETH Airdrop to holders on Christmas Day.\r\n\r\nhttps://christmasgifterc.vip/\r\nhttps://christmasgifterc.vip/\r\nhttps://x.com/XMASGIFTERC20\r\nhttps://t.me/XMASGIFTERC20\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ChristmasETHAirdrop is Ownable {\r\n    uint256 public marketingFunds;\r\n    mapping(address => bool) public hasReceivedAirdrop;\r\n    uint256 public christmasDay = 1703523666; // Timestamp for December 25, 2023\r\n\r\n    event Airdropped(address recipient, uint256 amount);\r\n\r\n    constructor(address initialOwner) Ownable(initialOwner) {}\r\n\r\n    // Airdrop ETH to a list of addresses on Christmas day\r\n    function airdropETH(address[] calldata _recipients, uint256 _amountPerRecipient) external onlyOwner {\r\n        require(block.timestamp == christmasDay, \"It's not Christmas Day\");\r\n        require(address(this).balance >= _recipients.length * _amountPerRecipient, \"Insufficient ETH balance\");\r\n\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            address recipient = _recipients[i];\r\n            if (!hasReceivedAirdrop[recipient]) {\r\n                (bool sent, ) = recipient.call{value: _amountPerRecipient}(\"\");\r\n                require(sent, \"Failed to send ETH\");\r\n                hasReceivedAirdrop[recipient] = true;\r\n                emit Airdropped(recipient, _amountPerRecipient);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    receive() external payable {}\r\n\r\n   \r\n    function depositETH() external payable {\r\n      \r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}