{"BRC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBRC20Factory.sol\";\r\n\r\n\r\ncontract BRC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n    address public immutable factory;\r\n    uint256  public totalSupply;\r\n    mapping (address =\u003e uint256) public balanceOf;\r\n    mapping (address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n    mapping (address =\u003e uint256) public nonces;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() {\r\n        (name, symbol, decimals) = IBRC20Factory(msg.sender).parameters();\r\n\r\n        factory = msg.sender;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(\u00271\u0027)), chainId, address(this)));\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external {\r\n        require(msg.sender == factory, \"unauthorized\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(msg.sender == factory, \"unauthorized\");\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender];\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline \u003e= block.timestamp, \u0027EXPIRED\u0027);\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \u0027\\x19\\x01\u0027,\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n            require(recoveredAddress != address(0) \u0026\u0026 recoveredAddress == owner, \u0027INVALID_SIGNATURE\u0027);\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        totalSupply += amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}"},"IBRC20Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBRC20Factory {\r\n    function parameters() external view returns (string memory name, string memory symbol, uint8 decimals);\r\n}"}}